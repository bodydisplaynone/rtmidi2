/* Generated by Cython 0.17.1 on Mon Feb 25 12:47:57 2013 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define PyIndex_Check(o)     (PyNumber_Check(o) && !PyFloat_Check(o) && !PyComplex_Check(o))
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__rtmidi2
#define __PYX_HAVE_API__rtmidi2
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "stdlib.h"
#include "RtMidi/RtMidi.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))

#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "rtmidi2.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_7rtmidi2_MidiInMulti;
struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr;
struct __pyx_obj_7rtmidi2_MidiBase;
struct __pyx_obj_7rtmidi2_MidiIn;
struct __pyx_obj_7rtmidi2_MidiOut;
struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__;
struct __pyx_obj_7rtmidi2_MidiOut_slower;
struct __pyx_opt_args_7rtmidi2_11MidiInMulti_open_ports;

/* "rtmidi2.pyx":249
 *         self.openports.append(port)
 *         return self
 *     cpdef open_ports(self, pattern="*"):             # <<<<<<<<<<<<<<
 *         """
 *         a shortcut for opening many ports at once.
 */
struct __pyx_opt_args_7rtmidi2_11MidiInMulti_open_ports {
  int __pyx_n;
  PyObject *pattern;
};

/* "rtmidi2.pyx":177
 *             return (None, None) if gettime == 1 else None
 * 
 * cdef class MidiInMulti:             # <<<<<<<<<<<<<<
 *     cdef RtMidiIn* inspector
 *     cdef vector[RtMidiIn *]* ptrs
 */
struct __pyx_obj_7rtmidi2_MidiInMulti {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rtmidi2_MidiInMulti *__pyx_vtab;
  RtMidiIn *inspector;
  std::vector<RtMidiIn *> *ptrs;
  int queuesize;
  PyObject *clientname;
  PyObject *py_callback;
  PyObject *openports;
  PyObject *hascallback;
};


/* "rtmidi2.pyx":216
 *     def __repr__(self):
 *         allports = self.ports
 *         s = " + ".join(allports[port] for port in self.openports)             # <<<<<<<<<<<<<<
 *         return "MidiInMulti ( %s )" % s
 *     property ports:
 */
struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *__pyx_outer_scope;
  PyObject *__pyx_v_port;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "rtmidi2.pyx":50
 *         void sendMessage(vector[unsigned char]* message)
 * 
 * cdef class MidiBase:             # <<<<<<<<<<<<<<
 *     cdef RtMidi* baseptr(self):
 *         return NULL
 */
struct __pyx_obj_7rtmidi2_MidiBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rtmidi2_MidiBase *__pyx_vtab;
};


/* "rtmidi2.pyx":96
 *     (<object>py_callback)(message, time_stamp)
 * 
 * cdef class MidiIn(MidiBase):             # <<<<<<<<<<<<<<
 *     cdef RtMidiIn* thisptr
 *     cdef object py_callback
 */
struct __pyx_obj_7rtmidi2_MidiIn {
  struct __pyx_obj_7rtmidi2_MidiBase __pyx_base;
  RtMidiIn *thisptr;
  PyObject *py_callback;
};


/* "rtmidi2.pyx":453
 *             raise NotImplemented("no multiple channels implemented right now")
 * 
 * cdef class MidiOut(MidiBase):             # <<<<<<<<<<<<<<
 *     cdef RtMidiOut* thisptr
 *     cdef vector[unsigned char]* msg3
 */
struct __pyx_obj_7rtmidi2_MidiOut {
  struct __pyx_obj_7rtmidi2_MidiBase __pyx_base;
  RtMidiOut *thisptr;
  std::vector<unsigned char> *msg3;
  int msg3_locked;
};


/* "rtmidi2.pyx":214
 *         del self.ptrs
 *         del self.inspector
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         allports = self.ports
 *         s = " + ".join(allports[port] for port in self.openports)
 */
struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ {
  PyObject_HEAD
  PyObject *__pyx_v_allports;
  struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self;
};


/* "rtmidi2.pyx":356
 *     return m
 * 
 * cdef class MidiOut_slower(MidiBase):             # <<<<<<<<<<<<<<
 *     cdef RtMidiOut* thisptr
 *     def __cinit__(self):
 */
struct __pyx_obj_7rtmidi2_MidiOut_slower {
  struct __pyx_obj_7rtmidi2_MidiBase __pyx_base;
  RtMidiOut *thisptr;
};



/* "rtmidi2.pyx":50
 *         void sendMessage(vector[unsigned char]* message)
 * 
 * cdef class MidiBase:             # <<<<<<<<<<<<<<
 *     cdef RtMidi* baseptr(self):
 *         return NULL
 */

struct __pyx_vtabstruct_7rtmidi2_MidiBase {
  RtMidi *(*baseptr)(struct __pyx_obj_7rtmidi2_MidiBase *);
};
static struct __pyx_vtabstruct_7rtmidi2_MidiBase *__pyx_vtabptr_7rtmidi2_MidiBase;


/* "rtmidi2.pyx":96
 *     (<object>py_callback)(message, time_stamp)
 * 
 * cdef class MidiIn(MidiBase):             # <<<<<<<<<<<<<<
 *     cdef RtMidiIn* thisptr
 *     cdef object py_callback
 */

struct __pyx_vtabstruct_7rtmidi2_MidiIn {
  struct __pyx_vtabstruct_7rtmidi2_MidiBase __pyx_base;
};
static struct __pyx_vtabstruct_7rtmidi2_MidiIn *__pyx_vtabptr_7rtmidi2_MidiIn;


/* "rtmidi2.pyx":177
 *             return (None, None) if gettime == 1 else None
 * 
 * cdef class MidiInMulti:             # <<<<<<<<<<<<<<
 *     cdef RtMidiIn* inspector
 *     cdef vector[RtMidiIn *]* ptrs
 */

struct __pyx_vtabstruct_7rtmidi2_MidiInMulti {
  PyObject *(*open_port)(struct __pyx_obj_7rtmidi2_MidiInMulti *, int, int __pyx_skip_dispatch);
  PyObject *(*open_ports)(struct __pyx_obj_7rtmidi2_MidiInMulti *, int __pyx_skip_dispatch, struct __pyx_opt_args_7rtmidi2_11MidiInMulti_open_ports *__pyx_optional_args);
  PyObject *(*close_ports)(struct __pyx_obj_7rtmidi2_MidiInMulti *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7rtmidi2_MidiInMulti *__pyx_vtabptr_7rtmidi2_MidiInMulti;


/* "rtmidi2.pyx":356
 *     return m
 * 
 * cdef class MidiOut_slower(MidiBase):             # <<<<<<<<<<<<<<
 *     cdef RtMidiOut* thisptr
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_7rtmidi2_MidiOut_slower {
  struct __pyx_vtabstruct_7rtmidi2_MidiBase __pyx_base;
  PyObject *(*send_message)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*send_cc)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*send_messages)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, int, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*send_noteon)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*send_noteon_many)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*send_noteoff)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, unsigned char, unsigned char, int __pyx_skip_dispatch);
  PyObject *(*send_noteoff_many)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7rtmidi2_MidiOut_slower *__pyx_vtabptr_7rtmidi2_MidiOut_slower;


/* "rtmidi2.pyx":453
 *             raise NotImplemented("no multiple channels implemented right now")
 * 
 * cdef class MidiOut(MidiBase):             # <<<<<<<<<<<<<<
 *     cdef RtMidiOut* thisptr
 *     cdef vector[unsigned char]* msg3
 */

struct __pyx_vtabstruct_7rtmidi2_MidiOut {
  struct __pyx_vtabstruct_7rtmidi2_MidiBase __pyx_base;
  void (*send_raw)(struct __pyx_obj_7rtmidi2_MidiOut *, unsigned char, unsigned char, unsigned char);
  PyObject *(*send_cc)(struct __pyx_obj_7rtmidi2_MidiOut *, unsigned char, unsigned char, unsigned char, int __pyx_skip_dispatch);
  PyObject *(*send_messages)(struct __pyx_obj_7rtmidi2_MidiOut *, int, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*send_noteon)(struct __pyx_obj_7rtmidi2_MidiOut *, unsigned char, unsigned char, unsigned char, int __pyx_skip_dispatch);
  PyObject *(*send_noteon_many)(struct __pyx_obj_7rtmidi2_MidiOut *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*send_noteoff)(struct __pyx_obj_7rtmidi2_MidiOut *, unsigned char, unsigned char, int __pyx_skip_dispatch);
  PyObject *(*send_noteoff_many)(struct __pyx_obj_7rtmidi2_MidiOut *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7rtmidi2_MidiOut *__pyx_vtabptr_7rtmidi2_MidiOut;
static CYTHON_INLINE void __pyx_f_7rtmidi2_7MidiOut_send_raw(struct __pyx_obj_7rtmidi2_MidiOut *, unsigned char, unsigned char, unsigned char);
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred())
            PyErr_SetObject(PyExc_KeyError, key);
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
        PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
        PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (PyList_CheckExact(o)) {
        Py_ssize_t n = (likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if (likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = (likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if (likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {  /* inlined PySequence_GetItem() */
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (unlikely(l < 0)) return NULL;
                i += l;
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        PyObject *m;
        m = __Pyx_GetAttrString(d, "get");
        if (!m) return NULL;
        value = PyObject_CallFunctionObjArgs(m, key,
                                             (default_value == Py_None) ? NULL : default_value, NULL);
        Py_DECREF(m);
    }
#endif
    return value;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

#define __Pyx_Generator_USED
#include <structmember.h>
#include <frameobject.h>
typedef PyObject *(*__pyx_generator_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_generator_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    int resume_label;
    char is_running;  // using T_BOOL for property below requires char value
} __pyx_GeneratorObject;
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure);
static int __pyx_Generator_init(void);
static int __Pyx_Generator_clear(PyObject* self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'rtmidi2' */
static PyTypeObject *__pyx_ptype_7rtmidi2_MidiBase = 0;
static PyTypeObject *__pyx_ptype_7rtmidi2_MidiIn = 0;
static PyTypeObject *__pyx_ptype_7rtmidi2_MidiInMulti = 0;
static PyTypeObject *__pyx_ptype_7rtmidi2_MidiOut_slower = 0;
static PyTypeObject *__pyx_ptype_7rtmidi2_MidiOut = 0;
static PyTypeObject *__pyx_ptype_7rtmidi2___pyx_scope_struct____repr__ = 0;
static PyTypeObject *__pyx_ptype_7rtmidi2___pyx_scope_struct_1_genexpr = 0;
static void __pyx_f_7rtmidi2_midi_in_callback(double, std::vector<unsigned char> *, void *); /*proto*/
#define __Pyx_MODULE_NAME "rtmidi2"
int __pyx_module_is_main_rtmidi2 = 0;

/* Implementation of 'rtmidi2' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_pf_7rtmidi2_8MidiBase_open_port(struct __pyx_obj_7rtmidi2_MidiBase *__pyx_v_self, PyObject *__pyx_v_port); /* proto */
static PyObject *__pyx_pf_7rtmidi2_8MidiBase_2open_virtual_port(struct __pyx_obj_7rtmidi2_MidiBase *__pyx_v_self, PyObject *__pyx_v_port_name); /* proto */
static PyObject *__pyx_pf_7rtmidi2_8MidiBase_5ports___get__(struct __pyx_obj_7rtmidi2_MidiBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_8MidiBase_4close_port(struct __pyx_obj_7rtmidi2_MidiBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_8MidiBase_6ports_matching(struct __pyx_obj_7rtmidi2_MidiBase *__pyx_v_self, PyObject *__pyx_v_pattern); /* proto */
static int __pyx_pf_7rtmidi2_6MidiIn___cinit__(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self, PyObject *__pyx_v_clientname, PyObject *__pyx_v_queuesize); /* proto */
static int __pyx_pf_7rtmidi2_6MidiIn_2__init__(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_clientname, CYTHON_UNUSED PyObject *__pyx_v_queuesize); /* proto */
static void __pyx_pf_7rtmidi2_6MidiIn_4__dealloc__(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_6MidiIn_8callback___get__(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self); /* proto */
static int __pyx_pf_7rtmidi2_6MidiIn_8callback_2__set__(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self, PyObject *__pyx_v_callback); /* proto */
static PyObject *__pyx_pf_7rtmidi2_6MidiIn_6ignore_types(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self, PyObject *__pyx_v_midi_sysex, PyObject *__pyx_v_midi_time, PyObject *__pyx_v_midi_sense); /* proto */
static PyObject *__pyx_pf_7rtmidi2_6MidiIn_8get_message(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self, int __pyx_v_gettime); /* proto */
static int __pyx_pf_7rtmidi2_11MidiInMulti___cinit__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_clientname, PyObject *__pyx_v_queuesize); /* proto */
static int __pyx_pf_7rtmidi2_11MidiInMulti_2__init__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, PyObject *__pyx_v_clientname, PyObject *__pyx_v_queuesize); /* proto */
static void __pyx_pf_7rtmidi2_11MidiInMulti_4__dealloc__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_8__repr___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_6__repr__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_5ports___get__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_8get_openports(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_10ports_matching(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, PyObject *__pyx_v_pattern); /* proto */
static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_12open_port(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, int __pyx_v_port); /* proto */
static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_14open_ports(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, PyObject *__pyx_v_pattern); /* proto */
static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_16close_ports(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_8callback___get__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self); /* proto */
static int __pyx_pf_7rtmidi2_11MidiInMulti_8callback_2__set__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, PyObject *__pyx_v_callback); /* proto */
static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_18get_message(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, CYTHON_UNUSED int __pyx_v_gettime); /* proto */
static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_10clientname___get__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_splitchannel(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_b); /* proto */
static PyObject *__pyx_pf_7rtmidi2_2msgtype2str(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_msgtype); /* proto */
static PyObject *__pyx_pf_7rtmidi2_4midi2note(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_midinote); /* proto */
static PyObject *__pyx_pf_7rtmidi2_6mididump_callback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_src, PyObject *__pyx_v_msg, CYTHON_UNUSED PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_7rtmidi2_8mididump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_port_pattern); /* proto */
static int __pyx_pf_7rtmidi2_14MidiOut_slower___cinit__(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self); /* proto */
static int __pyx_pf_7rtmidi2_14MidiOut_slower_2__init__(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self); /* proto */
static void __pyx_pf_7rtmidi2_14MidiOut_slower_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_6send_message(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, PyObject *__pyx_v_message); /* proto */
static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_8send_cc(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, int __pyx_v_channel, int __pyx_v_cc, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_10send_messages(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, int __pyx_v_messagetype, PyObject *__pyx_v_channels, PyObject *__pyx_v_values1, PyObject *__pyx_v_values2); /* proto */
static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_12send_noteon(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, int __pyx_v_channel, int __pyx_v_midinote, int __pyx_v_velocity); /* proto */
static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_14send_noteon_many(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes, PyObject *__pyx_v_vels); /* proto */
static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_16send_noteoff(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_midinote); /* proto */
static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_18send_noteoff_many(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes); /* proto */
static int __pyx_pf_7rtmidi2_7MidiOut___cinit__(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self); /* proto */
static int __pyx_pf_7rtmidi2_7MidiOut_2__init__(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self); /* proto */
static void __pyx_pf_7rtmidi2_7MidiOut_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rtmidi2_7MidiOut_6send_message(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, PyObject *__pyx_v_message); /* proto */
static PyObject *__pyx_pf_7rtmidi2_7MidiOut_8send_cc(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_cc, unsigned char __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rtmidi2_7MidiOut_10send_messages(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, int __pyx_v_messagetype, PyObject *__pyx_v_messages); /* proto */
static PyObject *__pyx_pf_7rtmidi2_7MidiOut_12send_noteon(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_midinote, unsigned char __pyx_v_velocity); /* proto */
static PyObject *__pyx_pf_7rtmidi2_7MidiOut_14send_noteon_many(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes, PyObject *__pyx_v_vels); /* proto */
static PyObject *__pyx_pf_7rtmidi2_7MidiOut_16send_noteoff(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_midinote); /* proto */
static PyObject *__pyx_pf_7rtmidi2_7MidiOut_18send_noteoff_many(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes); /* proto */
static char __pyx_k_1[] = "port number out of range";
static char __pyx_k_3[] = "Port not found";
static char __pyx_k_5[] = "RTMIDI-IN";
static char __pyx_k_10[] = "RTMIDI-INSPECTOR";
static char __pyx_k_11[] = " + ";
static char __pyx_k_12[] = "MidiInMulti ( %s )";
static char __pyx_k_13[] = "Port already open!";
static char __pyx_k_15[] = "*";
static char __pyx_k_16[] = "The blocking interface is not implemented for multiple inputs. Use the callback system";
static char __pyx_k_18[] = "%s%d";
static char __pyx_k_19[] = "CC | ch %d | cc %d | val %d";
static char __pyx_k_20[] = "NOTEON | ch %d | note %s (%d) |\302\240vel %d";
static char __pyx_k_21[] = "%s | ch %d | val1 %d | val2 %d";
static char __pyx_k_22[] = "multiple channels in a function call not implemented yet";
static char __pyx_k_24[] = "only lists implemented right now";
static char __pyx_k_26[] = "no multiple channels implemented right now";
static char __pyx_k_28[] = "messages should be a list of tuples. other containers (numpy arrays) are still not supported";
static char __pyx_k_30[] = "channels, notes and vels should be lists. other containers are not yet implemented";
static char __pyx_k_33[] = "clientname: object";
static char __pyx_k_36[] = "/Users/edu/dev/cython/rtmidi2/rtmidi2.pyx";
static char __pyx_k_39[] = "C C# D D# E F F# G G# A Bb B C";
static char __pyx_k__b[] = "b";
static char __pyx_k__m[] = "m";
static char __pyx_k__t[] = "t";
static char __pyx_k__CC[] = "CC";
static char __pyx_k__cc[] = "cc";
static char __pyx_k__ch[] = "ch";
static char __pyx_k__msg[] = "msg";
static char __pyx_k__src[] = "src";
static char __pyx_k__join[] = "join";
static char __pyx_k__msgt[] = "msgt";
static char __pyx_k__port[] = "port";
static char __pyx_k__val1[] = "val1";
static char __pyx_k__val2[] = "val2";
static char __pyx_k__vels[] = "vels";
static char __pyx_k__index[] = "index";
static char __pyx_k__notes[] = "notes";
static char __pyx_k__ports[] = "ports";
static char __pyx_k__range[] = "range";
static char __pyx_k__split[] = "split";
static char __pyx_k__value[] = "value";
static char __pyx_k__NOTEON[] = "NOTEON";
static char __pyx_k__octave[] = "octave";
static char __pyx_k__NOTEOFF[] = "NOTEOFF";
static char __pyx_k__UNKNOWN[] = "UNKNOWN";
static char __pyx_k__channel[] = "channel";
static char __pyx_k__fnmatch[] = "fnmatch";
static char __pyx_k__gettime[] = "gettime";
static char __pyx_k__msgtstr[] = "msgtstr";
static char __pyx_k__msgtype[] = "msgtype";
static char __pyx_k__pattern[] = "pattern";
static char __pyx_k__rtmidi2[] = "rtmidi2";
static char __pyx_k__send_cc[] = "send_cc";
static char __pyx_k__values1[] = "values1";
static char __pyx_k__values2[] = "values2";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__callback[] = "callback";
static char __pyx_k__channels[] = "channels";
static char __pyx_k__messages[] = "messages";
static char __pyx_k__mididump[] = "mididump";
static char __pyx_k__midinote[] = "midinote";
static char __pyx_k__notename[] = "notename";
static char __pyx_k__velocity[] = "velocity";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k__enumerate[] = "enumerate";
static char __pyx_k__midi2note[] = "midi2note";
static char __pyx_k__midi_time[] = "midi_time";
static char __pyx_k__open_port[] = "open_port";
static char __pyx_k__queuesize[] = "queuesize";
static char __pyx_k__rtmidiout[] = "rtmidiout";
static char __pyx_k__PITCHWHEEL[] = "PITCHWHEEL";
static char __pyx_k__PROGCHANGE[] = "PROGCHANGE";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k___notenames[] = "_notenames";
static char __pyx_k__clientname[] = "clientname";
static char __pyx_k__midi_sense[] = "midi_sense";
static char __pyx_k__midi_sysex[] = "midi_sysex";
static char __pyx_k__open_ports[] = "open_ports";
static char __pyx_k__pitchindex[] = "pitchindex";
static char __pyx_k__close_ports[] = "close_ports";
static char __pyx_k__messagetype[] = "messagetype";
static char __pyx_k__msgtype2str[] = "msgtype2str";
static char __pyx_k__send_noteon[] = "send_noteon";
static char __pyx_k__port_pattern[] = "port_pattern";
static char __pyx_k__send_message[] = "send_message";
static char __pyx_k__send_noteoff[] = "send_noteoff";
static char __pyx_k__set_callback[] = "set_callback";
static char __pyx_k__splitchannel[] = "splitchannel";
static char __pyx_k__send_messages[] = "send_messages";
static char __pyx_k__NotImplemented[] = "NotImplemented";
static char __pyx_k__ports_matching[] = "ports_matching";
static char __pyx_k__send_noteon_many[] = "send_noteon_many";
static char __pyx_k__mididump_callback[] = "mididump_callback";
static char __pyx_k__send_noteoff_many[] = "send_noteoff_many";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_kp_s_12;
static PyObject *__pyx_kp_s_13;
static PyObject *__pyx_kp_s_15;
static PyObject *__pyx_kp_s_16;
static PyObject *__pyx_kp_s_18;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_kp_s_20;
static PyObject *__pyx_kp_s_21;
static PyObject *__pyx_kp_s_22;
static PyObject *__pyx_kp_s_24;
static PyObject *__pyx_kp_s_26;
static PyObject *__pyx_kp_s_28;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_30;
static PyObject *__pyx_kp_s_36;
static PyObject *__pyx_kp_s_39;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_n_s__CC;
static PyObject *__pyx_n_s__NOTEOFF;
static PyObject *__pyx_n_s__NOTEON;
static PyObject *__pyx_n_s__NotImplemented;
static PyObject *__pyx_n_s__PITCHWHEEL;
static PyObject *__pyx_n_s__PROGCHANGE;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s__UNKNOWN;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___notenames;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__callback;
static PyObject *__pyx_n_s__cc;
static PyObject *__pyx_n_s__ch;
static PyObject *__pyx_n_s__channel;
static PyObject *__pyx_n_s__channels;
static PyObject *__pyx_n_s__clientname;
static PyObject *__pyx_n_s__close_ports;
static PyObject *__pyx_n_s__enumerate;
static PyObject *__pyx_n_s__fnmatch;
static PyObject *__pyx_n_s__gettime;
static PyObject *__pyx_n_s__index;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__m;
static PyObject *__pyx_n_s__messages;
static PyObject *__pyx_n_s__messagetype;
static PyObject *__pyx_n_s__midi2note;
static PyObject *__pyx_n_s__midi_sense;
static PyObject *__pyx_n_s__midi_sysex;
static PyObject *__pyx_n_s__midi_time;
static PyObject *__pyx_n_s__mididump;
static PyObject *__pyx_n_s__mididump_callback;
static PyObject *__pyx_n_s__midinote;
static PyObject *__pyx_n_s__msg;
static PyObject *__pyx_n_s__msgt;
static PyObject *__pyx_n_s__msgtstr;
static PyObject *__pyx_n_s__msgtype;
static PyObject *__pyx_n_s__msgtype2str;
static PyObject *__pyx_n_s__notename;
static PyObject *__pyx_n_s__notes;
static PyObject *__pyx_n_s__octave;
static PyObject *__pyx_n_s__open_port;
static PyObject *__pyx_n_s__open_ports;
static PyObject *__pyx_n_s__pattern;
static PyObject *__pyx_n_s__pitchindex;
static PyObject *__pyx_n_s__port;
static PyObject *__pyx_n_s__port_pattern;
static PyObject *__pyx_n_s__ports;
static PyObject *__pyx_n_s__ports_matching;
static PyObject *__pyx_n_s__queuesize;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__rtmidi2;
static PyObject *__pyx_n_s__send_cc;
static PyObject *__pyx_n_s__send_message;
static PyObject *__pyx_n_s__send_messages;
static PyObject *__pyx_n_s__send_noteoff;
static PyObject *__pyx_n_s__send_noteoff_many;
static PyObject *__pyx_n_s__send_noteon;
static PyObject *__pyx_n_s__send_noteon_many;
static PyObject *__pyx_n_s__set_callback;
static PyObject *__pyx_n_s__split;
static PyObject *__pyx_n_s__splitchannel;
static PyObject *__pyx_n_s__src;
static PyObject *__pyx_n_s__t;
static PyObject *__pyx_n_s__val1;
static PyObject *__pyx_n_s__val2;
static PyObject *__pyx_n_s__value;
static PyObject *__pyx_n_s__values1;
static PyObject *__pyx_n_s__values2;
static PyObject *__pyx_n_s__velocity;
static PyObject *__pyx_n_s__vels;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_144;
static PyObject *__pyx_int_176;
static PyObject *__pyx_int_192;
static PyObject *__pyx_int_224;
static PyObject *__pyx_k_6;
static PyObject *__pyx_k_7;
static PyObject *__pyx_k_8;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_4;
static PyObject *__pyx_k_tuple_9;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_17;
static PyObject *__pyx_k_tuple_23;
static PyObject *__pyx_k_tuple_25;
static PyObject *__pyx_k_tuple_27;
static PyObject *__pyx_k_tuple_29;
static PyObject *__pyx_k_tuple_31;
static PyObject *__pyx_k_tuple_32;
static PyObject *__pyx_k_tuple_34;
static PyObject *__pyx_k_tuple_37;
static PyObject *__pyx_k_tuple_40;
static PyObject *__pyx_k_tuple_42;
static PyObject *__pyx_k_tuple_44;
static PyObject *__pyx_k_codeobj_35;
static PyObject *__pyx_k_codeobj_38;
static PyObject *__pyx_k_codeobj_41;
static PyObject *__pyx_k_codeobj_43;
static PyObject *__pyx_k_codeobj_45;

/* "rtmidi2.pyx":51
 * 
 * cdef class MidiBase:
 *     cdef RtMidi* baseptr(self):             # <<<<<<<<<<<<<<
 *         return NULL
 *     def open_port(self, port=0):
 */

static RtMidi *__pyx_f_7rtmidi2_8MidiBase_baseptr(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiBase *__pyx_v_self) {
  RtMidi *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("baseptr", 0);

  /* "rtmidi2.pyx":52
 * cdef class MidiBase:
 *     cdef RtMidi* baseptr(self):
 *         return NULL             # <<<<<<<<<<<<<<
 *     def open_port(self, port=0):
 *         if isinstance(port, int):
 */
  __pyx_r = NULL;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_8MidiBase_1open_port(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_8MidiBase_open_port[] = "MidiBase.open_port(self, port=0)";
static PyObject *__pyx_pw_7rtmidi2_8MidiBase_1open_port(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_port = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_port (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__port,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__port);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "open_port") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_port = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("open_port", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiBase.open_port", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_8MidiBase_open_port(((struct __pyx_obj_7rtmidi2_MidiBase *)__pyx_v_self), __pyx_v_port);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":53
 *     cdef RtMidi* baseptr(self):
 *         return NULL
 *     def open_port(self, port=0):             # <<<<<<<<<<<<<<
 *         if isinstance(port, int):
 *             if port > len(self.ports) - 1:
 */

static PyObject *__pyx_pf_7rtmidi2_8MidiBase_open_port(struct __pyx_obj_7rtmidi2_MidiBase *__pyx_v_self, PyObject *__pyx_v_port) {
  PyObject *__pyx_v_port_number = NULL;
  PyObject *__pyx_v_ports = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open_port", 0);

  /* "rtmidi2.pyx":54
 *         return NULL
 *     def open_port(self, port=0):
 *         if isinstance(port, int):             # <<<<<<<<<<<<<<
 *             if port > len(self.ports) - 1:
 *                 raise ValueError("port number out of range")
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyInt_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_port, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "rtmidi2.pyx":55
 *     def open_port(self, port=0):
 *         if isinstance(port, int):
 *             if port > len(self.ports) - 1:             # <<<<<<<<<<<<<<
 *                 raise ValueError("port number out of range")
 *             port_number = port
 */
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__ports); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromSsize_t((__pyx_t_3 - 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_port, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "rtmidi2.pyx":56
 *         if isinstance(port, int):
 *             if port > len(self.ports) - 1:
 *                 raise ValueError("port number out of range")             # <<<<<<<<<<<<<<
 *             port_number = port
 *         else:
 */
      __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "rtmidi2.pyx":57
 *             if port > len(self.ports) - 1:
 *                 raise ValueError("port number out of range")
 *             port_number = port             # <<<<<<<<<<<<<<
 *         else:
 *             ports = self.ports
 */
    __Pyx_INCREF(__pyx_v_port);
    __pyx_v_port_number = __pyx_v_port;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "rtmidi2.pyx":59
 *             port_number = port
 *         else:
 *             ports = self.ports             # <<<<<<<<<<<<<<
 *             if port in ports:
 *                 port_number = self.ports.index(port)
 */
    __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__ports); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_ports = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "rtmidi2.pyx":60
 *         else:
 *             ports = self.ports
 *             if port in ports:             # <<<<<<<<<<<<<<
 *                 port_number = self.ports.index(port)
 *             else:
 */
    __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_port, __pyx_v_ports, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "rtmidi2.pyx":61
 *             ports = self.ports
 *             if port in ports:
 *                 port_number = self.ports.index(port)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Port not found")
 */
      __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__ports); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__index); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_port);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_port);
      __Pyx_GIVEREF(__pyx_v_port);
      __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_v_port_number = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "rtmidi2.pyx":63
 *                 port_number = self.ports.index(port)
 *             else:
 *                 raise ValueError("Port not found")             # <<<<<<<<<<<<<<
 *         self.baseptr().openPort(port_number)
 *         return self
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L5:;
  }
  __pyx_L3:;

  /* "rtmidi2.pyx":64
 *             else:
 *                 raise ValueError("Port not found")
 *         self.baseptr().openPort(port_number)             # <<<<<<<<<<<<<<
 *         return self
 *     def open_virtual_port(self, port_name):
 */
  __pyx_t_6 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_port_number); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_vtabstruct_7rtmidi2_MidiBase *)__pyx_v_self->__pyx_vtab)->baseptr(__pyx_v_self)->openPort(__pyx_t_6);

  /* "rtmidi2.pyx":65
 *                 raise ValueError("Port not found")
 *         self.baseptr().openPort(port_number)
 *         return self             # <<<<<<<<<<<<<<
 *     def open_virtual_port(self, port_name):
 *         self.baseptr().openVirtualPort(string(<char*>port_name))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rtmidi2.MidiBase.open_port", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_port_number);
  __Pyx_XDECREF(__pyx_v_ports);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_8MidiBase_3open_virtual_port(PyObject *__pyx_v_self, PyObject *__pyx_v_port_name); /*proto*/
static char __pyx_doc_7rtmidi2_8MidiBase_2open_virtual_port[] = "MidiBase.open_virtual_port(self, port_name)";
static PyObject *__pyx_pw_7rtmidi2_8MidiBase_3open_virtual_port(PyObject *__pyx_v_self, PyObject *__pyx_v_port_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_virtual_port (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_8MidiBase_2open_virtual_port(((struct __pyx_obj_7rtmidi2_MidiBase *)__pyx_v_self), ((PyObject *)__pyx_v_port_name));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":66
 *         self.baseptr().openPort(port_number)
 *         return self
 *     def open_virtual_port(self, port_name):             # <<<<<<<<<<<<<<
 *         self.baseptr().openVirtualPort(string(<char*>port_name))
 *         return self
 */

static PyObject *__pyx_pf_7rtmidi2_8MidiBase_2open_virtual_port(struct __pyx_obj_7rtmidi2_MidiBase *__pyx_v_self, PyObject *__pyx_v_port_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open_virtual_port", 0);

  /* "rtmidi2.pyx":67
 *         return self
 *     def open_virtual_port(self, port_name):
 *         self.baseptr().openVirtualPort(string(<char*>port_name))             # <<<<<<<<<<<<<<
 *         return self
 *     property ports:
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_port_name); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {__pyx_t_2 = std::string(((char *)__pyx_t_1));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  ((struct __pyx_vtabstruct_7rtmidi2_MidiBase *)__pyx_v_self->__pyx_vtab)->baseptr(__pyx_v_self)->openVirtualPort(__pyx_t_2);

  /* "rtmidi2.pyx":68
 *     def open_virtual_port(self, port_name):
 *         self.baseptr().openVirtualPort(string(<char*>port_name))
 *         return self             # <<<<<<<<<<<<<<
 *     property ports:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rtmidi2.MidiBase.open_virtual_port", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_8MidiBase_5ports_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rtmidi2_8MidiBase_5ports_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_8MidiBase_5ports___get__(((struct __pyx_obj_7rtmidi2_MidiBase *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":70
 *         return self
 *     property ports:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return [self.baseptr().getPortName(i).c_str() for i in range(self.baseptr().getPortCount())]
 *     def close_port(self):
 */

static PyObject *__pyx_pf_7rtmidi2_8MidiBase_5ports___get__(struct __pyx_obj_7rtmidi2_MidiBase *__pyx_v_self) {
  unsigned int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rtmidi2.pyx":71
 *     property ports:
 *         def __get__(self):
 *             return [self.baseptr().getPortName(i).c_str() for i in range(self.baseptr().getPortCount())]             # <<<<<<<<<<<<<<
 *     def close_port(self):
 *         self.baseptr().closePort()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_7rtmidi2_MidiBase *)__pyx_v_self->__pyx_vtab)->baseptr(__pyx_v_self)->getPortCount();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyBytes_FromString(((struct __pyx_vtabstruct_7rtmidi2_MidiBase *)__pyx_v_self->__pyx_vtab)->baseptr(__pyx_v_self)->getPortName(__pyx_v_i).c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    if (unlikely(__Pyx_PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  }
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rtmidi2.MidiBase.ports.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_8MidiBase_5close_port(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7rtmidi2_8MidiBase_4close_port[] = "MidiBase.close_port(self)";
static PyObject *__pyx_pw_7rtmidi2_8MidiBase_5close_port(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close_port (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_8MidiBase_4close_port(((struct __pyx_obj_7rtmidi2_MidiBase *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":72
 *         def __get__(self):
 *             return [self.baseptr().getPortName(i).c_str() for i in range(self.baseptr().getPortCount())]
 *     def close_port(self):             # <<<<<<<<<<<<<<
 *         self.baseptr().closePort()
 *     def ports_matching(self, pattern):
 */

static PyObject *__pyx_pf_7rtmidi2_8MidiBase_4close_port(struct __pyx_obj_7rtmidi2_MidiBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close_port", 0);

  /* "rtmidi2.pyx":73
 *             return [self.baseptr().getPortName(i).c_str() for i in range(self.baseptr().getPortCount())]
 *     def close_port(self):
 *         self.baseptr().closePort()             # <<<<<<<<<<<<<<
 *     def ports_matching(self, pattern):
 *         """
 */
  ((struct __pyx_vtabstruct_7rtmidi2_MidiBase *)__pyx_v_self->__pyx_vtab)->baseptr(__pyx_v_self)->closePort();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_8MidiBase_7ports_matching(PyObject *__pyx_v_self, PyObject *__pyx_v_pattern); /*proto*/
static char __pyx_doc_7rtmidi2_8MidiBase_6ports_matching[] = "MidiBase.ports_matching(self, pattern)\n\n        return the indexes of the ports which match the glob pattern\n\n        Example\n        -------\n\n        # get all ports\n        midiin.ports_matching(\"*\")\n\n        # open the IAC port in OSX without having to remember the whole name\n        midiin.open_port(midiin.ports_matching(\"IAC*\"))\n        ";
static PyObject *__pyx_pw_7rtmidi2_8MidiBase_7ports_matching(PyObject *__pyx_v_self, PyObject *__pyx_v_pattern) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ports_matching (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_8MidiBase_6ports_matching(((struct __pyx_obj_7rtmidi2_MidiBase *)__pyx_v_self), ((PyObject *)__pyx_v_pattern));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":74
 *     def close_port(self):
 *         self.baseptr().closePort()
 *     def ports_matching(self, pattern):             # <<<<<<<<<<<<<<
 *         """
 *         return the indexes of the ports which match the glob pattern
 */

static PyObject *__pyx_pf_7rtmidi2_8MidiBase_6ports_matching(struct __pyx_obj_7rtmidi2_MidiBase *__pyx_v_self, PyObject *__pyx_v_pattern) {
  PyObject *__pyx_v_fnmatch = NULL;
  PyObject *__pyx_v_ports = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_port = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ports_matching", 0);

  /* "rtmidi2.pyx":88
 *         """
 * 
 *         import fnmatch             # <<<<<<<<<<<<<<
 *         ports = self.ports
 *         return [i for i, port in enumerate(ports) if fnmatch.fnmatch(port, pattern)]
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__fnmatch), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fnmatch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rtmidi2.pyx":89
 * 
 *         import fnmatch
 *         ports = self.ports             # <<<<<<<<<<<<<<
 *         return [i for i, port in enumerate(ports) if fnmatch.fnmatch(port, pattern)]
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__ports); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ports = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rtmidi2.pyx":90
 *         import fnmatch
 *         ports = self.ports
 *         return [i for i, port in enumerate(ports) if fnmatch.fnmatch(port, pattern)]             # <<<<<<<<<<<<<<
 * 
 * cdef void midi_in_callback(double time_stamp, vector[unsigned char]* message_vector, void* py_callback) with gil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_ports) || PyTuple_CheckExact(__pyx_v_ports)) {
    __pyx_t_3 = __pyx_v_ports; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_ports); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF(__pyx_v_port);
    __pyx_v_port = __pyx_t_6;
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_2;
    __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_fnmatch, __pyx_n_s__fnmatch); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_port);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_port);
    __Pyx_GIVEREF(__pyx_v_port);
    __Pyx_INCREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    __pyx_t_8 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_9) {
      if (unlikely(__Pyx_PyList_Append(__pyx_t_1, (PyObject*)__pyx_v_i))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("rtmidi2.MidiBase.ports_matching", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fnmatch);
  __Pyx_XDECREF(__pyx_v_ports);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_port);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":92
 *         return [i for i, port in enumerate(ports) if fnmatch.fnmatch(port, pattern)]
 * 
 * cdef void midi_in_callback(double time_stamp, vector[unsigned char]* message_vector, void* py_callback) with gil:             # <<<<<<<<<<<<<<
 *     message = [message_vector.at(i) for i in range(message_vector.size())]
 *     (<object>py_callback)(message, time_stamp)
 */

static void __pyx_f_7rtmidi2_midi_in_callback(double __pyx_v_time_stamp, std::vector<unsigned char> *__pyx_v_message_vector, void *__pyx_v_py_callback) {
  PyObject *__pyx_v_message = NULL;
  size_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("midi_in_callback", 0);

  /* "rtmidi2.pyx":93
 * 
 * cdef void midi_in_callback(double time_stamp, vector[unsigned char]* message_vector, void* py_callback) with gil:
 *     message = [message_vector.at(i) for i in range(message_vector.size())]             # <<<<<<<<<<<<<<
 *     (<object>py_callback)(message, time_stamp)
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_message_vector->size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyInt_FromLong(__pyx_v_message_vector->at(__pyx_v_i)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_v_message = __pyx_t_1;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "rtmidi2.pyx":94
 * cdef void midi_in_callback(double time_stamp, vector[unsigned char]* message_vector, void* py_callback) with gil:
 *     message = [message_vector.at(i) for i in range(message_vector.size())]
 *     (<object>py_callback)(message, time_stamp)             # <<<<<<<<<<<<<<
 * 
 * cdef class MidiIn(MidiBase):
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_time_stamp); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_message));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_message));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_message));
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)__pyx_v_py_callback), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("rtmidi2.midi_in_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_message);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* Python wrapper */
static int __pyx_pw_7rtmidi2_6MidiIn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rtmidi2_6MidiIn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_clientname = 0;
  PyObject *__pyx_v_queuesize = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__clientname,&__pyx_n_s__queuesize,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_kp_s_5);
    values[1] = ((PyObject *)__pyx_int_100);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__clientname);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__queuesize);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_clientname = values[0];
    __pyx_v_queuesize = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiIn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_6MidiIn___cinit__(((struct __pyx_obj_7rtmidi2_MidiIn *)__pyx_v_self), __pyx_v_clientname, __pyx_v_queuesize);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":99
 *     cdef RtMidiIn* thisptr
 *     cdef object py_callback
 *     def __cinit__(self, clientname="RTMIDI-IN", queuesize=100):             # <<<<<<<<<<<<<<
 *         self.thisptr = new RtMidiIn(string(<char*>clientname), queuesize)
 *         self.py_callback = None
 */

static int __pyx_pf_7rtmidi2_6MidiIn___cinit__(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self, PyObject *__pyx_v_clientname, PyObject *__pyx_v_queuesize) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  std::string __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rtmidi2.pyx":100
 *     cdef object py_callback
 *     def __cinit__(self, clientname="RTMIDI-IN", queuesize=100):
 *         self.thisptr = new RtMidiIn(string(<char*>clientname), queuesize)             # <<<<<<<<<<<<<<
 *         self.py_callback = None
 *     def __init__(self, clientname="RTMIDI-IN", queuesize=100):
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_clientname); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {__pyx_t_2 = std::string(((char *)__pyx_t_1));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_queuesize); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr = new RtMidiIn(__pyx_t_2, __pyx_t_3);

  /* "rtmidi2.pyx":101
 *     def __cinit__(self, clientname="RTMIDI-IN", queuesize=100):
 *         self.thisptr = new RtMidiIn(string(<char*>clientname), queuesize)
 *         self.py_callback = None             # <<<<<<<<<<<<<<
 *     def __init__(self, clientname="RTMIDI-IN", queuesize=100):
 *         """
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->py_callback);
  __Pyx_DECREF(__pyx_v_self->py_callback);
  __pyx_v_self->py_callback = Py_None;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rtmidi2.MidiIn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7rtmidi2_6MidiIn_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_6MidiIn_2__init__[] = "\n        It is not necessary to give the client a name.\n        queuesize: the size of the queue in bytes.\n\n        Example\n        -------\n\n        m_in = MidiIn()\n        m_in.open_port()    # will get messages from the default port\n\n        def callback(msg, timestamp):\n            msgtype, channel = splitchannel(msg[0])\n            if msgtype == NOTEON:\n                print \"noteon\", msg[1], msg[2]\n            elif msgtype == CC:\n                print \"control change\", msg[1], msg[2]\n\n        m_in.callback = callback\n\n        # You can cancel the receiving of messages by setting the callback to None\n        m_in.callback = None\n\n        # When you are done, close the port\n        m_in.close_port()\n\n        NB: If you want to listen from multiple ports, use MidiInMulti\n\n        For blocking interface, use midiin.get_message()\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7rtmidi2_6MidiIn_2__init__;
#endif
static int __pyx_pw_7rtmidi2_6MidiIn_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_clientname = 0;
  CYTHON_UNUSED PyObject *__pyx_v_queuesize = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__clientname,&__pyx_n_s__queuesize,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_kp_s_5);
    values[1] = ((PyObject *)__pyx_int_100);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__clientname);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__queuesize);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_clientname = values[0];
    __pyx_v_queuesize = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiIn.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_6MidiIn_2__init__(((struct __pyx_obj_7rtmidi2_MidiIn *)__pyx_v_self), __pyx_v_clientname, __pyx_v_queuesize);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":102
 *         self.thisptr = new RtMidiIn(string(<char*>clientname), queuesize)
 *         self.py_callback = None
 *     def __init__(self, clientname="RTMIDI-IN", queuesize=100):             # <<<<<<<<<<<<<<
 *         """
 *         It is not necessary to give the client a name.
 */

static int __pyx_pf_7rtmidi2_6MidiIn_2__init__(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_clientname, CYTHON_UNUSED PyObject *__pyx_v_queuesize) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_7rtmidi2_6MidiIn_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rtmidi2_6MidiIn_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7rtmidi2_6MidiIn_4__dealloc__(((struct __pyx_obj_7rtmidi2_MidiIn *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "rtmidi2.pyx":134
 *         # this declaration is here so that the docstring gets generated
 *         pass
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.py_callback = None
 *         del self.thisptr
 */

static void __pyx_pf_7rtmidi2_6MidiIn_4__dealloc__(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rtmidi2.pyx":135
 *         pass
 *     def __dealloc__(self):
 *         self.py_callback = None             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *     cdef RtMidi* baseptr(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->py_callback);
  __Pyx_DECREF(__pyx_v_self->py_callback);
  __pyx_v_self->py_callback = Py_None;

  /* "rtmidi2.pyx":136
 *     def __dealloc__(self):
 *         self.py_callback = None
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *     cdef RtMidi* baseptr(self):
 *         return self.thisptr
 */
  delete __pyx_v_self->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* "rtmidi2.pyx":137
 *         self.py_callback = None
 *         del self.thisptr
 *     cdef RtMidi* baseptr(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr
 *     property callback:
 */

static RtMidi *__pyx_f_7rtmidi2_6MidiIn_baseptr(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self) {
  RtMidi *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("baseptr", 0);

  /* "rtmidi2.pyx":138
 *         del self.thisptr
 *     cdef RtMidi* baseptr(self):
 *         return self.thisptr             # <<<<<<<<<<<<<<
 *     property callback:
 *         def __get__(self):
 */
  __pyx_r = __pyx_v_self->thisptr;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_6MidiIn_8callback_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rtmidi2_6MidiIn_8callback_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_6MidiIn_8callback___get__(((struct __pyx_obj_7rtmidi2_MidiIn *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":140
 *         return self.thisptr
 *     property callback:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_callback
 *         def __set__(self, callback):
 */

static PyObject *__pyx_pf_7rtmidi2_6MidiIn_8callback___get__(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rtmidi2.pyx":141
 *     property callback:
 *         def __get__(self):
 *             return self.py_callback             # <<<<<<<<<<<<<<
 *         def __set__(self, callback):
 *             self.thisptr.cancelCallback()  # cancel previous callback, if any
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->py_callback);
  __pyx_r = __pyx_v_self->py_callback;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7rtmidi2_6MidiIn_8callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_callback); /*proto*/
static int __pyx_pw_7rtmidi2_6MidiIn_8callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_callback) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_6MidiIn_8callback_2__set__(((struct __pyx_obj_7rtmidi2_MidiIn *)__pyx_v_self), ((PyObject *)__pyx_v_callback));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":142
 *         def __get__(self):
 *             return self.py_callback
 *         def __set__(self, callback):             # <<<<<<<<<<<<<<
 *             self.thisptr.cancelCallback()  # cancel previous callback, if any
 *             self.py_callback = callback
 */

static int __pyx_pf_7rtmidi2_6MidiIn_8callback_2__set__(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self, PyObject *__pyx_v_callback) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rtmidi2.pyx":143
 *             return self.py_callback
 *         def __set__(self, callback):
 *             self.thisptr.cancelCallback()  # cancel previous callback, if any             # <<<<<<<<<<<<<<
 *             self.py_callback = callback
 *             if self.py_callback is not None:
 */
  __pyx_v_self->thisptr->cancelCallback();

  /* "rtmidi2.pyx":144
 *         def __set__(self, callback):
 *             self.thisptr.cancelCallback()  # cancel previous callback, if any
 *             self.py_callback = callback             # <<<<<<<<<<<<<<
 *             if self.py_callback is not None:
 *                 self.thisptr.setCallback(midi_in_callback, <void*>self.py_callback)
 */
  __Pyx_INCREF(__pyx_v_callback);
  __Pyx_GIVEREF(__pyx_v_callback);
  __Pyx_GOTREF(__pyx_v_self->py_callback);
  __Pyx_DECREF(__pyx_v_self->py_callback);
  __pyx_v_self->py_callback = __pyx_v_callback;

  /* "rtmidi2.pyx":145
 *             self.thisptr.cancelCallback()  # cancel previous callback, if any
 *             self.py_callback = callback
 *             if self.py_callback is not None:             # <<<<<<<<<<<<<<
 *                 self.thisptr.setCallback(midi_in_callback, <void*>self.py_callback)
 *     def ignore_types(self, midi_sysex=True, midi_time=True, midi_sense=True):
 */
  __pyx_t_1 = (__pyx_v_self->py_callback != Py_None);
  if (__pyx_t_1) {

    /* "rtmidi2.pyx":146
 *             self.py_callback = callback
 *             if self.py_callback is not None:
 *                 self.thisptr.setCallback(midi_in_callback, <void*>self.py_callback)             # <<<<<<<<<<<<<<
 *     def ignore_types(self, midi_sysex=True, midi_time=True, midi_sense=True):
 *         self.thisptr.ignoreTypes(midi_sysex, midi_time, midi_sense)
 */
    __pyx_v_self->thisptr->setCallback(__pyx_f_7rtmidi2_midi_in_callback, ((void *)__pyx_v_self->py_callback));
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_6MidiIn_7ignore_types(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_6MidiIn_6ignore_types[] = "MidiIn.ignore_types(self, midi_sysex=True, midi_time=True, midi_sense=True)";
static PyObject *__pyx_pw_7rtmidi2_6MidiIn_7ignore_types(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_midi_sysex = 0;
  PyObject *__pyx_v_midi_time = 0;
  PyObject *__pyx_v_midi_sense = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ignore_types (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__midi_sysex,&__pyx_n_s__midi_time,&__pyx_n_s__midi_sense,0};
    PyObject* values[3] = {0,0,0};
    values[0] = __pyx_k_6;
    values[1] = __pyx_k_7;
    values[2] = __pyx_k_8;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__midi_sysex);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__midi_time);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__midi_sense);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ignore_types") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_midi_sysex = values[0];
    __pyx_v_midi_time = values[1];
    __pyx_v_midi_sense = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ignore_types", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiIn.ignore_types", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_6MidiIn_6ignore_types(((struct __pyx_obj_7rtmidi2_MidiIn *)__pyx_v_self), __pyx_v_midi_sysex, __pyx_v_midi_time, __pyx_v_midi_sense);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":147
 *             if self.py_callback is not None:
 *                 self.thisptr.setCallback(midi_in_callback, <void*>self.py_callback)
 *     def ignore_types(self, midi_sysex=True, midi_time=True, midi_sense=True):             # <<<<<<<<<<<<<<
 *         self.thisptr.ignoreTypes(midi_sysex, midi_time, midi_sense)
 *     def get_message(self, int gettime=1):
 */

static PyObject *__pyx_pf_7rtmidi2_6MidiIn_6ignore_types(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self, PyObject *__pyx_v_midi_sysex, PyObject *__pyx_v_midi_time, PyObject *__pyx_v_midi_sense) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ignore_types", 0);

  /* "rtmidi2.pyx":148
 *                 self.thisptr.setCallback(midi_in_callback, <void*>self.py_callback)
 *     def ignore_types(self, midi_sysex=True, midi_time=True, midi_sense=True):
 *         self.thisptr.ignoreTypes(midi_sysex, midi_time, midi_sense)             # <<<<<<<<<<<<<<
 *     def get_message(self, int gettime=1):
 *         """
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_midi_sysex); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_midi_time); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_midi_sense); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->ignoreTypes(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rtmidi2.MidiIn.ignore_types", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_6MidiIn_9get_message(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_6MidiIn_8get_message[] = "MidiIn.get_message(self, int gettime=1)\n\n        Blocking interface. For non-blocking interface, use the callback method (midiin.callback = ...)\n\n        if gettime == 1:\n            returns (message, delta_time) \n        otherwise returns only message\n\n        where message is [(messagetype | channel), value1, value2]\n\n        To isolate messagetype and channel, do this:\n\n        messagetype = message[0] & 0xF0\n        channel     = message[0] & 0x0F\n\n        or use the utility function splitchannel:\n\n        msgtype, channel = splitchannel(message[0])\n        ";
static PyObject *__pyx_pw_7rtmidi2_6MidiIn_9get_message(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_gettime;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_message (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__gettime,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__gettime);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_message") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_gettime = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_gettime == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_gettime = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_message", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiIn.get_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_6MidiIn_8get_message(((struct __pyx_obj_7rtmidi2_MidiIn *)__pyx_v_self), __pyx_v_gettime);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":149
 *     def ignore_types(self, midi_sysex=True, midi_time=True, midi_sense=True):
 *         self.thisptr.ignoreTypes(midi_sysex, midi_time, midi_sense)
 *     def get_message(self, int gettime=1):             # <<<<<<<<<<<<<<
 *         """
 *         Blocking interface. For non-blocking interface, use the callback method (midiin.callback = ...)
 */

static PyObject *__pyx_pf_7rtmidi2_6MidiIn_8get_message(struct __pyx_obj_7rtmidi2_MidiIn *__pyx_v_self, int __pyx_v_gettime) {
  std::vector<unsigned char> *__pyx_v_message_vector;
  double __pyx_v_delta_time;
  PyObject *__pyx_v_message = 0;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned char> *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_message", 0);

  /* "rtmidi2.pyx":168
 *         msgtype, channel = splitchannel(message[0])
 *         """
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()             # <<<<<<<<<<<<<<
 *         delta_time = self.thisptr.getMessage(message_vector)
 *         cdef list message
 */
  try {__pyx_t_1 = new std::vector<unsigned char>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_message_vector = __pyx_t_1;

  /* "rtmidi2.pyx":169
 *         """
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()
 *         delta_time = self.thisptr.getMessage(message_vector)             # <<<<<<<<<<<<<<
 *         cdef list message
 *         if not message_vector.empty():
 */
  __pyx_v_delta_time = __pyx_v_self->thisptr->getMessage(__pyx_v_message_vector);

  /* "rtmidi2.pyx":171
 *         delta_time = self.thisptr.getMessage(message_vector)
 *         cdef list message
 *         if not message_vector.empty():             # <<<<<<<<<<<<<<
 *             message = [message_vector.at(i) for i in range(message_vector.size())]
 *             return (message, delta_time) if gettime == 1 else message
 */
  __pyx_t_2 = (!__pyx_v_message_vector->empty());
  if (__pyx_t_2) {

    /* "rtmidi2.pyx":172
 *         cdef list message
 *         if not message_vector.empty():
 *             message = [message_vector.at(i) for i in range(message_vector.size())]             # <<<<<<<<<<<<<<
 *             return (message, delta_time) if gettime == 1 else message
 *         else:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_v_message_vector->size();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;
      __pyx_t_6 = PyInt_FromLong(__pyx_v_message_vector->at(__pyx_v_i)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_PyList_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_INCREF(((PyObject *)__pyx_t_3));
    __pyx_v_message = __pyx_t_3;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

    /* "rtmidi2.pyx":173
 *         if not message_vector.empty():
 *             message = [message_vector.at(i) for i in range(message_vector.size())]
 *             return (message, delta_time) if gettime == 1 else message             # <<<<<<<<<<<<<<
 *         else:
 *             return (None, None) if gettime == 1 else None
 */
    __Pyx_XDECREF(__pyx_r);
    if ((__pyx_v_gettime == 1)) {
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_delta_time); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(((PyObject *)__pyx_v_message));
      PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_message));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_message));
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_3 = ((PyObject *)__pyx_t_7);
      __pyx_t_7 = 0;
    } else {
      __Pyx_INCREF(((PyObject *)__pyx_v_message));
      __pyx_t_3 = ((PyObject *)__pyx_v_message);
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "rtmidi2.pyx":175
 *             return (message, delta_time) if gettime == 1 else message
 *         else:
 *             return (None, None) if gettime == 1 else None             # <<<<<<<<<<<<<<
 * 
 * cdef class MidiInMulti:
 */
    __Pyx_XDECREF(__pyx_r);
    if ((__pyx_v_gettime == 1)) {
      __Pyx_INCREF(((PyObject *)__pyx_k_tuple_9));
      __pyx_t_3 = ((PyObject *)__pyx_k_tuple_9);
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rtmidi2.MidiIn.get_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_message);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7rtmidi2_11MidiInMulti_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rtmidi2_11MidiInMulti_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_clientname = 0;
  PyObject *__pyx_v_queuesize = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__clientname,&__pyx_n_s__queuesize,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_kp_s_5);
    values[1] = ((PyObject *)__pyx_int_100);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__clientname);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__queuesize);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_clientname = values[0];
    __pyx_v_queuesize = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti___cinit__(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self), __pyx_v_clientname, __pyx_v_queuesize);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":185
 *     cdef list openports
 *     cdef dict hascallback
 *     def __cinit__(self, clientname="RTMIDI-IN", queuesize=100):             # <<<<<<<<<<<<<<
 *         self.inspector = new RtMidiIn(string(<char*>"RTMIDI-INSPECTOR"), queuesize)
 *         self.ptrs = new vector[RtMidiIn *]()
 */

static int __pyx_pf_7rtmidi2_11MidiInMulti___cinit__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_clientname, PyObject *__pyx_v_queuesize) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  unsigned int __pyx_t_2;
  std::vector<RtMidiIn *> *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rtmidi2.pyx":186
 *     cdef dict hascallback
 *     def __cinit__(self, clientname="RTMIDI-IN", queuesize=100):
 *         self.inspector = new RtMidiIn(string(<char*>"RTMIDI-INSPECTOR"), queuesize)             # <<<<<<<<<<<<<<
 *         self.ptrs = new vector[RtMidiIn *]()
 *         self.py_callback = None
 */
  try {__pyx_t_1 = std::string(((char *)__pyx_k_10));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_queuesize); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->inspector = new RtMidiIn(__pyx_t_1, __pyx_t_2);

  /* "rtmidi2.pyx":187
 *     def __cinit__(self, clientname="RTMIDI-IN", queuesize=100):
 *         self.inspector = new RtMidiIn(string(<char*>"RTMIDI-INSPECTOR"), queuesize)
 *         self.ptrs = new vector[RtMidiIn *]()             # <<<<<<<<<<<<<<
 *         self.py_callback = None
 *     def __init__ (self, clientname="RTMIDI-IN", queuesize=100):
 */
  try {__pyx_t_3 = new std::vector<RtMidiIn *>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_self->ptrs = __pyx_t_3;

  /* "rtmidi2.pyx":188
 *         self.inspector = new RtMidiIn(string(<char*>"RTMIDI-INSPECTOR"), queuesize)
 *         self.ptrs = new vector[RtMidiIn *]()
 *         self.py_callback = None             # <<<<<<<<<<<<<<
 *     def __init__ (self, clientname="RTMIDI-IN", queuesize=100):
 *         """
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->py_callback);
  __Pyx_DECREF(__pyx_v_self->py_callback);
  __pyx_v_self->py_callback = Py_None;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7rtmidi2_11MidiInMulti_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_11MidiInMulti_2__init__[] = "\n        This class implements the capability to listen to multiple inputs at once\n        A callback needs to be defined, as in MidiIn, which will be called if any\n        of the devices receives any input. \n\n        NB: you will not be able to see from which device the input came\n\n        Example\n        -------\n\n        multi = MidiInMulti().open_ports(\"*\")\n        def callback(msg, timestamp):\n            print msg\n        multi.callback = callback\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7rtmidi2_11MidiInMulti_2__init__;
#endif
static int __pyx_pw_7rtmidi2_11MidiInMulti_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_clientname = 0;
  PyObject *__pyx_v_queuesize = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__clientname,&__pyx_n_s__queuesize,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_kp_s_5);
    values[1] = ((PyObject *)__pyx_int_100);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__clientname);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__queuesize);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_clientname = values[0];
    __pyx_v_queuesize = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_2__init__(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self), __pyx_v_clientname, __pyx_v_queuesize);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":189
 *         self.ptrs = new vector[RtMidiIn *]()
 *         self.py_callback = None
 *     def __init__ (self, clientname="RTMIDI-IN", queuesize=100):             # <<<<<<<<<<<<<<
 *         """
 *         This class implements the capability to listen to multiple inputs at once
 */

static int __pyx_pf_7rtmidi2_11MidiInMulti_2__init__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, PyObject *__pyx_v_clientname, PyObject *__pyx_v_queuesize) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rtmidi2.pyx":205
 *         multi.callback = callback
 *         """
 *         self.queuesize = queuesize             # <<<<<<<<<<<<<<
 *         self.clientname = clientname
 *         self.openports = []
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_queuesize); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->queuesize = __pyx_t_1;

  /* "rtmidi2.pyx":206
 *         """
 *         self.queuesize = queuesize
 *         self.clientname = clientname             # <<<<<<<<<<<<<<
 *         self.openports = []
 *         self.hascallback = {}
 */
  __Pyx_INCREF(__pyx_v_clientname);
  __Pyx_GIVEREF(__pyx_v_clientname);
  __Pyx_GOTREF(__pyx_v_self->clientname);
  __Pyx_DECREF(__pyx_v_self->clientname);
  __pyx_v_self->clientname = __pyx_v_clientname;

  /* "rtmidi2.pyx":207
 *         self.queuesize = queuesize
 *         self.clientname = clientname
 *         self.openports = []             # <<<<<<<<<<<<<<
 *         self.hascallback = {}
 *     def __dealloc__(self):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_GOTREF(__pyx_v_self->openports);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->openports));
  __pyx_v_self->openports = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "rtmidi2.pyx":208
 *         self.clientname = clientname
 *         self.openports = []
 *         self.hascallback = {}             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         self.close_ports()
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_GOTREF(__pyx_v_self->hascallback);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hascallback));
  __pyx_v_self->hascallback = __pyx_t_2;
  __pyx_t_2 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_7rtmidi2_11MidiInMulti_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rtmidi2_11MidiInMulti_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7rtmidi2_11MidiInMulti_4__dealloc__(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "rtmidi2.pyx":209
 *         self.openports = []
 *         self.hascallback = {}
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.close_ports()
 *         self.inspector.closePort()
 */

static void __pyx_pf_7rtmidi2_11MidiInMulti_4__dealloc__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rtmidi2.pyx":210
 *         self.hascallback = {}
 *     def __dealloc__(self):
 *         self.close_ports()             # <<<<<<<<<<<<<<
 *         self.inspector.closePort()
 *         del self.ptrs
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiInMulti *)__pyx_v_self->__pyx_vtab)->close_ports(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rtmidi2.pyx":211
 *     def __dealloc__(self):
 *         self.close_ports()
 *         self.inspector.closePort()             # <<<<<<<<<<<<<<
 *         del self.ptrs
 *         del self.inspector
 */
  __pyx_v_self->inspector->closePort();

  /* "rtmidi2.pyx":212
 *         self.close_ports()
 *         self.inspector.closePort()
 *         del self.ptrs             # <<<<<<<<<<<<<<
 *         del self.inspector
 *     def __repr__(self):
 */
  delete __pyx_v_self->ptrs;

  /* "rtmidi2.pyx":213
 *         self.inspector.closePort()
 *         del self.ptrs
 *         del self.inspector             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         allports = self.ports
 */
  delete __pyx_v_self->inspector;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_7__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_7__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_6__repr__(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7rtmidi2_11MidiInMulti_8__repr___2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "rtmidi2.pyx":216
 *     def __repr__(self):
 *         allports = self.ports
 *         s = " + ".join(allports[port] for port in self.openports)             # <<<<<<<<<<<<<<
 *         return "MidiInMulti ( %s )" % s
 *     property ports:
 */

static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_8__repr___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *)__pyx_ptype_7rtmidi2___pyx_scope_struct_1_genexpr->tp_new(__pyx_ptype_7rtmidi2___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_7rtmidi2_11MidiInMulti_8__repr___2generator, (PyObject *) __pyx_cur_scope); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.__repr__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7rtmidi2_11MidiInMulti_8__repr___2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->openports) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->openports); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_port);
    __Pyx_XDECREF(__pyx_cur_scope->__pyx_v_port);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_port = __pyx_t_3;
    __pyx_t_3 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_allports)) { __Pyx_RaiseClosureNameError("allports"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_3 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_allports, __pyx_cur_scope->__pyx_v_port); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "rtmidi2.pyx":214
 *         del self.ptrs
 *         del self.inspector
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         allports = self.ports
 *         s = " + ".join(allports[port] for port in self.openports)
 */

static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_6__repr__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self) {
  struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *__pyx_cur_scope;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __pyx_cur_scope = (struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *)__pyx_ptype_7rtmidi2___pyx_scope_struct____repr__->tp_new(__pyx_ptype_7rtmidi2___pyx_scope_struct____repr__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "rtmidi2.pyx":215
 *         del self.inspector
 *     def __repr__(self):
 *         allports = self.ports             # <<<<<<<<<<<<<<
 *         s = " + ".join(allports[port] for port in self.openports)
 *         return "MidiInMulti ( %s )" % s
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s__ports); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_allports = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rtmidi2.pyx":216
 *     def __repr__(self):
 *         allports = self.ports
 *         s = " + ".join(allports[port] for port in self.openports)             # <<<<<<<<<<<<<<
 *         return "MidiInMulti ( %s )" % s
 *     property ports:
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_11), __pyx_n_s__join); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_pf_7rtmidi2_11MidiInMulti_8__repr___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_s = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "rtmidi2.pyx":217
 *         allports = self.ports
 *         s = " + ".join(allports[port] for port in self.openports)
 *         return "MidiInMulti ( %s )" % s             # <<<<<<<<<<<<<<
 *     property ports:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_12), __pyx_v_s); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_5ports_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_5ports_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_5ports___get__(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":219
 *         return "MidiInMulti ( %s )" % s
 *     property ports:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return [self.inspector.getPortName(i).c_str() for i in range(self.inspector.getPortCount())]
 *     def get_openports(self):
 */

static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_5ports___get__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self) {
  unsigned int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rtmidi2.pyx":220
 *     property ports:
 *         def __get__(self):
 *             return [self.inspector.getPortName(i).c_str() for i in range(self.inspector.getPortCount())]             # <<<<<<<<<<<<<<
 *     def get_openports(self):
 *         return self.openports
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_self->inspector->getPortCount();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyBytes_FromString(__pyx_v_self->inspector->getPortName(__pyx_v_i).c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    if (unlikely(__Pyx_PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  }
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.ports.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_9get_openports(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7rtmidi2_11MidiInMulti_8get_openports[] = "MidiInMulti.get_openports(self)";
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_9get_openports(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_openports (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_8get_openports(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":221
 *         def __get__(self):
 *             return [self.inspector.getPortName(i).c_str() for i in range(self.inspector.getPortCount())]
 *     def get_openports(self):             # <<<<<<<<<<<<<<
 *         return self.openports
 *     def ports_matching(self, pattern):
 */

static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_8get_openports(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_openports", 0);

  /* "rtmidi2.pyx":222
 *             return [self.inspector.getPortName(i).c_str() for i in range(self.inspector.getPortCount())]
 *     def get_openports(self):
 *         return self.openports             # <<<<<<<<<<<<<<
 *     def ports_matching(self, pattern):
 *         """
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->openports));
  __pyx_r = ((PyObject *)__pyx_v_self->openports);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_11ports_matching(PyObject *__pyx_v_self, PyObject *__pyx_v_pattern); /*proto*/
static char __pyx_doc_7rtmidi2_11MidiInMulti_10ports_matching[] = "MidiInMulti.ports_matching(self, pattern)\n\n        return the indexes of the ports which match the glob pattern\n\n        Example\n        -------\n\n        # get all ports\n        midiin.ports_matching(\"*\")\n\n        # open the IAC port in OSX without having to remember the whole name\n        midiin.open_port(midiin.ports_matching(\"IAC*\"))\n        ";
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_11ports_matching(PyObject *__pyx_v_self, PyObject *__pyx_v_pattern) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ports_matching (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_10ports_matching(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self), ((PyObject *)__pyx_v_pattern));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":223
 *     def get_openports(self):
 *         return self.openports
 *     def ports_matching(self, pattern):             # <<<<<<<<<<<<<<
 *         """
 *         return the indexes of the ports which match the glob pattern
 */

static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_10ports_matching(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, PyObject *__pyx_v_pattern) {
  PyObject *__pyx_v_fnmatch = NULL;
  PyObject *__pyx_v_ports = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_port = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ports_matching", 0);

  /* "rtmidi2.pyx":236
 *         midiin.open_port(midiin.ports_matching("IAC*"))
 *         """
 *         import fnmatch             # <<<<<<<<<<<<<<
 *         ports = self.ports
 *         return [i for i, port in enumerate(ports) if fnmatch.fnmatch(port, pattern)]
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__fnmatch), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fnmatch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rtmidi2.pyx":237
 *         """
 *         import fnmatch
 *         ports = self.ports             # <<<<<<<<<<<<<<
 *         return [i for i, port in enumerate(ports) if fnmatch.fnmatch(port, pattern)]
 *     cpdef open_port(self, int port):
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__ports); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ports = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rtmidi2.pyx":238
 *         import fnmatch
 *         ports = self.ports
 *         return [i for i, port in enumerate(ports) if fnmatch.fnmatch(port, pattern)]             # <<<<<<<<<<<<<<
 *     cpdef open_port(self, int port):
 *         assert port < self.inspector.getPortCount()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_ports) || PyTuple_CheckExact(__pyx_v_ports)) {
    __pyx_t_3 = __pyx_v_ports; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_ports); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF(__pyx_v_port);
    __pyx_v_port = __pyx_t_6;
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_2;
    __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_fnmatch, __pyx_n_s__fnmatch); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_port);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_port);
    __Pyx_GIVEREF(__pyx_v_port);
    __Pyx_INCREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    __pyx_t_8 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_9) {
      if (unlikely(__Pyx_PyList_Append(__pyx_t_1, (PyObject*)__pyx_v_i))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.ports_matching", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fnmatch);
  __Pyx_XDECREF(__pyx_v_ports);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_port);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":239
 *         ports = self.ports
 *         return [i for i, port in enumerate(ports) if fnmatch.fnmatch(port, pattern)]
 *     cpdef open_port(self, int port):             # <<<<<<<<<<<<<<
 *         assert port < self.inspector.getPortCount()
 *         if port in self.openports:
 */

static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_13open_port(PyObject *__pyx_v_self, PyObject *__pyx_arg_port); /*proto*/
static PyObject *__pyx_f_7rtmidi2_11MidiInMulti_open_port(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, int __pyx_v_port, int __pyx_skip_dispatch) {
  RtMidiIn *__pyx_v_newport;
  CYTHON_UNUSED const char *__pyx_v_portname;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char *__pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open_port", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__open_port); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_11MidiInMulti_13open_port)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_port); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":240
 *         return [i for i, port in enumerate(ports) if fnmatch.fnmatch(port, pattern)]
 *     cpdef open_port(self, int port):
 *         assert port < self.inspector.getPortCount()             # <<<<<<<<<<<<<<
 *         if port in self.openports:
 *             raise ValueError("Port already open!")
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(__pyx_v_port < __pyx_v_self->inspector->getPortCount()))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "rtmidi2.pyx":241
 *     cpdef open_port(self, int port):
 *         assert port < self.inspector.getPortCount()
 *         if port in self.openports:             # <<<<<<<<<<<<<<
 *             raise ValueError("Port already open!")
 *         cdef RtMidiIn* newport = new RtMidiIn(string(<char*>self.clientname), self.queuesize)
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_port); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PySequence_Contains(__pyx_t_1, ((PyObject *)__pyx_v_self->openports), Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "rtmidi2.pyx":242
 *         assert port < self.inspector.getPortCount()
 *         if port in self.openports:
 *             raise ValueError("Port already open!")             # <<<<<<<<<<<<<<
 *         cdef RtMidiIn* newport = new RtMidiIn(string(<char*>self.clientname), self.queuesize)
 *         portname = self.inspector.getPortName(port).c_str()
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "rtmidi2.pyx":243
 *         if port in self.openports:
 *             raise ValueError("Port already open!")
 *         cdef RtMidiIn* newport = new RtMidiIn(string(<char*>self.clientname), self.queuesize)             # <<<<<<<<<<<<<<
 *         portname = self.inspector.getPortName(port).c_str()
 *         newport.openPort(port)
 */
  __pyx_t_5 = PyBytes_AsString(__pyx_v_self->clientname); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {__pyx_t_6 = std::string(((char *)__pyx_t_5));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_newport = new RtMidiIn(__pyx_t_6, __pyx_v_self->queuesize);

  /* "rtmidi2.pyx":244
 *             raise ValueError("Port already open!")
 *         cdef RtMidiIn* newport = new RtMidiIn(string(<char*>self.clientname), self.queuesize)
 *         portname = self.inspector.getPortName(port).c_str()             # <<<<<<<<<<<<<<
 *         newport.openPort(port)
 *         self.ptrs.push_back(newport)
 */
  __pyx_v_portname = __pyx_v_self->inspector->getPortName(__pyx_v_port).c_str();

  /* "rtmidi2.pyx":245
 *         cdef RtMidiIn* newport = new RtMidiIn(string(<char*>self.clientname), self.queuesize)
 *         portname = self.inspector.getPortName(port).c_str()
 *         newport.openPort(port)             # <<<<<<<<<<<<<<
 *         self.ptrs.push_back(newport)
 *         self.openports.append(port)
 */
  __pyx_v_newport->openPort(__pyx_v_port);

  /* "rtmidi2.pyx":246
 *         portname = self.inspector.getPortName(port).c_str()
 *         newport.openPort(port)
 *         self.ptrs.push_back(newport)             # <<<<<<<<<<<<<<
 *         self.openports.append(port)
 *         return self
 */
  __pyx_v_self->ptrs->push_back(__pyx_v_newport);

  /* "rtmidi2.pyx":247
 *         newport.openPort(port)
 *         self.ptrs.push_back(newport)
 *         self.openports.append(port)             # <<<<<<<<<<<<<<
 *         return self
 *     cpdef open_ports(self, pattern="*"):
 */
  if (unlikely(((PyObject *)__pyx_v_self->openports) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = PyInt_FromLong(__pyx_v_port); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyList_Append(__pyx_v_self->openports, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rtmidi2.pyx":248
 *         self.ptrs.push_back(newport)
 *         self.openports.append(port)
 *         return self             # <<<<<<<<<<<<<<
 *     cpdef open_ports(self, pattern="*"):
 *         """
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.open_port", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_13open_port(PyObject *__pyx_v_self, PyObject *__pyx_arg_port); /*proto*/
static char __pyx_doc_7rtmidi2_11MidiInMulti_12open_port[] = "MidiInMulti.open_port(self, int port)";
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_13open_port(PyObject *__pyx_v_self, PyObject *__pyx_arg_port) {
  int __pyx_v_port;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_port (wrapper)", 0);
  assert(__pyx_arg_port); {
    __pyx_v_port = __Pyx_PyInt_AsInt(__pyx_arg_port); if (unlikely((__pyx_v_port == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.open_port", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_12open_port(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self), ((int)__pyx_v_port));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":239
 *         ports = self.ports
 *         return [i for i, port in enumerate(ports) if fnmatch.fnmatch(port, pattern)]
 *     cpdef open_port(self, int port):             # <<<<<<<<<<<<<<
 *         assert port < self.inspector.getPortCount()
 *         if port in self.openports:
 */

static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_12open_port(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, int __pyx_v_port) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open_port", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiInMulti *)__pyx_v_self->__pyx_vtab)->open_port(__pyx_v_self, __pyx_v_port, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.open_port", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":249
 *         self.openports.append(port)
 *         return self
 *     cpdef open_ports(self, pattern="*"):             # <<<<<<<<<<<<<<
 *         """
 *         a shortcut for opening many ports at once.
 */

static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_15open_ports(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_11MidiInMulti_open_ports(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_7rtmidi2_11MidiInMulti_open_ports *__pyx_optional_args) {
  PyObject *__pyx_v_pattern = ((PyObject *)__pyx_kp_s_15);
  PyObject *__pyx_v_matchingports = NULL;
  PyObject *__pyx_v_port = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open_ports", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_pattern = __pyx_optional_args->pattern;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__open_ports); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_11MidiInMulti_15open_ports)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_pattern);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_pattern);
      __Pyx_GIVEREF(__pyx_v_pattern);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":272
 * 
 *         """
 *         matchingports = self.ports_matching(pattern)             # <<<<<<<<<<<<<<
 *         for port in matchingports:
 *             self.open_port(port)
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__ports_matching); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_matchingports = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "rtmidi2.pyx":273
 *         """
 *         matchingports = self.ports_matching(pattern)
 *         for port in matchingports:             # <<<<<<<<<<<<<<
 *             self.open_port(port)
 *         return self
 */
  if (PyList_CheckExact(__pyx_v_matchingports) || PyTuple_CheckExact(__pyx_v_matchingports)) {
    __pyx_t_2 = __pyx_v_matchingports; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_matchingports); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF(__pyx_v_port);
    __pyx_v_port = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rtmidi2.pyx":274
 *         matchingports = self.ports_matching(pattern)
 *         for port in matchingports:
 *             self.open_port(port)             # <<<<<<<<<<<<<<
 *         return self
 *     cpdef close_ports(self):
 */
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_port); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_vtabstruct_7rtmidi2_MidiInMulti *)__pyx_v_self->__pyx_vtab)->open_port(__pyx_v_self, __pyx_t_6, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rtmidi2.pyx":275
 *         for port in matchingports:
 *             self.open_port(port)
 *         return self             # <<<<<<<<<<<<<<
 *     cpdef close_ports(self):
 *         """closes all ports and deactivates any callback.
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.open_ports", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_matchingports);
  __Pyx_XDECREF(__pyx_v_port);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_15open_ports(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_11MidiInMulti_14open_ports[] = "MidiInMulti.open_ports(self, pattern='*')\n\n        a shortcut for opening many ports at once.\n        This is similar to\n\n        for port in midiin.ports_matching(pattern):\n            midiin.open_port(port)\n\n        Example\n        -------\n\n        # Transpose all notes received one octave up, send them to OUT\n        midiin = MidiInMulti().open_ports(\"*\")\n        midiout = MidiOut().open_virtual_port(\"OUT\")\n        def callback(msg, timestamp):\n            msgtype, ch = splitchannel(msg[0])\n            if msgtype == NOTEON:\n                midiout.send_noteon(ch,  msg[1] + 12, msg[2])\n            elif msgtype == NOTEOFF:\n                midiout.send_noteoff(ch, msg[1] + 12, msg[2])\n        midiin.callback = callback\n\n        ";
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_15open_ports(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_ports (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pattern,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s_15);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pattern);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "open_ports") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("open_ports", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.open_ports", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_14open_ports(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self), __pyx_v_pattern);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":249
 *         self.openports.append(port)
 *         return self
 *     cpdef open_ports(self, pattern="*"):             # <<<<<<<<<<<<<<
 *         """
 *         a shortcut for opening many ports at once.
 */

static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_14open_ports(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, PyObject *__pyx_v_pattern) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7rtmidi2_11MidiInMulti_open_ports __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open_ports", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.pattern = __pyx_v_pattern;
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiInMulti *)__pyx_v_self->__pyx_vtab)->open_ports(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.open_ports", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":276
 *             self.open_port(port)
 *         return self
 *     cpdef close_ports(self):             # <<<<<<<<<<<<<<
 *         """closes all ports and deactivates any callback.
 *         NB: closing of individual ports is not implemented.
 */

static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_17close_ports(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7rtmidi2_11MidiInMulti_close_ports(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  RtMidiIn *__pyx_v_ptr;
  PyObject *__pyx_v_port = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close_ports", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__close_ports); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_11MidiInMulti_17close_ports)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":282
 *         cdef int i
 *         cdef RtMidiIn* ptr
 *         for i, port in enumerate(self.openports):             # <<<<<<<<<<<<<<
 *             ptr = self.ptrs.at(i)
 *             if self.hascallback[port]:
 */
  __pyx_t_3 = 0;
  __pyx_t_1 = ((PyObject *)__pyx_v_self->openports); __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF(__pyx_v_port);
    __pyx_v_port = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_i = __pyx_t_3;
    __pyx_t_3 = (__pyx_t_3 + 1);

    /* "rtmidi2.pyx":283
 *         cdef RtMidiIn* ptr
 *         for i, port in enumerate(self.openports):
 *             ptr = self.ptrs.at(i)             # <<<<<<<<<<<<<<
 *             if self.hascallback[port]:
 *                 ptr.cancelCallback()
 */
    __pyx_v_ptr = __pyx_v_self->ptrs->at(__pyx_v_i);

    /* "rtmidi2.pyx":284
 *         for i, port in enumerate(self.openports):
 *             ptr = self.ptrs.at(i)
 *             if self.hascallback[port]:             # <<<<<<<<<<<<<<
 *                 ptr.cancelCallback()
 *             ptr.closePort()
 */
    if (unlikely(((PyObject *)__pyx_v_self->hascallback) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(((PyObject *)__pyx_v_self->hascallback), __pyx_v_port); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "rtmidi2.pyx":285
 *             ptr = self.ptrs.at(i)
 *             if self.hascallback[port]:
 *                 ptr.cancelCallback()             # <<<<<<<<<<<<<<
 *             ptr.closePort()
 *         self.ptrs.clear()
 */
      __pyx_v_ptr->cancelCallback();
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "rtmidi2.pyx":286
 *             if self.hascallback[port]:
 *                 ptr.cancelCallback()
 *             ptr.closePort()             # <<<<<<<<<<<<<<
 *         self.ptrs.clear()
 *         self.openports = []
 */
    __pyx_v_ptr->closePort();
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rtmidi2.pyx":287
 *                 ptr.cancelCallback()
 *             ptr.closePort()
 *         self.ptrs.clear()             # <<<<<<<<<<<<<<
 *         self.openports = []
 *         self.hascallback = {}
 */
  __pyx_v_self->ptrs->clear();

  /* "rtmidi2.pyx":288
 *             ptr.closePort()
 *         self.ptrs.clear()
 *         self.openports = []             # <<<<<<<<<<<<<<
 *         self.hascallback = {}
 *         self.callback = None
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->openports);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->openports));
  __pyx_v_self->openports = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rtmidi2.pyx":289
 *         self.ptrs.clear()
 *         self.openports = []
 *         self.hascallback = {}             # <<<<<<<<<<<<<<
 *         self.callback = None
 *     property callback:
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->hascallback);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hascallback));
  __pyx_v_self->hascallback = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rtmidi2.pyx":290
 *         self.openports = []
 *         self.hascallback = {}
 *         self.callback = None             # <<<<<<<<<<<<<<
 *     property callback:
 *         def __get__(self):
 */
  if (PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__callback, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.close_ports", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_port);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_17close_ports(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7rtmidi2_11MidiInMulti_16close_ports[] = "MidiInMulti.close_ports(self)\ncloses all ports and deactivates any callback.\n        NB: closing of individual ports is not implemented.\n        ";
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_17close_ports(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close_ports (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_16close_ports(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":276
 *             self.open_port(port)
 *         return self
 *     cpdef close_ports(self):             # <<<<<<<<<<<<<<
 *         """closes all ports and deactivates any callback.
 *         NB: closing of individual ports is not implemented.
 */

static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_16close_ports(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close_ports", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiInMulti *)__pyx_v_self->__pyx_vtab)->close_ports(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.close_ports", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_8callback_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_8callback_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_8callback___get__(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":292
 *         self.callback = None
 *     property callback:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_callback
 *         def __set__(self, callback):
 */

static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_8callback___get__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rtmidi2.pyx":293
 *     property callback:
 *         def __get__(self):
 *             return self.py_callback             # <<<<<<<<<<<<<<
 *         def __set__(self, callback):
 *             cdef int i
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->py_callback);
  __pyx_r = __pyx_v_self->py_callback;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7rtmidi2_11MidiInMulti_8callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_callback); /*proto*/
static int __pyx_pw_7rtmidi2_11MidiInMulti_8callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_callback) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_8callback_2__set__(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self), ((PyObject *)__pyx_v_callback));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":294
 *         def __get__(self):
 *             return self.py_callback
 *         def __set__(self, callback):             # <<<<<<<<<<<<<<
 *             cdef int i
 *             cdef RtMidiIn* ptr
 */

static int __pyx_pf_7rtmidi2_11MidiInMulti_8callback_2__set__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, PyObject *__pyx_v_callback) {
  int __pyx_v_i;
  RtMidiIn *__pyx_v_ptr;
  PyObject *__pyx_v_port = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rtmidi2.pyx":297
 *             cdef int i
 *             cdef RtMidiIn* ptr
 *             self.py_callback = callback             # <<<<<<<<<<<<<<
 *             for i in range(self.ptrs.size()):
 *                 ptr = self.ptrs.at(i)
 */
  __Pyx_INCREF(__pyx_v_callback);
  __Pyx_GIVEREF(__pyx_v_callback);
  __Pyx_GOTREF(__pyx_v_self->py_callback);
  __Pyx_DECREF(__pyx_v_self->py_callback);
  __pyx_v_self->py_callback = __pyx_v_callback;

  /* "rtmidi2.pyx":298
 *             cdef RtMidiIn* ptr
 *             self.py_callback = callback
 *             for i in range(self.ptrs.size()):             # <<<<<<<<<<<<<<
 *                 ptr = self.ptrs.at(i)
 *                 port = self.openports[i]
 */
  __pyx_t_1 = __pyx_v_self->ptrs->size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "rtmidi2.pyx":299
 *             self.py_callback = callback
 *             for i in range(self.ptrs.size()):
 *                 ptr = self.ptrs.at(i)             # <<<<<<<<<<<<<<
 *                 port = self.openports[i]
 *                 if self.hascallback.get(port, False):
 */
    __pyx_v_ptr = __pyx_v_self->ptrs->at(__pyx_v_i);

    /* "rtmidi2.pyx":300
 *             for i in range(self.ptrs.size()):
 *                 ptr = self.ptrs.at(i)
 *                 port = self.openports[i]             # <<<<<<<<<<<<<<
 *                 if self.hascallback.get(port, False):
 *                     ptr.cancelCallback()
 */
    if (unlikely(((PyObject *)__pyx_v_self->openports) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(((PyObject *)__pyx_v_self->openports), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF(__pyx_v_port);
    __pyx_v_port = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rtmidi2.pyx":301
 *                 ptr = self.ptrs.at(i)
 *                 port = self.openports[i]
 *                 if self.hascallback.get(port, False):             # <<<<<<<<<<<<<<
 *                     ptr.cancelCallback()
 *                 if callback is not None:
 */
    if (unlikely(((PyObject *)__pyx_v_self->hascallback) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_self->hascallback), __pyx_v_port, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {

      /* "rtmidi2.pyx":302
 *                 port = self.openports[i]
 *                 if self.hascallback.get(port, False):
 *                     ptr.cancelCallback()             # <<<<<<<<<<<<<<
 *                 if callback is not None:
 *                     ptr.setCallback(midi_in_callback, <void*>callback)
 */
      __pyx_v_ptr->cancelCallback();
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "rtmidi2.pyx":303
 *                 if self.hascallback.get(port, False):
 *                     ptr.cancelCallback()
 *                 if callback is not None:             # <<<<<<<<<<<<<<
 *                     ptr.setCallback(midi_in_callback, <void*>callback)
 *                     self.hascallback[port] = True
 */
    __pyx_t_5 = (__pyx_v_callback != Py_None);
    if (__pyx_t_5) {

      /* "rtmidi2.pyx":304
 *                     ptr.cancelCallback()
 *                 if callback is not None:
 *                     ptr.setCallback(midi_in_callback, <void*>callback)             # <<<<<<<<<<<<<<
 *                     self.hascallback[port] = True
 *     def get_message(self, int gettime=1):
 */
      __pyx_v_ptr->setCallback(__pyx_f_7rtmidi2_midi_in_callback, ((void *)__pyx_v_callback));

      /* "rtmidi2.pyx":305
 *                 if callback is not None:
 *                     ptr.setCallback(midi_in_callback, <void*>callback)
 *                     self.hascallback[port] = True             # <<<<<<<<<<<<<<
 *     def get_message(self, int gettime=1):
 *         raise NotImplemented("The blocking interface is not implemented for multiple inputs. Use the callback system")
 */
      __pyx_t_4 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(((PyObject *)__pyx_v_self->hascallback) == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      if (PyDict_SetItem(((PyObject *)__pyx_v_self->hascallback), __pyx_v_port, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L6;
    }
    __pyx_L6:;
  }

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.callback.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_port);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_19get_message(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_11MidiInMulti_18get_message[] = "MidiInMulti.get_message(self, int gettime=1)";
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_19get_message(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED int __pyx_v_gettime;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_message (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__gettime,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__gettime);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_message") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_gettime = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_gettime == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_gettime = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_message", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.get_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_18get_message(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self), __pyx_v_gettime);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":306
 *                     ptr.setCallback(midi_in_callback, <void*>callback)
 *                     self.hascallback[port] = True
 *     def get_message(self, int gettime=1):             # <<<<<<<<<<<<<<
 *         raise NotImplemented("The blocking interface is not implemented for multiple inputs. Use the callback system")
 * 
 */

static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_18get_message(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self, CYTHON_UNUSED int __pyx_v_gettime) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_message", 0);

  /* "rtmidi2.pyx":307
 *                     self.hascallback[port] = True
 *     def get_message(self, int gettime=1):
 *         raise NotImplemented("The blocking interface is not implemented for multiple inputs. Use the callback system")             # <<<<<<<<<<<<<<
 * 
 * def splitchannel(int b):
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_NotImplemented, ((PyObject *)__pyx_k_tuple_17), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiInMulti.get_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_10clientname_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rtmidi2_11MidiInMulti_10clientname_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_11MidiInMulti_10clientname___get__(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":181
 *     cdef vector[RtMidiIn *]* ptrs
 *     cdef int queuesize
 *     cdef readonly object clientname             # <<<<<<<<<<<<<<
 *     cdef object py_callback
 *     cdef list openports
 */

static PyObject *__pyx_pf_7rtmidi2_11MidiInMulti_10clientname___get__(struct __pyx_obj_7rtmidi2_MidiInMulti *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->clientname);
  __pyx_r = __pyx_v_self->clientname;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_1splitchannel(PyObject *__pyx_self, PyObject *__pyx_arg_b); /*proto*/
static char __pyx_doc_7rtmidi2_splitchannel[] = "splitchannel(int b)\n\n    split the messagetype and the channel as returned by get_message\n\n    msg = midiin.get_message()\n    msgtype, channel = splitchannel(msg[0])\n    ";
static PyMethodDef __pyx_mdef_7rtmidi2_1splitchannel = {__Pyx_NAMESTR("splitchannel"), (PyCFunction)__pyx_pw_7rtmidi2_1splitchannel, METH_O, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_splitchannel)};
static PyObject *__pyx_pw_7rtmidi2_1splitchannel(PyObject *__pyx_self, PyObject *__pyx_arg_b) {
  int __pyx_v_b;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("splitchannel (wrapper)", 0);
  assert(__pyx_arg_b); {
    __pyx_v_b = __Pyx_PyInt_AsInt(__pyx_arg_b); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.splitchannel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_splitchannel(__pyx_self, ((int)__pyx_v_b));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":309
 *         raise NotImplemented("The blocking interface is not implemented for multiple inputs. Use the callback system")
 * 
 * def splitchannel(int b):             # <<<<<<<<<<<<<<
 *     """
 *     split the messagetype and the channel as returned by get_message
 */

static PyObject *__pyx_pf_7rtmidi2_splitchannel(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("splitchannel", 0);

  /* "rtmidi2.pyx":316
 *     msgtype, channel = splitchannel(msg[0])
 *     """
 *     return b & 0xF0, b & 0x0F             # <<<<<<<<<<<<<<
 * 
 * def msgtype2str(msgtype):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong((__pyx_v_b & 0xF0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong((__pyx_v_b & 0x0F)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rtmidi2.splitchannel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_3msgtype2str(PyObject *__pyx_self, PyObject *__pyx_v_msgtype); /*proto*/
static char __pyx_doc_7rtmidi2_2msgtype2str[] = "msgtype2str(msgtype)";
static PyMethodDef __pyx_mdef_7rtmidi2_3msgtype2str = {__Pyx_NAMESTR("msgtype2str"), (PyCFunction)__pyx_pw_7rtmidi2_3msgtype2str, METH_O, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_2msgtype2str)};
static PyObject *__pyx_pw_7rtmidi2_3msgtype2str(PyObject *__pyx_self, PyObject *__pyx_v_msgtype) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("msgtype2str (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_2msgtype2str(__pyx_self, ((PyObject *)__pyx_v_msgtype));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":318
 *     return b & 0xF0, b & 0x0F
 * 
 * def msgtype2str(msgtype):             # <<<<<<<<<<<<<<
 *     return {
 *         NOTEON:     'NOTEON',
 */

static PyObject *__pyx_pf_7rtmidi2_2msgtype2str(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_msgtype) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("msgtype2str", 0);

  /* "rtmidi2.pyx":319
 * 
 * def msgtype2str(msgtype):
 *     return {             # <<<<<<<<<<<<<<
 *         NOTEON:     'NOTEON',
 *         NOTEOFF:    'NOTEOFF',
 */
  __Pyx_XDECREF(__pyx_r);

  /* "rtmidi2.pyx":325
 *         PITCHWHEEL: 'PITCHWHEEL',
 *         PROGCHANGE: 'PROGCHANGE'
 *     }.get(msgtype, 'UNKNOWN')             # <<<<<<<<<<<<<<
 * 
 * _notenames = "C C# D D# E F F# G G# A Bb B C".split()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "rtmidi2.pyx":320
 * def msgtype2str(msgtype):
 *     return {
 *         NOTEON:     'NOTEON',             # <<<<<<<<<<<<<<
 *         NOTEOFF:    'NOTEOFF',
 *         CC:         'CC',
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTEON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, ((PyObject *)__pyx_n_s__NOTEON)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rtmidi2.pyx":321
 *     return {
 *         NOTEON:     'NOTEON',
 *         NOTEOFF:    'NOTEOFF',             # <<<<<<<<<<<<<<
 *         CC:         'CC',
 *         PITCHWHEEL: 'PITCHWHEEL',
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTEOFF); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, ((PyObject *)__pyx_n_s__NOTEOFF)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rtmidi2.pyx":322
 *         NOTEON:     'NOTEON',
 *         NOTEOFF:    'NOTEOFF',
 *         CC:         'CC',             # <<<<<<<<<<<<<<
 *         PITCHWHEEL: 'PITCHWHEEL',
 *         PROGCHANGE: 'PROGCHANGE'
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__CC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, ((PyObject *)__pyx_n_s__CC)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rtmidi2.pyx":323
 *         NOTEOFF:    'NOTEOFF',
 *         CC:         'CC',
 *         PITCHWHEEL: 'PITCHWHEEL',             # <<<<<<<<<<<<<<
 *         PROGCHANGE: 'PROGCHANGE'
 *     }.get(msgtype, 'UNKNOWN')
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PITCHWHEEL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, ((PyObject *)__pyx_n_s__PITCHWHEEL)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rtmidi2.pyx":324
 *         CC:         'CC',
 *         PITCHWHEEL: 'PITCHWHEEL',
 *         PROGCHANGE: 'PROGCHANGE'             # <<<<<<<<<<<<<<
 *     }.get(msgtype, 'UNKNOWN')
 * 
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PROGCHANGE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, ((PyObject *)__pyx_n_s__PROGCHANGE)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rtmidi2.pyx":325
 *         PITCHWHEEL: 'PITCHWHEEL',
 *         PROGCHANGE: 'PROGCHANGE'
 *     }.get(msgtype, 'UNKNOWN')             # <<<<<<<<<<<<<<
 * 
 * _notenames = "C C# D D# E F F# G G# A Bb B C".split()
 */
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_t_1), __pyx_v_msgtype, ((PyObject *)__pyx_n_s__UNKNOWN)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rtmidi2.msgtype2str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_5midi2note(PyObject *__pyx_self, PyObject *__pyx_v_midinote); /*proto*/
static char __pyx_doc_7rtmidi2_4midi2note[] = "midi2note(midinote)";
static PyMethodDef __pyx_mdef_7rtmidi2_5midi2note = {__Pyx_NAMESTR("midi2note"), (PyCFunction)__pyx_pw_7rtmidi2_5midi2note, METH_O, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_4midi2note)};
static PyObject *__pyx_pw_7rtmidi2_5midi2note(PyObject *__pyx_self, PyObject *__pyx_v_midinote) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("midi2note (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_4midi2note(__pyx_self, ((PyObject *)__pyx_v_midinote));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":329
 * _notenames = "C C# D D# E F F# G G# A Bb B C".split()
 * 
 * def midi2note(midinote):             # <<<<<<<<<<<<<<
 *     octave = int(midinote / 12) - 1
 *     pitchindex = midinote % 12
 */

static PyObject *__pyx_pf_7rtmidi2_4midi2note(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_midinote) {
  PyObject *__pyx_v_octave = NULL;
  PyObject *__pyx_v_pitchindex = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("midi2note", 0);

  /* "rtmidi2.pyx":330
 * 
 * def midi2note(midinote):
 *     octave = int(midinote / 12) - 1             # <<<<<<<<<<<<<<
 *     pitchindex = midinote % 12
 *     return "%s%d" % (_notenames[pitchindex], octave)
 */
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_midinote, __pyx_int_12); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_octave = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "rtmidi2.pyx":331
 * def midi2note(midinote):
 *     octave = int(midinote / 12) - 1
 *     pitchindex = midinote % 12             # <<<<<<<<<<<<<<
 *     return "%s%d" % (_notenames[pitchindex], octave)
 * 
 */
  __pyx_t_2 = PyNumber_Remainder(__pyx_v_midinote, __pyx_int_12); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_pitchindex = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "rtmidi2.pyx":332
 *     octave = int(midinote / 12) - 1
 *     pitchindex = midinote % 12
 *     return "%s%d" % (_notenames[pitchindex], octave)             # <<<<<<<<<<<<<<
 * 
 * def mididump_callback(src, msg, t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___notenames); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_v_pitchindex); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_octave);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_octave);
  __Pyx_GIVEREF(__pyx_v_octave);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_18), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rtmidi2.midi2note", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_octave);
  __Pyx_XDECREF(__pyx_v_pitchindex);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_7mididump_callback(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_6mididump_callback[] = "mididump_callback(src, msg, t)";
static PyMethodDef __pyx_mdef_7rtmidi2_7mididump_callback = {__Pyx_NAMESTR("mididump_callback"), (PyCFunction)__pyx_pw_7rtmidi2_7mididump_callback, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_6mididump_callback)};
static PyObject *__pyx_pw_7rtmidi2_7mididump_callback(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_src = 0;
  PyObject *__pyx_v_msg = 0;
  CYTHON_UNUSED PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mididump_callback (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__src,&__pyx_n_s__msg,&__pyx_n_s__t,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__src)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__msg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mididump_callback", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mididump_callback", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mididump_callback") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_src = values[0];
    __pyx_v_msg = values[1];
    __pyx_v_t = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mididump_callback", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.mididump_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_6mididump_callback(__pyx_self, __pyx_v_src, __pyx_v_msg, __pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":334
 *     return "%s%d" % (_notenames[pitchindex], octave)
 * 
 * def mididump_callback(src, msg, t):             # <<<<<<<<<<<<<<
 *     msgt, ch = splitchannel(msg[0])
 *     msgtstr = msgtype2str(msgt)
 */

static PyObject *__pyx_pf_7rtmidi2_6mididump_callback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_src, PyObject *__pyx_v_msg, CYTHON_UNUSED PyObject *__pyx_v_t) {
  PyObject *__pyx_v_msgt = NULL;
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_v_msgtstr = NULL;
  PyObject *__pyx_v_val1 = NULL;
  PyObject *__pyx_v_val2 = NULL;
  PyObject *__pyx_v_notename = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mididump_callback", 0);

  /* "rtmidi2.pyx":335
 * 
 * def mididump_callback(src, msg, t):
 *     msgt, ch = splitchannel(msg[0])             # <<<<<<<<<<<<<<
 *     msgtstr = msgtype2str(msgt)
 *     val1 = int(msg[1])
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__splitchannel); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_msg, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_msgt = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_ch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rtmidi2.pyx":336
 * def mididump_callback(src, msg, t):
 *     msgt, ch = splitchannel(msg[0])
 *     msgtstr = msgtype2str(msgt)             # <<<<<<<<<<<<<<
 *     val1 = int(msg[1])
 *     val2 = int(msg[2])
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__msgtype2str); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_msgt);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_msgt);
  __Pyx_GIVEREF(__pyx_v_msgt);
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_msgtstr = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rtmidi2.pyx":337
 *     msgt, ch = splitchannel(msg[0])
 *     msgtstr = msgtype2str(msgt)
 *     val1 = int(msg[1])             # <<<<<<<<<<<<<<
 *     val2 = int(msg[2])
 *     print src,
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_msg, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_val1 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rtmidi2.pyx":338
 *     msgtstr = msgtype2str(msgt)
 *     val1 = int(msg[1])
 *     val2 = int(msg[2])             # <<<<<<<<<<<<<<
 *     print src,
 *     if msgt == CC:
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_msg, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_val2 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rtmidi2.pyx":339
 *     val1 = int(msg[1])
 *     val2 = int(msg[2])
 *     print src,             # <<<<<<<<<<<<<<
 *     if msgt == CC:
 *         print "CC | ch %d | cc %d | val %d" % (ch, val1, val2)
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_src);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_src);
  __Pyx_GIVEREF(__pyx_v_src);
  if (__Pyx_Print(0, ((PyObject *)__pyx_t_3), 0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

  /* "rtmidi2.pyx":340
 *     val2 = int(msg[2])
 *     print src,
 *     if msgt == CC:             # <<<<<<<<<<<<<<
 *         print "CC | ch %d | cc %d | val %d" % (ch, val1, val2)
 *     elif msgt == NOTEON:
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__CC); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_msgt, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "rtmidi2.pyx":341
 *     print src,
 *     if msgt == CC:
 *         print "CC | ch %d | cc %d | val %d" % (ch, val1, val2)             # <<<<<<<<<<<<<<
 *     elif msgt == NOTEON:
 *         notename = midi2note(val1)
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_ch);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_ch);
    __Pyx_GIVEREF(__pyx_v_ch);
    __Pyx_INCREF(__pyx_v_val1);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_val1);
    __Pyx_GIVEREF(__pyx_v_val1);
    __Pyx_INCREF(__pyx_v_val2);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_val2);
    __Pyx_GIVEREF(__pyx_v_val2);
    __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_19), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_t_3)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    goto __pyx_L5;
  }

  /* "rtmidi2.pyx":342
 *     if msgt == CC:
 *         print "CC | ch %d | cc %d | val %d" % (ch, val1, val2)
 *     elif msgt == NOTEON:             # <<<<<<<<<<<<<<
 *         notename = midi2note(val1)
 *         print "NOTEON | ch %d | note %s (%d) |vel %d" % (ch, notename, val1, val2)
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTEON); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_msgt, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "rtmidi2.pyx":343
 *         print "CC | ch %d | cc %d | val %d" % (ch, val1, val2)
 *     elif msgt == NOTEON:
 *         notename = midi2note(val1)             # <<<<<<<<<<<<<<
 *         print "NOTEON | ch %d | note %s (%d) |vel %d" % (ch, notename, val1, val2)
 *     else:
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__midi2note); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_val1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_val1);
    __Pyx_GIVEREF(__pyx_v_val1);
    __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_v_notename = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "rtmidi2.pyx":344
 *     elif msgt == NOTEON:
 *         notename = midi2note(val1)
 *         print "NOTEON | ch %d | note %s (%d) |vel %d" % (ch, notename, val1, val2)             # <<<<<<<<<<<<<<
 *     else:
 *         print "%s | ch %d | val1 %d | val2 %d" % (msgtstr, ch, val1, val2)
 */
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_ch);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ch);
    __Pyx_GIVEREF(__pyx_v_ch);
    __Pyx_INCREF(__pyx_v_notename);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_notename);
    __Pyx_GIVEREF(__pyx_v_notename);
    __Pyx_INCREF(__pyx_v_val1);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_val1);
    __Pyx_GIVEREF(__pyx_v_val1);
    __Pyx_INCREF(__pyx_v_val2);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_val2);
    __Pyx_GIVEREF(__pyx_v_val2);
    __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_20), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_t_3)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "rtmidi2.pyx":346
 *         print "NOTEON | ch %d | note %s (%d) |vel %d" % (ch, notename, val1, val2)
 *     else:
 *         print "%s | ch %d | val1 %d | val2 %d" % (msgtstr, ch, val1, val2)             # <<<<<<<<<<<<<<
 * 
 * def mididump(port_pattern="*"):
 */
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_msgtstr);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_msgtstr);
    __Pyx_GIVEREF(__pyx_v_msgtstr);
    __Pyx_INCREF(__pyx_v_ch);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_ch);
    __Pyx_GIVEREF(__pyx_v_ch);
    __Pyx_INCREF(__pyx_v_val1);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_val1);
    __Pyx_GIVEREF(__pyx_v_val1);
    __Pyx_INCREF(__pyx_v_val2);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_val2);
    __Pyx_GIVEREF(__pyx_v_val2);
    __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_21), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rtmidi2.mididump_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msgt);
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XDECREF(__pyx_v_msgtstr);
  __Pyx_XDECREF(__pyx_v_val1);
  __Pyx_XDECREF(__pyx_v_val2);
  __Pyx_XDECREF(__pyx_v_notename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_9mididump(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_8mididump[] = "mididump(port_pattern='*')\n\n    listen to all ports matching pattern and print the incomming messages\n    ";
static PyMethodDef __pyx_mdef_7rtmidi2_9mididump = {__Pyx_NAMESTR("mididump"), (PyCFunction)__pyx_pw_7rtmidi2_9mididump, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_8mididump)};
static PyObject *__pyx_pw_7rtmidi2_9mididump(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_port_pattern = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mididump (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__port_pattern,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s_15);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__port_pattern);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mididump") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_port_pattern = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mididump", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.mididump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_8mididump(__pyx_self, __pyx_v_port_pattern);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":348
 *         print "%s | ch %d | val1 %d | val2 %d" % (msgtstr, ch, val1, val2)
 * 
 * def mididump(port_pattern="*"):             # <<<<<<<<<<<<<<
 *     """
 *     listen to all ports matching pattern and print the incomming messages
 */

static PyObject *__pyx_pf_7rtmidi2_8mididump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_port_pattern) {
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_7rtmidi2_11MidiInMulti_open_ports __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mididump", 0);

  /* "rtmidi2.pyx":352
 *     listen to all ports matching pattern and print the incomming messages
 *     """
 *     m = MidiInMulti().open_ports(port_pattern)             # <<<<<<<<<<<<<<
 *     m.set_callback(mididump_callback)
 *     return m
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7rtmidi2_MidiInMulti)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.pattern = __pyx_v_port_pattern;
  __pyx_t_2 = ((struct __pyx_vtabstruct_7rtmidi2_MidiInMulti *)((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_t_1)->__pyx_vtab)->open_ports(((struct __pyx_obj_7rtmidi2_MidiInMulti *)__pyx_t_1), 0, &__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_m = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "rtmidi2.pyx":353
 *     """
 *     m = MidiInMulti().open_ports(port_pattern)
 *     m.set_callback(mididump_callback)             # <<<<<<<<<<<<<<
 *     return m
 * 
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__set_callback); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__mididump_callback); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rtmidi2.pyx":354
 *     m = MidiInMulti().open_ports(port_pattern)
 *     m.set_callback(mididump_callback)
 *     return m             # <<<<<<<<<<<<<<
 * 
 * cdef class MidiOut_slower(MidiBase):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_m);
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rtmidi2.mididump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7rtmidi2_14MidiOut_slower_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rtmidi2_14MidiOut_slower_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7rtmidi2_14MidiOut_slower___cinit__(((struct __pyx_obj_7rtmidi2_MidiOut_slower *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":358
 * cdef class MidiOut_slower(MidiBase):
 *     cdef RtMidiOut* thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new RtMidiOut(string(<char*>"rtmidiout"))
 *     def __init__(self):
 */

static int __pyx_pf_7rtmidi2_14MidiOut_slower___cinit__(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rtmidi2.pyx":359
 *     cdef RtMidiOut* thisptr
 *     def __cinit__(self):
 *         self.thisptr = new RtMidiOut(string(<char*>"rtmidiout"))             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         pass
 */
  try {__pyx_t_1 = std::string(((char *)__pyx_k__rtmidiout));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_self->thisptr = new RtMidiOut(__pyx_t_1);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7rtmidi2_14MidiOut_slower_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rtmidi2_14MidiOut_slower_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7rtmidi2_14MidiOut_slower_2__init__(((struct __pyx_obj_7rtmidi2_MidiOut_slower *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":360
 *     def __cinit__(self):
 *         self.thisptr = new RtMidiOut(string(<char*>"rtmidiout"))
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 *     def __dealloc__(self):
 */

static int __pyx_pf_7rtmidi2_14MidiOut_slower_2__init__(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_7rtmidi2_14MidiOut_slower_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rtmidi2_14MidiOut_slower_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7rtmidi2_14MidiOut_slower_4__dealloc__(((struct __pyx_obj_7rtmidi2_MidiOut_slower *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "rtmidi2.pyx":362
 *     def __init__(self):
 *         pass
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *     cdef RtMidi* baseptr(self):
 */

static void __pyx_pf_7rtmidi2_14MidiOut_slower_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rtmidi2.pyx":363
 *         pass
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *     cdef RtMidi* baseptr(self):
 *         return self.thisptr
 */
  delete __pyx_v_self->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* "rtmidi2.pyx":364
 *     def __dealloc__(self):
 *         del self.thisptr
 *     cdef RtMidi* baseptr(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr
 *     cpdef send_message(self, message):
 */

static RtMidi *__pyx_f_7rtmidi2_14MidiOut_slower_baseptr(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self) {
  RtMidi *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("baseptr", 0);

  /* "rtmidi2.pyx":365
 *         del self.thisptr
 *     cdef RtMidi* baseptr(self):
 *         return self.thisptr             # <<<<<<<<<<<<<<
 *     cpdef send_message(self, message):
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()
 */
  __pyx_r = __pyx_v_self->thisptr;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":366
 *     cdef RtMidi* baseptr(self):
 *         return self.thisptr
 *     cpdef send_message(self, message):             # <<<<<<<<<<<<<<
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()
 *         for byte in message:
 */

static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_7send_message(PyObject *__pyx_v_self, PyObject *__pyx_v_message); /*proto*/
static PyObject *__pyx_f_7rtmidi2_14MidiOut_slower_send_message(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, PyObject *__pyx_v_message, int __pyx_skip_dispatch) {
  std::vector<unsigned char> *__pyx_v_message_vector;
  PyObject *__pyx_v_byte = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<unsigned char> *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  unsigned char __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_message", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_message); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_7send_message)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_message);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_message);
      __Pyx_GIVEREF(__pyx_v_message);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":367
 *         return self.thisptr
 *     cpdef send_message(self, message):
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()             # <<<<<<<<<<<<<<
 *         for byte in message:
 *             message_vector.push_back(byte)
 */
  try {__pyx_t_4 = new std::vector<unsigned char>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_message_vector = __pyx_t_4;

  /* "rtmidi2.pyx":368
 *     cpdef send_message(self, message):
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()
 *         for byte in message:             # <<<<<<<<<<<<<<
 *             message_vector.push_back(byte)
 *         self.thisptr.sendMessage(message_vector)
 */
  if (PyList_CheckExact(__pyx_v_message) || PyTuple_CheckExact(__pyx_v_message)) {
    __pyx_t_1 = __pyx_v_message; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_message); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF(__pyx_v_byte);
    __pyx_v_byte = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "rtmidi2.pyx":369
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()
 *         for byte in message:
 *             message_vector.push_back(byte)             # <<<<<<<<<<<<<<
 *         self.thisptr.sendMessage(message_vector)
 *         del message_vector
 */
    __pyx_t_7 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_byte); if (unlikely((__pyx_t_7 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_message_vector->push_back(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rtmidi2.pyx":370
 *         for byte in message:
 *             message_vector.push_back(byte)
 *         self.thisptr.sendMessage(message_vector)             # <<<<<<<<<<<<<<
 *         del message_vector
 *     cpdef send_cc(self, int channel, int cc, int value):
 */
  __pyx_v_self->thisptr->sendMessage(__pyx_v_message_vector);

  /* "rtmidi2.pyx":371
 *             message_vector.push_back(byte)
 *         self.thisptr.sendMessage(message_vector)
 *         del message_vector             # <<<<<<<<<<<<<<
 *     cpdef send_cc(self, int channel, int cc, int value):
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()
 */
  delete __pyx_v_message_vector;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_byte);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_7send_message(PyObject *__pyx_v_self, PyObject *__pyx_v_message); /*proto*/
static char __pyx_doc_7rtmidi2_14MidiOut_slower_6send_message[] = "MidiOut_slower.send_message(self, message)";
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_7send_message(PyObject *__pyx_v_self, PyObject *__pyx_v_message) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_message (wrapper)", 0);
  __pyx_r = __pyx_pf_7rtmidi2_14MidiOut_slower_6send_message(((struct __pyx_obj_7rtmidi2_MidiOut_slower *)__pyx_v_self), ((PyObject *)__pyx_v_message));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":366
 *     cdef RtMidi* baseptr(self):
 *         return self.thisptr
 *     cpdef send_message(self, message):             # <<<<<<<<<<<<<<
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()
 *         for byte in message:
 */

static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_6send_message(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, PyObject *__pyx_v_message) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_message", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut_slower *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_message(__pyx_v_self, __pyx_v_message, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":372
 *         self.thisptr.sendMessage(message_vector)
 *         del message_vector
 *     cpdef send_cc(self, int channel, int cc, int value):             # <<<<<<<<<<<<<<
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()
 *         m.push_back(DCC | channel)
 */

static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_9send_cc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_14MidiOut_slower_send_cc(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, int __pyx_v_channel, int __pyx_v_cc, int __pyx_v_value, int __pyx_skip_dispatch) {
  std::vector<unsigned char> *__pyx_v_m;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::vector<unsigned char> *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_cc", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_cc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_9send_cc)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_channel); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_cc); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_value); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":373
 *         del message_vector
 *     cpdef send_cc(self, int channel, int cc, int value):
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()             # <<<<<<<<<<<<<<
 *         m.push_back(DCC | channel)
 *         m.push_back(cc)
 */
  try {__pyx_t_6 = new std::vector<unsigned char>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_m = __pyx_t_6;

  /* "rtmidi2.pyx":374
 *     cpdef send_cc(self, int channel, int cc, int value):
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()
 *         m.push_back(DCC | channel)             # <<<<<<<<<<<<<<
 *         m.push_back(cc)
 *         m.push_back(value)
 */
  __pyx_v_m->push_back((176 | __pyx_v_channel));

  /* "rtmidi2.pyx":375
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()
 *         m.push_back(DCC | channel)
 *         m.push_back(cc)             # <<<<<<<<<<<<<<
 *         m.push_back(value)
 *         self.thisptr.sendMessage(m)
 */
  __pyx_v_m->push_back(__pyx_v_cc);

  /* "rtmidi2.pyx":376
 *         m.push_back(DCC | channel)
 *         m.push_back(cc)
 *         m.push_back(value)             # <<<<<<<<<<<<<<
 *         self.thisptr.sendMessage(m)
 *     cpdef send_messages(self, int messagetype, channels, values1, values2):
 */
  __pyx_v_m->push_back(__pyx_v_value);

  /* "rtmidi2.pyx":377
 *         m.push_back(cc)
 *         m.push_back(value)
 *         self.thisptr.sendMessage(m)             # <<<<<<<<<<<<<<
 *     cpdef send_messages(self, int messagetype, channels, values1, values2):
 *         """
 */
  __pyx_v_self->thisptr->sendMessage(__pyx_v_m);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_cc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_9send_cc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_14MidiOut_slower_8send_cc[] = "MidiOut_slower.send_cc(self, int channel, int cc, int value)";
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_9send_cc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_channel;
  int __pyx_v_cc;
  int __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_cc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__channel,&__pyx_n_s__cc,&__pyx_n_s__value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_cc", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_cc", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_cc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_channel = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_channel == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_cc = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_cc == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_cc", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_cc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_14MidiOut_slower_8send_cc(((struct __pyx_obj_7rtmidi2_MidiOut_slower *)__pyx_v_self), __pyx_v_channel, __pyx_v_cc, __pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":372
 *         self.thisptr.sendMessage(message_vector)
 *         del message_vector
 *     cpdef send_cc(self, int channel, int cc, int value):             # <<<<<<<<<<<<<<
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()
 *         m.push_back(DCC | channel)
 */

static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_8send_cc(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, int __pyx_v_channel, int __pyx_v_cc, int __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_cc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut_slower *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_cc(__pyx_v_self, __pyx_v_channel, __pyx_v_cc, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_cc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":378
 *         m.push_back(value)
 *         self.thisptr.sendMessage(m)
 *     cpdef send_messages(self, int messagetype, channels, values1, values2):             # <<<<<<<<<<<<<<
 *         """
 *         send multiple messages of the same type at once
 */

static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_11send_messages(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_14MidiOut_slower_send_messages(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, int __pyx_v_messagetype, PyObject *__pyx_v_channels, PyObject *__pyx_v_values1, PyObject *__pyx_v_values2, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_channel;
  std::vector<unsigned char> *__pyx_v_m;
  unsigned char __pyx_v_v0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  std::vector<unsigned char> *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_messages", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_messages); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_11send_messages)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_messagetype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_channels);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_channels);
      __Pyx_GIVEREF(__pyx_v_channels);
      __Pyx_INCREF(__pyx_v_values1);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_values1);
      __Pyx_GIVEREF(__pyx_v_values1);
      __Pyx_INCREF(__pyx_v_values2);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_values2);
      __Pyx_GIVEREF(__pyx_v_values2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":397
 *         cdef vector[unsigned char]* m
 *         cdef unsigned char v0
 *         if isinstance(channels, int):             # <<<<<<<<<<<<<<
 *             channel = channels
 *             v0 = messagetype | channel
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyInt_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_channels, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "rtmidi2.pyx":398
 *         cdef unsigned char v0
 *         if isinstance(channels, int):
 *             channel = channels             # <<<<<<<<<<<<<<
 *             v0 = messagetype | channel
 *         else:
 */
    __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_v_channels); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_channel = __pyx_t_5;

    /* "rtmidi2.pyx":399
 *         if isinstance(channels, int):
 *             channel = channels
 *             v0 = messagetype | channel             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("multiple channels in a function call not implemented yet")
 */
    __pyx_v_v0 = (__pyx_v_messagetype | __pyx_v_channel);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "rtmidi2.pyx":401
 *             v0 = messagetype | channel
 *         else:
 *             raise ValueError("multiple channels in a function call not implemented yet")             # <<<<<<<<<<<<<<
 *         if isinstance(values1, list):
 *             for i in range(len(<list>values1)):
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_23), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "rtmidi2.pyx":402
 *         else:
 *             raise ValueError("multiple channels in a function call not implemented yet")
 *         if isinstance(values1, list):             # <<<<<<<<<<<<<<
 *             for i in range(len(<list>values1)):
 *                 m = new vector[unsigned char]()
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyList_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_values1, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "rtmidi2.pyx":403
 *             raise ValueError("multiple channels in a function call not implemented yet")
 *         if isinstance(values1, list):
 *             for i in range(len(<list>values1)):             # <<<<<<<<<<<<<<
 *                 m = new vector[unsigned char]()
 *                 m.push_back( v0 )
 */
    if (unlikely(__pyx_v_values1 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = PyList_GET_SIZE(((PyObject *)((PyObject*)__pyx_v_values1))); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "rtmidi2.pyx":404
 *         if isinstance(values1, list):
 *             for i in range(len(<list>values1)):
 *                 m = new vector[unsigned char]()             # <<<<<<<<<<<<<<
 *                 m.push_back( v0 )
 *                 m.push_back(<int>(<list>values1)[i])
 */
      try {__pyx_t_7 = new std::vector<unsigned char>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
      __pyx_v_m = __pyx_t_7;

      /* "rtmidi2.pyx":405
 *             for i in range(len(<list>values1)):
 *                 m = new vector[unsigned char]()
 *                 m.push_back( v0 )             # <<<<<<<<<<<<<<
 *                 m.push_back(<int>(<list>values1)[i])
 *                 m.push_back(<int>(<list>values2)[i])
 */
      __pyx_v_m->push_back(__pyx_v_v0);

      /* "rtmidi2.pyx":406
 *                 m = new vector[unsigned char]()
 *                 m.push_back( v0 )
 *                 m.push_back(<int>(<list>values1)[i])             # <<<<<<<<<<<<<<
 *                 m.push_back(<int>(<list>values2)[i])
 *                 self.thisptr.sendMessage(m)
 */
      if (unlikely(__pyx_v_values1 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_values1)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_m->push_back(((int)__pyx_t_8));

      /* "rtmidi2.pyx":407
 *                 m.push_back( v0 )
 *                 m.push_back(<int>(<list>values1)[i])
 *                 m.push_back(<int>(<list>values2)[i])             # <<<<<<<<<<<<<<
 *                 self.thisptr.sendMessage(m)
 *                 del m
 */
      if (unlikely(__pyx_v_values2 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_values2)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_m->push_back(((int)__pyx_t_8));

      /* "rtmidi2.pyx":408
 *                 m.push_back(<int>(<list>values1)[i])
 *                 m.push_back(<int>(<list>values2)[i])
 *                 self.thisptr.sendMessage(m)             # <<<<<<<<<<<<<<
 *                 del m
 *         return None
 */
      __pyx_v_self->thisptr->sendMessage(__pyx_v_m);

      /* "rtmidi2.pyx":409
 *                 m.push_back(<int>(<list>values2)[i])
 *                 self.thisptr.sendMessage(m)
 *                 del m             # <<<<<<<<<<<<<<
 *         return None
 *     cpdef send_noteon(self, int channel, int midinote, int velocity):
 */
      delete __pyx_v_m;
    }
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "rtmidi2.pyx":410
 *                 self.thisptr.sendMessage(m)
 *                 del m
 *         return None             # <<<<<<<<<<<<<<
 *     cpdef send_noteon(self, int channel, int midinote, int velocity):
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_messages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_11send_messages(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_14MidiOut_slower_10send_messages[] = "MidiOut_slower.send_messages(self, int messagetype, channels, values1, values2)\n\n        send multiple messages of the same type at once\n\n        messagetype: \n            NOTEON     144\n            CC         176\n            NOTEOFF    128\n            PROGCHANGE 192\n            PITCHWHEEL 224\n\n        channels: a sequence of integers defining the channel, or only one int if the\n        channel is the same for all messages\n        values1: the notenumbers or control numbers\n        values2: the velocities or control values\n        ";
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_11send_messages(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_messagetype;
  PyObject *__pyx_v_channels = 0;
  PyObject *__pyx_v_values1 = 0;
  PyObject *__pyx_v_values2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_messages (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__messagetype,&__pyx_n_s__channels,&__pyx_n_s__values1,&__pyx_n_s__values2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__messagetype)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channels)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_messages", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__values1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_messages", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__values2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_messages", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_messages") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_messagetype = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_messagetype == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_channels = values[1];
    __pyx_v_values1 = values[2];
    __pyx_v_values2 = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_messages", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_messages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_14MidiOut_slower_10send_messages(((struct __pyx_obj_7rtmidi2_MidiOut_slower *)__pyx_v_self), __pyx_v_messagetype, __pyx_v_channels, __pyx_v_values1, __pyx_v_values2);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":378
 *         m.push_back(value)
 *         self.thisptr.sendMessage(m)
 *     cpdef send_messages(self, int messagetype, channels, values1, values2):             # <<<<<<<<<<<<<<
 *         """
 *         send multiple messages of the same type at once
 */

static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_10send_messages(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, int __pyx_v_messagetype, PyObject *__pyx_v_channels, PyObject *__pyx_v_values1, PyObject *__pyx_v_values2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_messages", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut_slower *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_messages(__pyx_v_self, __pyx_v_messagetype, __pyx_v_channels, __pyx_v_values1, __pyx_v_values2, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_messages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":411
 *                 del m
 *         return None
 *     cpdef send_noteon(self, int channel, int midinote, int velocity):             # <<<<<<<<<<<<<<
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()
 *         message_vector.push_back( DNOTEON|channel )
 */

static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_13send_noteon(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_14MidiOut_slower_send_noteon(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, int __pyx_v_channel, int __pyx_v_midinote, int __pyx_v_velocity, int __pyx_skip_dispatch) {
  std::vector<unsigned char> *__pyx_v_message_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::vector<unsigned char> *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteon", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_noteon); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_13send_noteon)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_channel); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_midinote); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_velocity); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":412
 *         return None
 *     cpdef send_noteon(self, int channel, int midinote, int velocity):
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()             # <<<<<<<<<<<<<<
 *         message_vector.push_back( DNOTEON|channel )
 *         message_vector.push_back( midinote )
 */
  try {__pyx_t_6 = new std::vector<unsigned char>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_message_vector = __pyx_t_6;

  /* "rtmidi2.pyx":413
 *     cpdef send_noteon(self, int channel, int midinote, int velocity):
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()
 *         message_vector.push_back( DNOTEON|channel )             # <<<<<<<<<<<<<<
 *         message_vector.push_back( midinote )
 *         message_vector.push_back( velocity )
 */
  __pyx_v_message_vector->push_back((144 | __pyx_v_channel));

  /* "rtmidi2.pyx":414
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()
 *         message_vector.push_back( DNOTEON|channel )
 *         message_vector.push_back( midinote )             # <<<<<<<<<<<<<<
 *         message_vector.push_back( velocity )
 *         self.thisptr.sendMessage(message_vector)
 */
  __pyx_v_message_vector->push_back(__pyx_v_midinote);

  /* "rtmidi2.pyx":415
 *         message_vector.push_back( DNOTEON|channel )
 *         message_vector.push_back( midinote )
 *         message_vector.push_back( velocity )             # <<<<<<<<<<<<<<
 *         self.thisptr.sendMessage(message_vector)
 *     cpdef send_noteon_many(self, channels, notes, vels):
 */
  __pyx_v_message_vector->push_back(__pyx_v_velocity);

  /* "rtmidi2.pyx":416
 *         message_vector.push_back( midinote )
 *         message_vector.push_back( velocity )
 *         self.thisptr.sendMessage(message_vector)             # <<<<<<<<<<<<<<
 *     cpdef send_noteon_many(self, channels, notes, vels):
 *         cdef int i
 */
  __pyx_v_self->thisptr->sendMessage(__pyx_v_message_vector);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteon", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_13send_noteon(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_14MidiOut_slower_12send_noteon[] = "MidiOut_slower.send_noteon(self, int channel, int midinote, int velocity)";
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_13send_noteon(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_channel;
  int __pyx_v_midinote;
  int __pyx_v_velocity;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_noteon (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__channel,&__pyx_n_s__midinote,&__pyx_n_s__velocity,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__midinote)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteon", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteon", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_noteon") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_channel = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_channel == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_midinote = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_midinote == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_velocity = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_velocity == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_noteon", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteon", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_14MidiOut_slower_12send_noteon(((struct __pyx_obj_7rtmidi2_MidiOut_slower *)__pyx_v_self), __pyx_v_channel, __pyx_v_midinote, __pyx_v_velocity);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":411
 *                 del m
 *         return None
 *     cpdef send_noteon(self, int channel, int midinote, int velocity):             # <<<<<<<<<<<<<<
 *         cdef vector[unsigned char]* message_vector = new vector[unsigned char]()
 *         message_vector.push_back( DNOTEON|channel )
 */

static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_12send_noteon(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, int __pyx_v_channel, int __pyx_v_midinote, int __pyx_v_velocity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteon", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut_slower *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_noteon(__pyx_v_self, __pyx_v_channel, __pyx_v_midinote, __pyx_v_velocity, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteon", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":417
 *         message_vector.push_back( velocity )
 *         self.thisptr.sendMessage(message_vector)
 *     cpdef send_noteon_many(self, channels, notes, vels):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef vector[unsigned char]* m
 */

static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_15send_noteon_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_14MidiOut_slower_send_noteon_many(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes, PyObject *__pyx_v_vels, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  std::vector<unsigned char> *__pyx_v_m;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  std::vector<unsigned char> *__pyx_t_7;
  unsigned char __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteon_many", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_noteon_many); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_15send_noteon_many)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_channels);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_channels);
      __Pyx_GIVEREF(__pyx_v_channels);
      __Pyx_INCREF(__pyx_v_notes);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_notes);
      __Pyx_GIVEREF(__pyx_v_notes);
      __Pyx_INCREF(__pyx_v_vels);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_vels);
      __Pyx_GIVEREF(__pyx_v_vels);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":420
 *         cdef int i
 *         cdef vector[unsigned char]* m
 *         if isinstance(notes, list):             # <<<<<<<<<<<<<<
 *             for i in range(len(<list>notes)):
 *                 m = new vector[unsigned char]()
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyList_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_notes, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "rtmidi2.pyx":421
 *         cdef vector[unsigned char]* m
 *         if isinstance(notes, list):
 *             for i in range(len(<list>notes)):             # <<<<<<<<<<<<<<
 *                 m = new vector[unsigned char]()
 *                 m.push_back( DNOTEON |<unsigned char>(<list>channels)[i])
 */
    if (unlikely(__pyx_v_notes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = PyList_GET_SIZE(((PyObject *)((PyObject*)__pyx_v_notes))); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "rtmidi2.pyx":422
 *         if isinstance(notes, list):
 *             for i in range(len(<list>notes)):
 *                 m = new vector[unsigned char]()             # <<<<<<<<<<<<<<
 *                 m.push_back( DNOTEON |<unsigned char>(<list>channels)[i])
 *                 m.push_back(<unsigned char>(<list>notes)[i])
 */
      try {__pyx_t_7 = new std::vector<unsigned char>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
      __pyx_v_m = __pyx_t_7;

      /* "rtmidi2.pyx":423
 *             for i in range(len(<list>notes)):
 *                 m = new vector[unsigned char]()
 *                 m.push_back( DNOTEON |<unsigned char>(<list>channels)[i])             # <<<<<<<<<<<<<<
 *                 m.push_back(<unsigned char>(<list>notes)[i])
 *                 m.push_back(<unsigned char>(<list>vels)[i])
 */
      if (unlikely(__pyx_v_channels == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_channels)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_1); if (unlikely((__pyx_t_8 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_m->push_back((144 | ((unsigned char)__pyx_t_8)));

      /* "rtmidi2.pyx":424
 *                 m = new vector[unsigned char]()
 *                 m.push_back( DNOTEON |<unsigned char>(<list>channels)[i])
 *                 m.push_back(<unsigned char>(<list>notes)[i])             # <<<<<<<<<<<<<<
 *                 m.push_back(<unsigned char>(<list>vels)[i])
 *                 self.thisptr.sendMessage(m)
 */
      if (unlikely(__pyx_v_notes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_notes)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_1); if (unlikely((__pyx_t_8 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_m->push_back(((unsigned char)__pyx_t_8));

      /* "rtmidi2.pyx":425
 *                 m.push_back( DNOTEON |<unsigned char>(<list>channels)[i])
 *                 m.push_back(<unsigned char>(<list>notes)[i])
 *                 m.push_back(<unsigned char>(<list>vels)[i])             # <<<<<<<<<<<<<<
 *                 self.thisptr.sendMessage(m)
 *                 del m
 */
      if (unlikely(__pyx_v_vels == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_vels)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_1); if (unlikely((__pyx_t_8 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_m->push_back(((unsigned char)__pyx_t_8));

      /* "rtmidi2.pyx":426
 *                 m.push_back(<unsigned char>(<list>notes)[i])
 *                 m.push_back(<unsigned char>(<list>vels)[i])
 *                 self.thisptr.sendMessage(m)             # <<<<<<<<<<<<<<
 *                 del m
 *     cpdef send_noteoff(self, unsigned char channel, unsigned char midinote):
 */
      __pyx_v_self->thisptr->sendMessage(__pyx_v_m);

      /* "rtmidi2.pyx":427
 *                 m.push_back(<unsigned char>(<list>vels)[i])
 *                 self.thisptr.sendMessage(m)
 *                 del m             # <<<<<<<<<<<<<<
 *     cpdef send_noteoff(self, unsigned char channel, unsigned char midinote):
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()
 */
      delete __pyx_v_m;
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteon_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_15send_noteon_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_14MidiOut_slower_14send_noteon_many[] = "MidiOut_slower.send_noteon_many(self, channels, notes, vels)";
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_15send_noteon_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_channels = 0;
  PyObject *__pyx_v_notes = 0;
  PyObject *__pyx_v_vels = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_noteon_many (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__channels,&__pyx_n_s__notes,&__pyx_n_s__vels,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channels)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__notes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteon_many", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__vels)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteon_many", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_noteon_many") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_channels = values[0];
    __pyx_v_notes = values[1];
    __pyx_v_vels = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_noteon_many", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteon_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_14MidiOut_slower_14send_noteon_many(((struct __pyx_obj_7rtmidi2_MidiOut_slower *)__pyx_v_self), __pyx_v_channels, __pyx_v_notes, __pyx_v_vels);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":417
 *         message_vector.push_back( velocity )
 *         self.thisptr.sendMessage(message_vector)
 *     cpdef send_noteon_many(self, channels, notes, vels):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef vector[unsigned char]* m
 */

static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_14send_noteon_many(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes, PyObject *__pyx_v_vels) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteon_many", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut_slower *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_noteon_many(__pyx_v_self, __pyx_v_channels, __pyx_v_notes, __pyx_v_vels, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteon_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":428
 *                 self.thisptr.sendMessage(m)
 *                 del m
 *     cpdef send_noteoff(self, unsigned char channel, unsigned char midinote):             # <<<<<<<<<<<<<<
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()
 *         m.push_back(DNOTEOFF|channel)
 */

static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_17send_noteoff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_14MidiOut_slower_send_noteoff(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_midinote, int __pyx_skip_dispatch) {
  std::vector<unsigned char> *__pyx_v_m;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::vector<unsigned char> *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteoff", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_noteoff); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_17send_noteoff)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_channel); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_midinote); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":429
 *                 del m
 *     cpdef send_noteoff(self, unsigned char channel, unsigned char midinote):
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()             # <<<<<<<<<<<<<<
 *         m.push_back(DNOTEOFF|channel)
 *         m.push_back(midinote)
 */
  try {__pyx_t_5 = new std::vector<unsigned char>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_m = __pyx_t_5;

  /* "rtmidi2.pyx":430
 *     cpdef send_noteoff(self, unsigned char channel, unsigned char midinote):
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()
 *         m.push_back(DNOTEOFF|channel)             # <<<<<<<<<<<<<<
 *         m.push_back(midinote)
 *         m.push_back(0)
 */
  __pyx_v_m->push_back((128 | __pyx_v_channel));

  /* "rtmidi2.pyx":431
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()
 *         m.push_back(DNOTEOFF|channel)
 *         m.push_back(midinote)             # <<<<<<<<<<<<<<
 *         m.push_back(0)
 *         self.thisptr.sendMessage(m)
 */
  __pyx_v_m->push_back(__pyx_v_midinote);

  /* "rtmidi2.pyx":432
 *         m.push_back(DNOTEOFF|channel)
 *         m.push_back(midinote)
 *         m.push_back(0)             # <<<<<<<<<<<<<<
 *         self.thisptr.sendMessage(m)
 *         del m
 */
  __pyx_v_m->push_back(0);

  /* "rtmidi2.pyx":433
 *         m.push_back(midinote)
 *         m.push_back(0)
 *         self.thisptr.sendMessage(m)             # <<<<<<<<<<<<<<
 *         del m
 *     cpdef send_noteoff_many(self, channels, notes):
 */
  __pyx_v_self->thisptr->sendMessage(__pyx_v_m);

  /* "rtmidi2.pyx":434
 *         m.push_back(0)
 *         self.thisptr.sendMessage(m)
 *         del m             # <<<<<<<<<<<<<<
 *     cpdef send_noteoff_many(self, channels, notes):
 *         cdef int i, channel, v0
 */
  delete __pyx_v_m;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_17send_noteoff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_14MidiOut_slower_16send_noteoff[] = "MidiOut_slower.send_noteoff(self, unsigned char channel, unsigned char midinote)";
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_17send_noteoff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned char __pyx_v_channel;
  unsigned char __pyx_v_midinote;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_noteoff (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__channel,&__pyx_n_s__midinote,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__midinote)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteoff", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_noteoff") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_channel = __Pyx_PyInt_AsUnsignedChar(values[0]); if (unlikely((__pyx_v_channel == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_midinote = __Pyx_PyInt_AsUnsignedChar(values[1]); if (unlikely((__pyx_v_midinote == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_noteoff", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_14MidiOut_slower_16send_noteoff(((struct __pyx_obj_7rtmidi2_MidiOut_slower *)__pyx_v_self), __pyx_v_channel, __pyx_v_midinote);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":428
 *                 self.thisptr.sendMessage(m)
 *                 del m
 *     cpdef send_noteoff(self, unsigned char channel, unsigned char midinote):             # <<<<<<<<<<<<<<
 *         cdef vector[unsigned char]* m = new vector[unsigned char]()
 *         m.push_back(DNOTEOFF|channel)
 */

static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_16send_noteoff(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_midinote) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteoff", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut_slower *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_noteoff(__pyx_v_self, __pyx_v_channel, __pyx_v_midinote, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":435
 *         self.thisptr.sendMessage(m)
 *         del m
 *     cpdef send_noteoff_many(self, channels, notes):             # <<<<<<<<<<<<<<
 *         cdef int i, channel, v0
 *         cdef vector[unsigned char]* m
 */

static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_19send_noteoff_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_14MidiOut_slower_send_noteoff_many(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_v0;
  std::vector<unsigned char> *__pyx_v_m;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  std::vector<unsigned char> *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteoff_many", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_noteoff_many); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_19send_noteoff_many)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_channels);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_channels);
      __Pyx_GIVEREF(__pyx_v_channels);
      __Pyx_INCREF(__pyx_v_notes);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_notes);
      __Pyx_GIVEREF(__pyx_v_notes);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":438
 *         cdef int i, channel, v0
 *         cdef vector[unsigned char]* m
 *         if isinstance(channels, int):             # <<<<<<<<<<<<<<
 *             v0 = DNOTEOFF | <int>channels
 *             if isinstance(notes, list):
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyInt_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_channels, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "rtmidi2.pyx":439
 *         cdef vector[unsigned char]* m
 *         if isinstance(channels, int):
 *             v0 = DNOTEOFF | <int>channels             # <<<<<<<<<<<<<<
 *             if isinstance(notes, list):
 *                 for i in range(len(<list>notes)):
 */
    __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_v_channels); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v0 = (128 | ((int)__pyx_t_5));

    /* "rtmidi2.pyx":440
 *         if isinstance(channels, int):
 *             v0 = DNOTEOFF | <int>channels
 *             if isinstance(notes, list):             # <<<<<<<<<<<<<<
 *                 for i in range(len(<list>notes)):
 *                     m = new vector[unsigned char]()
 */
    __pyx_t_1 = ((PyObject *)((PyObject*)(&PyList_Type)));
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_notes, __pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "rtmidi2.pyx":441
 *             v0 = DNOTEOFF | <int>channels
 *             if isinstance(notes, list):
 *                 for i in range(len(<list>notes)):             # <<<<<<<<<<<<<<
 *                     m = new vector[unsigned char]()
 *                     m.push_back( v0 )
 */
      if (unlikely(__pyx_v_notes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_6 = PyList_GET_SIZE(((PyObject *)((PyObject*)__pyx_v_notes))); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "rtmidi2.pyx":442
 *             if isinstance(notes, list):
 *                 for i in range(len(<list>notes)):
 *                     m = new vector[unsigned char]()             # <<<<<<<<<<<<<<
 *                     m.push_back( v0 )
 *                     m.push_back(<int>(<list>notes)[i])
 */
        try {__pyx_t_7 = new std::vector<unsigned char>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
        __pyx_v_m = __pyx_t_7;

        /* "rtmidi2.pyx":443
 *                 for i in range(len(<list>notes)):
 *                     m = new vector[unsigned char]()
 *                     m.push_back( v0 )             # <<<<<<<<<<<<<<
 *                     m.push_back(<int>(<list>notes)[i])
 *                     m.push_back(0)
 */
        __pyx_v_m->push_back(__pyx_v_v0);

        /* "rtmidi2.pyx":444
 *                     m = new vector[unsigned char]()
 *                     m.push_back( v0 )
 *                     m.push_back(<int>(<list>notes)[i])             # <<<<<<<<<<<<<<
 *                     m.push_back(0)
 *                     self.thisptr.sendMessage(m)
 */
        if (unlikely(__pyx_v_notes == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_notes)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_m->push_back(((int)__pyx_t_8));

        /* "rtmidi2.pyx":445
 *                     m.push_back( v0 )
 *                     m.push_back(<int>(<list>notes)[i])
 *                     m.push_back(0)             # <<<<<<<<<<<<<<
 *                     self.thisptr.sendMessage(m)
 *                     del m
 */
        __pyx_v_m->push_back(0);

        /* "rtmidi2.pyx":446
 *                     m.push_back(<int>(<list>notes)[i])
 *                     m.push_back(0)
 *                     self.thisptr.sendMessage(m)             # <<<<<<<<<<<<<<
 *                     del m
 *             else:
 */
        __pyx_v_self->thisptr->sendMessage(__pyx_v_m);

        /* "rtmidi2.pyx":447
 *                     m.push_back(0)
 *                     self.thisptr.sendMessage(m)
 *                     del m             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplemented("only lists implemented right now")
 */
        delete __pyx_v_m;
      }
      goto __pyx_L4;
    }
    /*else*/ {

      /* "rtmidi2.pyx":449
 *                     del m
 *             else:
 *                 raise NotImplemented("only lists implemented right now")             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplemented("no multiple channels implemented right now")
 */
      __pyx_t_1 = PyObject_Call(__pyx_builtin_NotImplemented, ((PyObject *)__pyx_k_tuple_25), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "rtmidi2.pyx":451
 *                 raise NotImplemented("only lists implemented right now")
 *         else:
 *             raise NotImplemented("no multiple channels implemented right now")             # <<<<<<<<<<<<<<
 * 
 * cdef class MidiOut(MidiBase):
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_NotImplemented, ((PyObject *)__pyx_k_tuple_27), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteoff_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_19send_noteoff_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_14MidiOut_slower_18send_noteoff_many[] = "MidiOut_slower.send_noteoff_many(self, channels, notes)";
static PyObject *__pyx_pw_7rtmidi2_14MidiOut_slower_19send_noteoff_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_channels = 0;
  PyObject *__pyx_v_notes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_noteoff_many (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__channels,&__pyx_n_s__notes,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channels)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__notes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteoff_many", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_noteoff_many") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_channels = values[0];
    __pyx_v_notes = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_noteoff_many", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteoff_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_14MidiOut_slower_18send_noteoff_many(((struct __pyx_obj_7rtmidi2_MidiOut_slower *)__pyx_v_self), __pyx_v_channels, __pyx_v_notes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":435
 *         self.thisptr.sendMessage(m)
 *         del m
 *     cpdef send_noteoff_many(self, channels, notes):             # <<<<<<<<<<<<<<
 *         cdef int i, channel, v0
 *         cdef vector[unsigned char]* m
 */

static PyObject *__pyx_pf_7rtmidi2_14MidiOut_slower_18send_noteoff_many(struct __pyx_obj_7rtmidi2_MidiOut_slower *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteoff_many", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut_slower *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_noteoff_many(__pyx_v_self, __pyx_v_channels, __pyx_v_notes, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut_slower.send_noteoff_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7rtmidi2_7MidiOut_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rtmidi2_7MidiOut_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7rtmidi2_7MidiOut___cinit__(((struct __pyx_obj_7rtmidi2_MidiOut *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":457
 *     cdef vector[unsigned char]* msg3
 *     cdef int msg3_locked
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new RtMidiOut(string(<char*>"rtmidiout"))
 *         self.msg3 = new vector[unsigned char]()
 */

static int __pyx_pf_7rtmidi2_7MidiOut___cinit__(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self) {
  CYTHON_UNUSED long __pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::vector<unsigned char> *__pyx_t_2;
  long __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rtmidi2.pyx":458
 *     cdef int msg3_locked
 *     def __cinit__(self):
 *         self.thisptr = new RtMidiOut(string(<char*>"rtmidiout"))             # <<<<<<<<<<<<<<
 *         self.msg3 = new vector[unsigned char]()
 *         for n in range(3):
 */
  try {__pyx_t_1 = std::string(((char *)__pyx_k__rtmidiout));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_self->thisptr = new RtMidiOut(__pyx_t_1);

  /* "rtmidi2.pyx":459
 *     def __cinit__(self):
 *         self.thisptr = new RtMidiOut(string(<char*>"rtmidiout"))
 *         self.msg3 = new vector[unsigned char]()             # <<<<<<<<<<<<<<
 *         for n in range(3):
 *             self.msg3.push_back(0)
 */
  try {__pyx_t_2 = new std::vector<unsigned char>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_self->msg3 = __pyx_t_2;

  /* "rtmidi2.pyx":460
 *         self.thisptr = new RtMidiOut(string(<char*>"rtmidiout"))
 *         self.msg3 = new vector[unsigned char]()
 *         for n in range(3):             # <<<<<<<<<<<<<<
 *             self.msg3.push_back(0)
 *         self.msg3_locked = 0
 */
  for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "rtmidi2.pyx":461
 *         self.msg3 = new vector[unsigned char]()
 *         for n in range(3):
 *             self.msg3.push_back(0)             # <<<<<<<<<<<<<<
 *         self.msg3_locked = 0
 *     def __init__(self): pass
 */
    __pyx_v_self->msg3->push_back(0);
  }

  /* "rtmidi2.pyx":462
 *         for n in range(3):
 *             self.msg3.push_back(0)
 *         self.msg3_locked = 0             # <<<<<<<<<<<<<<
 *     def __init__(self): pass
 *     def __dealloc__(self):
 */
  __pyx_v_self->msg3_locked = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7rtmidi2_7MidiOut_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rtmidi2_7MidiOut_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7rtmidi2_7MidiOut_2__init__(((struct __pyx_obj_7rtmidi2_MidiOut *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":463
 *             self.msg3.push_back(0)
 *         self.msg3_locked = 0
 *     def __init__(self): pass             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */

static int __pyx_pf_7rtmidi2_7MidiOut_2__init__(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_7rtmidi2_7MidiOut_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rtmidi2_7MidiOut_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7rtmidi2_7MidiOut_4__dealloc__(((struct __pyx_obj_7rtmidi2_MidiOut *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "rtmidi2.pyx":464
 *         self.msg3_locked = 0
 *     def __init__(self): pass
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         del self.msg3
 */

static void __pyx_pf_7rtmidi2_7MidiOut_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rtmidi2.pyx":465
 *     def __init__(self): pass
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         del self.msg3
 *     cdef RtMidi* baseptr(self):
 */
  delete __pyx_v_self->thisptr;

  /* "rtmidi2.pyx":466
 *     def __dealloc__(self):
 *         del self.thisptr
 *         del self.msg3             # <<<<<<<<<<<<<<
 *     cdef RtMidi* baseptr(self):
 *         return self.thisptr
 */
  delete __pyx_v_self->msg3;

  __Pyx_RefNannyFinishContext();
}

/* "rtmidi2.pyx":467
 *         del self.thisptr
 *         del self.msg3
 *     cdef RtMidi* baseptr(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr
 *     def send_message(self, tuple message not None):
 */

static RtMidi *__pyx_f_7rtmidi2_7MidiOut_baseptr(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self) {
  RtMidi *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("baseptr", 0);

  /* "rtmidi2.pyx":468
 *         del self.msg3
 *     cdef RtMidi* baseptr(self):
 *         return self.thisptr             # <<<<<<<<<<<<<<
 *     def send_message(self, tuple message not None):
 *         """
 */
  __pyx_r = __pyx_v_self->thisptr;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_7send_message(PyObject *__pyx_v_self, PyObject *__pyx_v_message); /*proto*/
static char __pyx_doc_7rtmidi2_7MidiOut_6send_message[] = "MidiOut.send_message(self, tuple message)\n\n        message is a tuple of bytes. this sends raw midi messages\n        ";
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_7send_message(PyObject *__pyx_v_self, PyObject *__pyx_v_message) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_message (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_message), (&PyTuple_Type), 0, "message", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7rtmidi2_7MidiOut_6send_message(((struct __pyx_obj_7rtmidi2_MidiOut *)__pyx_v_self), ((PyObject*)__pyx_v_message));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":469
 *     cdef RtMidi* baseptr(self):
 *         return self.thisptr
 *     def send_message(self, tuple message not None):             # <<<<<<<<<<<<<<
 *         """
 *         message is a tuple of bytes. this sends raw midi messages
 */

static PyObject *__pyx_pf_7rtmidi2_7MidiOut_6send_message(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, PyObject *__pyx_v_message) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned char __pyx_t_1;
  unsigned char __pyx_t_2;
  unsigned char __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_message", 0);

  /* "rtmidi2.pyx":473
 *         message is a tuple of bytes. this sends raw midi messages
 *         """
 *         self.send_raw(message[0], message[1], message[2])             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void send_raw(self, unsigned char b0, unsigned char b1, unsigned char b2):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedChar(PyTuple_GET_ITEM(__pyx_v_message, 0)); if (unlikely((__pyx_t_1 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(PyTuple_GET_ITEM(__pyx_v_message, 1)); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(PyTuple_GET_ITEM(__pyx_v_message, 2)); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_f_7rtmidi2_7MidiOut_send_raw(__pyx_v_self, __pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":475
 *         self.send_raw(message[0], message[1], message[2])
 * 
 *     cdef inline void send_raw(self, unsigned char b0, unsigned char b1, unsigned char b2):             # <<<<<<<<<<<<<<
 *         cdef vector[unsigned char]* v
 *         if self.msg3_locked:
 */

static CYTHON_INLINE void __pyx_f_7rtmidi2_7MidiOut_send_raw(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, unsigned char __pyx_v_b0, unsigned char __pyx_v_b1, unsigned char __pyx_v_b2) {
  std::vector<unsigned char> *__pyx_v_v;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned char> *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_raw", 0);

  /* "rtmidi2.pyx":477
 *     cdef inline void send_raw(self, unsigned char b0, unsigned char b1, unsigned char b2):
 *         cdef vector[unsigned char]* v
 *         if self.msg3_locked:             # <<<<<<<<<<<<<<
 *             v = new vector[unsigned char](3)
 *             v[0][0] = b0
 */
  if (__pyx_v_self->msg3_locked) {

    /* "rtmidi2.pyx":478
 *         cdef vector[unsigned char]* v
 *         if self.msg3_locked:
 *             v = new vector[unsigned char](3)             # <<<<<<<<<<<<<<
 *             v[0][0] = b0
 *             v[0][1] = b1
 */
    try {__pyx_t_1 = new std::vector<unsigned char>(3);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_v = __pyx_t_1;

    /* "rtmidi2.pyx":479
 *         if self.msg3_locked:
 *             v = new vector[unsigned char](3)
 *             v[0][0] = b0             # <<<<<<<<<<<<<<
 *             v[0][1] = b1
 *             v[0][2] = b2
 */
    ((__pyx_v_v[0])[0]) = __pyx_v_b0;

    /* "rtmidi2.pyx":480
 *             v = new vector[unsigned char](3)
 *             v[0][0] = b0
 *             v[0][1] = b1             # <<<<<<<<<<<<<<
 *             v[0][2] = b2
 *             self.thisptr.sendMessage(v)
 */
    ((__pyx_v_v[0])[1]) = __pyx_v_b1;

    /* "rtmidi2.pyx":481
 *             v[0][0] = b0
 *             v[0][1] = b1
 *             v[0][2] = b2             # <<<<<<<<<<<<<<
 *             self.thisptr.sendMessage(v)
 *             del v
 */
    ((__pyx_v_v[0])[2]) = __pyx_v_b2;

    /* "rtmidi2.pyx":482
 *             v[0][1] = b1
 *             v[0][2] = b2
 *             self.thisptr.sendMessage(v)             # <<<<<<<<<<<<<<
 *             del v
 *         else:
 */
    __pyx_v_self->thisptr->sendMessage(__pyx_v_v);

    /* "rtmidi2.pyx":483
 *             v[0][2] = b2
 *             self.thisptr.sendMessage(v)
 *             del v             # <<<<<<<<<<<<<<
 *         else:
 *             self.msg3_locked = 1
 */
    delete __pyx_v_v;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "rtmidi2.pyx":485
 *             del v
 *         else:
 *             self.msg3_locked = 1             # <<<<<<<<<<<<<<
 *             v = self.msg3
 *             v[0][0] = b0
 */
    __pyx_v_self->msg3_locked = 1;

    /* "rtmidi2.pyx":486
 *         else:
 *             self.msg3_locked = 1
 *             v = self.msg3             # <<<<<<<<<<<<<<
 *             v[0][0] = b0
 *             v[0][1] = b1
 */
    __pyx_v_v = __pyx_v_self->msg3;

    /* "rtmidi2.pyx":487
 *             self.msg3_locked = 1
 *             v = self.msg3
 *             v[0][0] = b0             # <<<<<<<<<<<<<<
 *             v[0][1] = b1
 *             v[0][2] = b2
 */
    ((__pyx_v_v[0])[0]) = __pyx_v_b0;

    /* "rtmidi2.pyx":488
 *             v = self.msg3
 *             v[0][0] = b0
 *             v[0][1] = b1             # <<<<<<<<<<<<<<
 *             v[0][2] = b2
 *             self.thisptr.sendMessage(v)
 */
    ((__pyx_v_v[0])[1]) = __pyx_v_b1;

    /* "rtmidi2.pyx":489
 *             v[0][0] = b0
 *             v[0][1] = b1
 *             v[0][2] = b2             # <<<<<<<<<<<<<<
 *             self.thisptr.sendMessage(v)
 *             self.msg3_locked = 0
 */
    ((__pyx_v_v[0])[2]) = __pyx_v_b2;

    /* "rtmidi2.pyx":490
 *             v[0][1] = b1
 *             v[0][2] = b2
 *             self.thisptr.sendMessage(v)             # <<<<<<<<<<<<<<
 *             self.msg3_locked = 0
 *     cpdef send_cc(self, unsigned char channel, unsigned char cc, unsigned char value):
 */
    __pyx_v_self->thisptr->sendMessage(__pyx_v_v);

    /* "rtmidi2.pyx":491
 *             v[0][2] = b2
 *             self.thisptr.sendMessage(v)
 *             self.msg3_locked = 0             # <<<<<<<<<<<<<<
 *     cpdef send_cc(self, unsigned char channel, unsigned char cc, unsigned char value):
 *         """
 */
    __pyx_v_self->msg3_locked = 0;
  }
  __pyx_L3:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rtmidi2.MidiOut.send_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "rtmidi2.pyx":492
 *             self.thisptr.sendMessage(v)
 *             self.msg3_locked = 0
 *     cpdef send_cc(self, unsigned char channel, unsigned char cc, unsigned char value):             # <<<<<<<<<<<<<<
 *         """
 *         channel -> 0-15
 */

static PyObject *__pyx_pw_7rtmidi2_7MidiOut_9send_cc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_7MidiOut_send_cc(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_cc, unsigned char __pyx_v_value, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_cc", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_cc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_9send_cc)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_channel); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_cc); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_value); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":496
 *         channel -> 0-15
 *         """
 *         self.send_raw(DCC | channel, cc, value)             # <<<<<<<<<<<<<<
 *     cpdef send_messages(self, int messagetype, messages):
 *         """
 */
  __pyx_f_7rtmidi2_7MidiOut_send_raw(__pyx_v_self, (176 | __pyx_v_channel), __pyx_v_cc, __pyx_v_value);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_cc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_9send_cc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_7MidiOut_8send_cc[] = "MidiOut.send_cc(self, unsigned char channel, unsigned char cc, unsigned char value)\n\n        channel -> 0-15\n        ";
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_9send_cc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned char __pyx_v_channel;
  unsigned char __pyx_v_cc;
  unsigned char __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_cc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__channel,&__pyx_n_s__cc,&__pyx_n_s__value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_cc", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_cc", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_cc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_channel = __Pyx_PyInt_AsUnsignedChar(values[0]); if (unlikely((__pyx_v_channel == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_cc = __Pyx_PyInt_AsUnsignedChar(values[1]); if (unlikely((__pyx_v_cc == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = __Pyx_PyInt_AsUnsignedChar(values[2]); if (unlikely((__pyx_v_value == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_cc", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_cc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_7MidiOut_8send_cc(((struct __pyx_obj_7rtmidi2_MidiOut *)__pyx_v_self), __pyx_v_channel, __pyx_v_cc, __pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":492
 *             self.thisptr.sendMessage(v)
 *             self.msg3_locked = 0
 *     cpdef send_cc(self, unsigned char channel, unsigned char cc, unsigned char value):             # <<<<<<<<<<<<<<
 *         """
 *         channel -> 0-15
 */

static PyObject *__pyx_pf_7rtmidi2_7MidiOut_8send_cc(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_cc, unsigned char __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_cc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_cc(__pyx_v_self, __pyx_v_channel, __pyx_v_cc, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_cc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":497
 *         """
 *         self.send_raw(DCC | channel, cc, value)
 *     cpdef send_messages(self, int messagetype, messages):             # <<<<<<<<<<<<<<
 *         """
 *         messagetype:
 */

static PyObject *__pyx_pw_7rtmidi2_7MidiOut_11send_messages(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_7MidiOut_send_messages(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, CYTHON_UNUSED int __pyx_v_messagetype, PyObject *__pyx_v_messages, int __pyx_skip_dispatch) {
  std::vector<unsigned char> *__pyx_v_m;
  PyObject *__pyx_v_tuprow = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<unsigned char> *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  unsigned char __pyx_t_10;
  unsigned char __pyx_t_11;
  unsigned char __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_messages", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_messages); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_11send_messages)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_messagetype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_messages);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_messages);
      __Pyx_GIVEREF(__pyx_v_messages);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":520
 *         """
 *         cdef int i
 *         cdef vector[unsigned char]* m = new vector[unsigned char](3)             # <<<<<<<<<<<<<<
 *         cdef tuple tuprow
 *         if isinstance(messages, list):
 */
  try {__pyx_t_4 = new std::vector<unsigned char>(3);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_m = __pyx_t_4;

  /* "rtmidi2.pyx":522
 *         cdef vector[unsigned char]* m = new vector[unsigned char](3)
 *         cdef tuple tuprow
 *         if isinstance(messages, list):             # <<<<<<<<<<<<<<
 *             for tuprow in <list>messages:
 *                 m[0][0], m[0][1], m[0][2] = tuprow
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyList_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_messages, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "rtmidi2.pyx":523
 *         cdef tuple tuprow
 *         if isinstance(messages, list):
 *             for tuprow in <list>messages:             # <<<<<<<<<<<<<<
 *                 m[0][0], m[0][1], m[0][2] = tuprow
 *                 self.thisptr.sendMessage(m)
 */
    if (unlikely(__pyx_v_messages == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = ((PyObject *)((PyObject*)__pyx_v_messages)); __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    for (;;) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
      if (!(likely(PyTuple_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected tuple, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_XDECREF(((PyObject *)__pyx_v_tuprow));
      __pyx_v_tuprow = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "rtmidi2.pyx":524
 *         if isinstance(messages, list):
 *             for tuprow in <list>messages:
 *                 m[0][0], m[0][1], m[0][2] = tuprow             # <<<<<<<<<<<<<<
 *                 self.thisptr.sendMessage(m)
 *         else:
 */
      if (likely(PyTuple_CheckExact(((PyObject *)__pyx_v_tuprow)))) {
        PyObject* sequence = ((PyObject *)__pyx_v_tuprow);
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (1) {
        __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      } else
      {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(((PyObject *)__pyx_v_tuprow)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_2)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_3 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_3)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        index = 2; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L7_unpacking_done:;
      }
      __pyx_t_10 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_2); if (unlikely((__pyx_t_10 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_3); if (unlikely((__pyx_t_11 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_7); if (unlikely((__pyx_t_12 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      ((__pyx_v_m[0])[0]) = __pyx_t_10;
      ((__pyx_v_m[0])[1]) = __pyx_t_11;
      ((__pyx_v_m[0])[2]) = __pyx_t_12;

      /* "rtmidi2.pyx":525
 *             for tuprow in <list>messages:
 *                 m[0][0], m[0][1], m[0][2] = tuprow
 *                 self.thisptr.sendMessage(m)             # <<<<<<<<<<<<<<
 *         else:
 *             del m
 */
      __pyx_v_self->thisptr->sendMessage(__pyx_v_m);
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "rtmidi2.pyx":527
 *                 self.thisptr.sendMessage(m)
 *         else:
 *             del m             # <<<<<<<<<<<<<<
 *             raise TypeError("messages should be a list of tuples. other containers (numpy arrays) are still not supported")
 *         del m
 */
    delete __pyx_v_m;

    /* "rtmidi2.pyx":528
 *         else:
 *             del m
 *             raise TypeError("messages should be a list of tuples. other containers (numpy arrays) are still not supported")             # <<<<<<<<<<<<<<
 *         del m
 *         return None
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_29), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "rtmidi2.pyx":529
 *             del m
 *             raise TypeError("messages should be a list of tuples. other containers (numpy arrays) are still not supported")
 *         del m             # <<<<<<<<<<<<<<
 *         return None
 *     cpdef send_noteon(self, unsigned char channel, unsigned char midinote, unsigned char velocity):
 */
  delete __pyx_v_m;

  /* "rtmidi2.pyx":530
 *             raise TypeError("messages should be a list of tuples. other containers (numpy arrays) are still not supported")
 *         del m
 *         return None             # <<<<<<<<<<<<<<
 *     cpdef send_noteon(self, unsigned char channel, unsigned char midinote, unsigned char velocity):
 *         """
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_messages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tuprow);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_11send_messages(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_7MidiOut_10send_messages[] = "MidiOut.send_messages(self, int messagetype, messages)\n\n        messagetype: \n            NOTEON     144\n            CC         176\n            NOTEOFF    128\n            PROGCHANGE 192\n            PITCHWHEEL 224\n        channels: a list of channels\n        messages: a list of tuples of the form (channel, value1, value2), or a numpy 2D array with 3 columns and n rows\n        where channel is an int between 0-15, value1 is the midinote or ccnumber, etc, and value2 is the value of the message (velocity, control value, etc)\n\n        Example\n        -------\n\n        # send multiple noteoffs as noteon with velocity 0 for hosts which do not implement the noteoff message\n\n        m = MidiOut()\n        m.open_port()\n        messages = [(0, i, 0) for i in range(127)]\n        m.send_messages(144, messages)\n        ";
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_11send_messages(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_messagetype;
  PyObject *__pyx_v_messages = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_messages (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__messagetype,&__pyx_n_s__messages,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__messagetype)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__messages)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_messages", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_messages") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_messagetype = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_messagetype == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_messages = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_messages", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_messages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_7MidiOut_10send_messages(((struct __pyx_obj_7rtmidi2_MidiOut *)__pyx_v_self), __pyx_v_messagetype, __pyx_v_messages);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":497
 *         """
 *         self.send_raw(DCC | channel, cc, value)
 *     cpdef send_messages(self, int messagetype, messages):             # <<<<<<<<<<<<<<
 *         """
 *         messagetype:
 */

static PyObject *__pyx_pf_7rtmidi2_7MidiOut_10send_messages(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, int __pyx_v_messagetype, PyObject *__pyx_v_messages) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_messages", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_messages(__pyx_v_self, __pyx_v_messagetype, __pyx_v_messages, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_messages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":531
 *         del m
 *         return None
 *     cpdef send_noteon(self, unsigned char channel, unsigned char midinote, unsigned char velocity):             # <<<<<<<<<<<<<<
 *         """
 *         NB: channel -> 0.15
 */

static PyObject *__pyx_pw_7rtmidi2_7MidiOut_13send_noteon(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_7MidiOut_send_noteon(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_midinote, unsigned char __pyx_v_velocity, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteon", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_noteon); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_13send_noteon)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_channel); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_midinote); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_velocity); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":535
 *         NB: channel -> 0.15
 *         """
 *         self.send_raw(DNOTEON|channel, midinote, velocity)             # <<<<<<<<<<<<<<
 *     cpdef send_noteon_many(self, channels, notes, vels):
 *         """
 */
  __pyx_f_7rtmidi2_7MidiOut_send_raw(__pyx_v_self, (144 | __pyx_v_channel), __pyx_v_midinote, __pyx_v_velocity);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteon", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_13send_noteon(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_7MidiOut_12send_noteon[] = "MidiOut.send_noteon(self, unsigned char channel, unsigned char midinote, unsigned char velocity)\n\n        NB: channel -> 0.15\n        ";
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_13send_noteon(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned char __pyx_v_channel;
  unsigned char __pyx_v_midinote;
  unsigned char __pyx_v_velocity;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_noteon (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__channel,&__pyx_n_s__midinote,&__pyx_n_s__velocity,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__midinote)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteon", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteon", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_noteon") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_channel = __Pyx_PyInt_AsUnsignedChar(values[0]); if (unlikely((__pyx_v_channel == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_midinote = __Pyx_PyInt_AsUnsignedChar(values[1]); if (unlikely((__pyx_v_midinote == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_velocity = __Pyx_PyInt_AsUnsignedChar(values[2]); if (unlikely((__pyx_v_velocity == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_noteon", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteon", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_7MidiOut_12send_noteon(((struct __pyx_obj_7rtmidi2_MidiOut *)__pyx_v_self), __pyx_v_channel, __pyx_v_midinote, __pyx_v_velocity);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":531
 *         del m
 *         return None
 *     cpdef send_noteon(self, unsigned char channel, unsigned char midinote, unsigned char velocity):             # <<<<<<<<<<<<<<
 *         """
 *         NB: channel -> 0.15
 */

static PyObject *__pyx_pf_7rtmidi2_7MidiOut_12send_noteon(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_midinote, unsigned char __pyx_v_velocity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteon", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_noteon(__pyx_v_self, __pyx_v_channel, __pyx_v_midinote, __pyx_v_velocity, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteon", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":536
 *         """
 *         self.send_raw(DNOTEON|channel, midinote, velocity)
 *     cpdef send_noteon_many(self, channels, notes, vels):             # <<<<<<<<<<<<<<
 *         """
 *         channels, notes and vels are sequences of integers.
 */

static PyObject *__pyx_pw_7rtmidi2_7MidiOut_15send_noteon_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_7MidiOut_send_noteon_many(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes, PyObject *__pyx_v_vels, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  std::vector<unsigned char> *__pyx_v_m;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<unsigned char> *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  unsigned char __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteon_many", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_noteon_many); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_15send_noteon_many)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_channels);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_channels);
      __Pyx_GIVEREF(__pyx_v_channels);
      __Pyx_INCREF(__pyx_v_notes);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_notes);
      __Pyx_GIVEREF(__pyx_v_notes);
      __Pyx_INCREF(__pyx_v_vels);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_vels);
      __Pyx_GIVEREF(__pyx_v_vels);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":541
 *         """
 *         cdef int i
 *         cdef vector[unsigned char]* m = new vector[unsigned char](3)             # <<<<<<<<<<<<<<
 *         if isinstance(notes, list):
 *             for i in range(len(<list>notes)):
 */
  try {__pyx_t_4 = new std::vector<unsigned char>(3);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_m = __pyx_t_4;

  /* "rtmidi2.pyx":542
 *         cdef int i
 *         cdef vector[unsigned char]* m = new vector[unsigned char](3)
 *         if isinstance(notes, list):             # <<<<<<<<<<<<<<
 *             for i in range(len(<list>notes)):
 *                 m[0][0] = DNOTEON |<unsigned char>(<list>channels)[i]
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyList_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_notes, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "rtmidi2.pyx":543
 *         cdef vector[unsigned char]* m = new vector[unsigned char](3)
 *         if isinstance(notes, list):
 *             for i in range(len(<list>notes)):             # <<<<<<<<<<<<<<
 *                 m[0][0] = DNOTEON |<unsigned char>(<list>channels)[i]
 *                 m[0][1] = <unsigned char>(<list>notes)[i]
 */
    if (unlikely(__pyx_v_notes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = PyList_GET_SIZE(((PyObject *)((PyObject*)__pyx_v_notes))); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "rtmidi2.pyx":544
 *         if isinstance(notes, list):
 *             for i in range(len(<list>notes)):
 *                 m[0][0] = DNOTEON |<unsigned char>(<list>channels)[i]             # <<<<<<<<<<<<<<
 *                 m[0][1] = <unsigned char>(<list>notes)[i]
 *                 m[0][2] = <unsigned char>(<list>vels)[i]
 */
      if (unlikely(__pyx_v_channels == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_channels)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_1); if (unlikely((__pyx_t_8 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      ((__pyx_v_m[0])[0]) = (144 | ((unsigned char)__pyx_t_8));

      /* "rtmidi2.pyx":545
 *             for i in range(len(<list>notes)):
 *                 m[0][0] = DNOTEON |<unsigned char>(<list>channels)[i]
 *                 m[0][1] = <unsigned char>(<list>notes)[i]             # <<<<<<<<<<<<<<
 *                 m[0][2] = <unsigned char>(<list>vels)[i]
 *                 self.thisptr.sendMessage(m)
 */
      if (unlikely(__pyx_v_notes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_notes)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_1); if (unlikely((__pyx_t_8 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      ((__pyx_v_m[0])[1]) = ((unsigned char)__pyx_t_8);

      /* "rtmidi2.pyx":546
 *                 m[0][0] = DNOTEON |<unsigned char>(<list>channels)[i]
 *                 m[0][1] = <unsigned char>(<list>notes)[i]
 *                 m[0][2] = <unsigned char>(<list>vels)[i]             # <<<<<<<<<<<<<<
 *                 self.thisptr.sendMessage(m)
 *         else:
 */
      if (unlikely(__pyx_v_vels == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_vels)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_1); if (unlikely((__pyx_t_8 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      ((__pyx_v_m[0])[2]) = ((unsigned char)__pyx_t_8);

      /* "rtmidi2.pyx":547
 *                 m[0][1] = <unsigned char>(<list>notes)[i]
 *                 m[0][2] = <unsigned char>(<list>vels)[i]
 *                 self.thisptr.sendMessage(m)             # <<<<<<<<<<<<<<
 *         else:
 *             del m
 */
      __pyx_v_self->thisptr->sendMessage(__pyx_v_m);
    }
    goto __pyx_L3;
  }
  /*else*/ {

    /* "rtmidi2.pyx":549
 *                 self.thisptr.sendMessage(m)
 *         else:
 *             del m             # <<<<<<<<<<<<<<
 *             raise NotImplemented("channels, notes and vels should be lists. other containers are not yet implemented")
 *         del m
 */
    delete __pyx_v_m;

    /* "rtmidi2.pyx":550
 *         else:
 *             del m
 *             raise NotImplemented("channels, notes and vels should be lists. other containers are not yet implemented")             # <<<<<<<<<<<<<<
 *         del m
 *     cpdef send_noteoff(self, unsigned char channel, unsigned char midinote):
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_NotImplemented, ((PyObject *)__pyx_k_tuple_31), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "rtmidi2.pyx":551
 *             del m
 *             raise NotImplemented("channels, notes and vels should be lists. other containers are not yet implemented")
 *         del m             # <<<<<<<<<<<<<<
 *     cpdef send_noteoff(self, unsigned char channel, unsigned char midinote):
 *         """
 */
  delete __pyx_v_m;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteon_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_15send_noteon_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_7MidiOut_14send_noteon_many[] = "MidiOut.send_noteon_many(self, channels, notes, vels)\n\n        channels, notes and vels are sequences of integers.\n        ";
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_15send_noteon_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_channels = 0;
  PyObject *__pyx_v_notes = 0;
  PyObject *__pyx_v_vels = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_noteon_many (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__channels,&__pyx_n_s__notes,&__pyx_n_s__vels,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channels)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__notes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteon_many", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__vels)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteon_many", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_noteon_many") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_channels = values[0];
    __pyx_v_notes = values[1];
    __pyx_v_vels = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_noteon_many", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteon_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_7MidiOut_14send_noteon_many(((struct __pyx_obj_7rtmidi2_MidiOut *)__pyx_v_self), __pyx_v_channels, __pyx_v_notes, __pyx_v_vels);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":536
 *         """
 *         self.send_raw(DNOTEON|channel, midinote, velocity)
 *     cpdef send_noteon_many(self, channels, notes, vels):             # <<<<<<<<<<<<<<
 *         """
 *         channels, notes and vels are sequences of integers.
 */

static PyObject *__pyx_pf_7rtmidi2_7MidiOut_14send_noteon_many(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes, PyObject *__pyx_v_vels) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteon_many", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_noteon_many(__pyx_v_self, __pyx_v_channels, __pyx_v_notes, __pyx_v_vels, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteon_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":552
 *             raise NotImplemented("channels, notes and vels should be lists. other containers are not yet implemented")
 *         del m
 *     cpdef send_noteoff(self, unsigned char channel, unsigned char midinote):             # <<<<<<<<<<<<<<
 *         """
 *         NB: channel -> 0-15
 */

static PyObject *__pyx_pw_7rtmidi2_7MidiOut_17send_noteoff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_7MidiOut_send_noteoff(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_midinote, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteoff", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_noteoff); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_17send_noteoff)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_channel); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_midinote); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":556
 *         NB: channel -> 0-15
 *         """
 *         self.send_raw(DNOTEOFF|channel, midinote, 0)             # <<<<<<<<<<<<<<
 *     cpdef send_noteoff_many(self, channels, notes):
 *         """
 */
  __pyx_f_7rtmidi2_7MidiOut_send_raw(__pyx_v_self, (128 | __pyx_v_channel), __pyx_v_midinote, 0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_17send_noteoff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_7MidiOut_16send_noteoff[] = "MidiOut.send_noteoff(self, unsigned char channel, unsigned char midinote)\n\n        NB: channel -> 0-15\n        ";
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_17send_noteoff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned char __pyx_v_channel;
  unsigned char __pyx_v_midinote;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_noteoff (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__channel,&__pyx_n_s__midinote,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__midinote)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteoff", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_noteoff") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_channel = __Pyx_PyInt_AsUnsignedChar(values[0]); if (unlikely((__pyx_v_channel == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_midinote = __Pyx_PyInt_AsUnsignedChar(values[1]); if (unlikely((__pyx_v_midinote == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_noteoff", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_7MidiOut_16send_noteoff(((struct __pyx_obj_7rtmidi2_MidiOut *)__pyx_v_self), __pyx_v_channel, __pyx_v_midinote);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":552
 *             raise NotImplemented("channels, notes and vels should be lists. other containers are not yet implemented")
 *         del m
 *     cpdef send_noteoff(self, unsigned char channel, unsigned char midinote):             # <<<<<<<<<<<<<<
 *         """
 *         NB: channel -> 0-15
 */

static PyObject *__pyx_pf_7rtmidi2_7MidiOut_16send_noteoff(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, unsigned char __pyx_v_channel, unsigned char __pyx_v_midinote) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteoff", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_noteoff(__pyx_v_self, __pyx_v_channel, __pyx_v_midinote, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":557
 *         """
 *         self.send_raw(DNOTEOFF|channel, midinote, 0)
 *     cpdef send_noteoff_many(self, channels, notes):             # <<<<<<<<<<<<<<
 *         """
 *         channels: a list of channels, or a single integer channel
 */

static PyObject *__pyx_pw_7rtmidi2_7MidiOut_19send_noteoff_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7rtmidi2_7MidiOut_send_noteoff_many(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_v0;
  std::vector<unsigned char> *__pyx_v_m;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<unsigned char> *__pyx_t_4;
  int __pyx_t_5;
  unsigned char __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteoff_many", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__send_noteoff_many); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_19send_noteoff_many)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_channels);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_channels);
      __Pyx_GIVEREF(__pyx_v_channels);
      __Pyx_INCREF(__pyx_v_notes);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_notes);
      __Pyx_GIVEREF(__pyx_v_notes);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rtmidi2.pyx":565
 *         """
 *         cdef int i, channel, v0
 *         cdef vector[unsigned char]* m = new vector[unsigned char](3)             # <<<<<<<<<<<<<<
 *         m[0][2] = 0
 *         if isinstance(channels, int):
 */
  try {__pyx_t_4 = new std::vector<unsigned char>(3);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_m = __pyx_t_4;

  /* "rtmidi2.pyx":566
 *         cdef int i, channel, v0
 *         cdef vector[unsigned char]* m = new vector[unsigned char](3)
 *         m[0][2] = 0             # <<<<<<<<<<<<<<
 *         if isinstance(channels, int):
 *             v0 = DNOTEOFF | <unsigned char>channels
 */
  ((__pyx_v_m[0])[2]) = 0;

  /* "rtmidi2.pyx":567
 *         cdef vector[unsigned char]* m = new vector[unsigned char](3)
 *         m[0][2] = 0
 *         if isinstance(channels, int):             # <<<<<<<<<<<<<<
 *             v0 = DNOTEOFF | <unsigned char>channels
 *             if isinstance(notes, list):
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyInt_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_channels, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "rtmidi2.pyx":568
 *         m[0][2] = 0
 *         if isinstance(channels, int):
 *             v0 = DNOTEOFF | <unsigned char>channels             # <<<<<<<<<<<<<<
 *             if isinstance(notes, list):
 *                 for i in range(len(<list>notes)):
 */
    __pyx_t_6 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_channels); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v0 = (128 | ((unsigned char)__pyx_t_6));

    /* "rtmidi2.pyx":569
 *         if isinstance(channels, int):
 *             v0 = DNOTEOFF | <unsigned char>channels
 *             if isinstance(notes, list):             # <<<<<<<<<<<<<<
 *                 for i in range(len(<list>notes)):
 *                     m[0][0] = v0
 */
    __pyx_t_1 = ((PyObject *)((PyObject*)(&PyList_Type)));
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_notes, __pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {

      /* "rtmidi2.pyx":570
 *             v0 = DNOTEOFF | <unsigned char>channels
 *             if isinstance(notes, list):
 *                 for i in range(len(<list>notes)):             # <<<<<<<<<<<<<<
 *                     m[0][0] = v0
 *                     m[0][1] = <unsigned char>(<list>notes)[i]
 */
      if (unlikely(__pyx_v_notes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_7 = PyList_GET_SIZE(((PyObject *)((PyObject*)__pyx_v_notes))); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "rtmidi2.pyx":571
 *             if isinstance(notes, list):
 *                 for i in range(len(<list>notes)):
 *                     m[0][0] = v0             # <<<<<<<<<<<<<<
 *                     m[0][1] = <unsigned char>(<list>notes)[i]
 *                     self.thisptr.sendMessage(m)
 */
        ((__pyx_v_m[0])[0]) = __pyx_v_v0;

        /* "rtmidi2.pyx":572
 *                 for i in range(len(<list>notes)):
 *                     m[0][0] = v0
 *                     m[0][1] = <unsigned char>(<list>notes)[i]             # <<<<<<<<<<<<<<
 *                     self.thisptr.sendMessage(m)
 *             else:
 */
        if (unlikely(__pyx_v_notes == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_notes)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        ((__pyx_v_m[0])[1]) = ((unsigned char)__pyx_t_6);

        /* "rtmidi2.pyx":573
 *                     m[0][0] = v0
 *                     m[0][1] = <unsigned char>(<list>notes)[i]
 *                     self.thisptr.sendMessage(m)             # <<<<<<<<<<<<<<
 *             else:
 *                 del m
 */
        __pyx_v_self->thisptr->sendMessage(__pyx_v_m);
      }
      goto __pyx_L4;
    }
    /*else*/ {

      /* "rtmidi2.pyx":575
 *                     self.thisptr.sendMessage(m)
 *             else:
 *                 del m             # <<<<<<<<<<<<<<
 *                 raise NotImplemented("only lists implemented right now")
 *         elif isinstance(channels, list):
 */
      delete __pyx_v_m;

      /* "rtmidi2.pyx":576
 *             else:
 *                 del m
 *                 raise NotImplemented("only lists implemented right now")             # <<<<<<<<<<<<<<
 *         elif isinstance(channels, list):
 *             for i in range(len(<list>notes)):
 */
      __pyx_t_1 = PyObject_Call(__pyx_builtin_NotImplemented, ((PyObject *)__pyx_k_tuple_32), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
    goto __pyx_L3;
  }

  /* "rtmidi2.pyx":577
 *                 del m
 *                 raise NotImplemented("only lists implemented right now")
 *         elif isinstance(channels, list):             # <<<<<<<<<<<<<<
 *             for i in range(len(<list>notes)):
 *                 m[0][0] = DNOTEOFF | <unsigned char>(<list>channels)[i]
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyList_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_channels, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "rtmidi2.pyx":578
 *                 raise NotImplemented("only lists implemented right now")
 *         elif isinstance(channels, list):
 *             for i in range(len(<list>notes)):             # <<<<<<<<<<<<<<
 *                 m[0][0] = DNOTEOFF | <unsigned char>(<list>channels)[i]
 *                 m[0][1] = <unsigned char>(<list>notes)[i]
 */
    if (unlikely(__pyx_v_notes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_7 = PyList_GET_SIZE(((PyObject *)((PyObject*)__pyx_v_notes))); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "rtmidi2.pyx":579
 *         elif isinstance(channels, list):
 *             for i in range(len(<list>notes)):
 *                 m[0][0] = DNOTEOFF | <unsigned char>(<list>channels)[i]             # <<<<<<<<<<<<<<
 *                 m[0][1] = <unsigned char>(<list>notes)[i]
 *                 self.thisptr.sendMessage(m)
 */
      if (unlikely(__pyx_v_channels == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_channels)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      ((__pyx_v_m[0])[0]) = (128 | ((unsigned char)__pyx_t_6));

      /* "rtmidi2.pyx":580
 *             for i in range(len(<list>notes)):
 *                 m[0][0] = DNOTEOFF | <unsigned char>(<list>channels)[i]
 *                 m[0][1] = <unsigned char>(<list>notes)[i]             # <<<<<<<<<<<<<<
 *                 self.thisptr.sendMessage(m)
 *         del m
 */
      if (unlikely(__pyx_v_notes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((PyObject*)__pyx_v_notes)), __pyx_v_i, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      ((__pyx_v_m[0])[1]) = ((unsigned char)__pyx_t_6);

      /* "rtmidi2.pyx":581
 *                 m[0][0] = DNOTEOFF | <unsigned char>(<list>channels)[i]
 *                 m[0][1] = <unsigned char>(<list>notes)[i]
 *                 self.thisptr.sendMessage(m)             # <<<<<<<<<<<<<<
 *         del m
 *         return None
 */
      __pyx_v_self->thisptr->sendMessage(__pyx_v_m);
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "rtmidi2.pyx":582
 *                 m[0][1] = <unsigned char>(<list>notes)[i]
 *                 self.thisptr.sendMessage(m)
 *         del m             # <<<<<<<<<<<<<<
 *         return None
 */
  delete __pyx_v_m;

  /* "rtmidi2.pyx":583
 *                 self.thisptr.sendMessage(m)
 *         del m
 *         return None             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteoff_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_19send_noteoff_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7rtmidi2_7MidiOut_18send_noteoff_many[] = "MidiOut.send_noteoff_many(self, channels, notes)\n\n        channels: a list of channels, or a single integer channel\n        notes:    a list of midinotes to be released\n\n        NB: channel -> 0-15\n        ";
static PyObject *__pyx_pw_7rtmidi2_7MidiOut_19send_noteoff_many(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_channels = 0;
  PyObject *__pyx_v_notes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("send_noteoff_many (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__channels,&__pyx_n_s__notes,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channels)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__notes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send_noteoff_many", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "send_noteoff_many") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_channels = values[0];
    __pyx_v_notes = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_noteoff_many", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteoff_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rtmidi2_7MidiOut_18send_noteoff_many(((struct __pyx_obj_7rtmidi2_MidiOut *)__pyx_v_self), __pyx_v_channels, __pyx_v_notes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rtmidi2.pyx":557
 *         """
 *         self.send_raw(DNOTEOFF|channel, midinote, 0)
 *     cpdef send_noteoff_many(self, channels, notes):             # <<<<<<<<<<<<<<
 *         """
 *         channels: a list of channels, or a single integer channel
 */

static PyObject *__pyx_pf_7rtmidi2_7MidiOut_18send_noteoff_many(struct __pyx_obj_7rtmidi2_MidiOut *__pyx_v_self, PyObject *__pyx_v_channels, PyObject *__pyx_v_notes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send_noteoff_many", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rtmidi2_MidiOut *)__pyx_v_self->__pyx_base.__pyx_vtab)->send_noteoff_many(__pyx_v_self, __pyx_v_channels, __pyx_v_notes, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rtmidi2.MidiOut.send_noteoff_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7rtmidi2_MidiBase __pyx_vtable_7rtmidi2_MidiBase;

static PyObject *__pyx_tp_new_7rtmidi2_MidiBase(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rtmidi2_MidiBase *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_7rtmidi2_MidiBase *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rtmidi2_MidiBase;
  return o;
}

static void __pyx_tp_dealloc_7rtmidi2_MidiBase(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7rtmidi2_8MidiBase_ports(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rtmidi2_8MidiBase_5ports_1__get__(o);
}

static PyMethodDef __pyx_methods_7rtmidi2_MidiBase[] = {
  {__Pyx_NAMESTR("open_port"), (PyCFunction)__pyx_pw_7rtmidi2_8MidiBase_1open_port, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_8MidiBase_open_port)},
  {__Pyx_NAMESTR("open_virtual_port"), (PyCFunction)__pyx_pw_7rtmidi2_8MidiBase_3open_virtual_port, METH_O, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_8MidiBase_2open_virtual_port)},
  {__Pyx_NAMESTR("close_port"), (PyCFunction)__pyx_pw_7rtmidi2_8MidiBase_5close_port, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_8MidiBase_4close_port)},
  {__Pyx_NAMESTR("ports_matching"), (PyCFunction)__pyx_pw_7rtmidi2_8MidiBase_7ports_matching, METH_O, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_8MidiBase_6ports_matching)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rtmidi2_MidiBase[] = {
  {(char *)"ports", __pyx_getprop_7rtmidi2_8MidiBase_ports, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MidiBase = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MidiBase = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MidiBase = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MidiBase = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_7rtmidi2_MidiBase = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("rtmidi2.MidiBase"), /*tp_name*/
  sizeof(struct __pyx_obj_7rtmidi2_MidiBase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rtmidi2_MidiBase, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MidiBase, /*tp_as_number*/
  &__pyx_tp_as_sequence_MidiBase, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MidiBase, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MidiBase, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rtmidi2_MidiBase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rtmidi2_MidiBase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rtmidi2_MidiBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_7rtmidi2_MidiIn __pyx_vtable_7rtmidi2_MidiIn;

static PyObject *__pyx_tp_new_7rtmidi2_MidiIn(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rtmidi2_MidiIn *p;
  PyObject *o = __pyx_tp_new_7rtmidi2_MidiBase(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_7rtmidi2_MidiIn *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rtmidi2_MidiBase*)__pyx_vtabptr_7rtmidi2_MidiIn;
  p->py_callback = Py_None; Py_INCREF(Py_None);
  if (__pyx_pw_7rtmidi2_6MidiIn_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7rtmidi2_MidiIn(PyObject *o) {
  struct __pyx_obj_7rtmidi2_MidiIn *p = (struct __pyx_obj_7rtmidi2_MidiIn *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7rtmidi2_6MidiIn_5__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->py_callback);
  __pyx_tp_dealloc_7rtmidi2_MidiBase(o);
}

static int __pyx_tp_traverse_7rtmidi2_MidiIn(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rtmidi2_MidiIn *p = (struct __pyx_obj_7rtmidi2_MidiIn *)o;
  e = ((likely(__pyx_ptype_7rtmidi2_MidiBase)) ? ((__pyx_ptype_7rtmidi2_MidiBase->tp_traverse) ? __pyx_ptype_7rtmidi2_MidiBase->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7rtmidi2_MidiIn)); if (e) return e;
  if (p->py_callback) {
    e = (*v)(p->py_callback, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rtmidi2_MidiIn(PyObject *o) {
  struct __pyx_obj_7rtmidi2_MidiIn *p = (struct __pyx_obj_7rtmidi2_MidiIn *)o;
  PyObject* tmp;
  if (likely(__pyx_ptype_7rtmidi2_MidiBase)) { if (__pyx_ptype_7rtmidi2_MidiBase->tp_clear) __pyx_ptype_7rtmidi2_MidiBase->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7rtmidi2_MidiIn);
  tmp = ((PyObject*)p->py_callback);
  p->py_callback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7rtmidi2_6MidiIn_callback(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rtmidi2_6MidiIn_8callback_1__get__(o);
}

static int __pyx_setprop_7rtmidi2_6MidiIn_callback(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rtmidi2_6MidiIn_8callback_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7rtmidi2_MidiIn[] = {
  {__Pyx_NAMESTR("ignore_types"), (PyCFunction)__pyx_pw_7rtmidi2_6MidiIn_7ignore_types, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_6MidiIn_6ignore_types)},
  {__Pyx_NAMESTR("get_message"), (PyCFunction)__pyx_pw_7rtmidi2_6MidiIn_9get_message, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_6MidiIn_8get_message)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rtmidi2_MidiIn[] = {
  {(char *)"callback", __pyx_getprop_7rtmidi2_6MidiIn_callback, __pyx_setprop_7rtmidi2_6MidiIn_callback, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MidiIn = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MidiIn = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MidiIn = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MidiIn = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_7rtmidi2_MidiIn = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("rtmidi2.MidiIn"), /*tp_name*/
  sizeof(struct __pyx_obj_7rtmidi2_MidiIn), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rtmidi2_MidiIn, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MidiIn, /*tp_as_number*/
  &__pyx_tp_as_sequence_MidiIn, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MidiIn, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MidiIn, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("MidiIn(clientname='RTMIDI-IN', queuesize=100)"), /*tp_doc*/
  __pyx_tp_traverse_7rtmidi2_MidiIn, /*tp_traverse*/
  __pyx_tp_clear_7rtmidi2_MidiIn, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rtmidi2_MidiIn, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rtmidi2_MidiIn, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rtmidi2_6MidiIn_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rtmidi2_MidiIn, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_7rtmidi2_MidiInMulti __pyx_vtable_7rtmidi2_MidiInMulti;

static PyObject *__pyx_tp_new_7rtmidi2_MidiInMulti(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rtmidi2_MidiInMulti *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_7rtmidi2_MidiInMulti *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rtmidi2_MidiInMulti;
  p->clientname = Py_None; Py_INCREF(Py_None);
  p->py_callback = Py_None; Py_INCREF(Py_None);
  p->openports = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->hascallback = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pw_7rtmidi2_11MidiInMulti_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7rtmidi2_MidiInMulti(PyObject *o) {
  struct __pyx_obj_7rtmidi2_MidiInMulti *p = (struct __pyx_obj_7rtmidi2_MidiInMulti *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7rtmidi2_11MidiInMulti_5__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->clientname);
  Py_CLEAR(p->py_callback);
  Py_CLEAR(p->openports);
  Py_CLEAR(p->hascallback);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7rtmidi2_MidiInMulti(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rtmidi2_MidiInMulti *p = (struct __pyx_obj_7rtmidi2_MidiInMulti *)o;
  if (p->clientname) {
    e = (*v)(p->clientname, a); if (e) return e;
  }
  if (p->py_callback) {
    e = (*v)(p->py_callback, a); if (e) return e;
  }
  if (p->openports) {
    e = (*v)(p->openports, a); if (e) return e;
  }
  if (p->hascallback) {
    e = (*v)(p->hascallback, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rtmidi2_MidiInMulti(PyObject *o) {
  struct __pyx_obj_7rtmidi2_MidiInMulti *p = (struct __pyx_obj_7rtmidi2_MidiInMulti *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->clientname);
  p->clientname = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_callback);
  p->py_callback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->openports);
  p->openports = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->hascallback);
  p->hascallback = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7rtmidi2_11MidiInMulti_ports(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rtmidi2_11MidiInMulti_5ports_1__get__(o);
}

static PyObject *__pyx_getprop_7rtmidi2_11MidiInMulti_callback(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rtmidi2_11MidiInMulti_8callback_1__get__(o);
}

static int __pyx_setprop_7rtmidi2_11MidiInMulti_callback(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rtmidi2_11MidiInMulti_8callback_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rtmidi2_11MidiInMulti_clientname(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rtmidi2_11MidiInMulti_10clientname_1__get__(o);
}

static PyMethodDef __pyx_methods_7rtmidi2_MidiInMulti[] = {
  {__Pyx_NAMESTR("get_openports"), (PyCFunction)__pyx_pw_7rtmidi2_11MidiInMulti_9get_openports, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_11MidiInMulti_8get_openports)},
  {__Pyx_NAMESTR("ports_matching"), (PyCFunction)__pyx_pw_7rtmidi2_11MidiInMulti_11ports_matching, METH_O, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_11MidiInMulti_10ports_matching)},
  {__Pyx_NAMESTR("open_port"), (PyCFunction)__pyx_pw_7rtmidi2_11MidiInMulti_13open_port, METH_O, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_11MidiInMulti_12open_port)},
  {__Pyx_NAMESTR("open_ports"), (PyCFunction)__pyx_pw_7rtmidi2_11MidiInMulti_15open_ports, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_11MidiInMulti_14open_ports)},
  {__Pyx_NAMESTR("close_ports"), (PyCFunction)__pyx_pw_7rtmidi2_11MidiInMulti_17close_ports, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_11MidiInMulti_16close_ports)},
  {__Pyx_NAMESTR("get_message"), (PyCFunction)__pyx_pw_7rtmidi2_11MidiInMulti_19get_message, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_11MidiInMulti_18get_message)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rtmidi2_MidiInMulti[] = {
  {(char *)"ports", __pyx_getprop_7rtmidi2_11MidiInMulti_ports, 0, 0, 0},
  {(char *)"callback", __pyx_getprop_7rtmidi2_11MidiInMulti_callback, __pyx_setprop_7rtmidi2_11MidiInMulti_callback, 0, 0},
  {(char *)"clientname", __pyx_getprop_7rtmidi2_11MidiInMulti_clientname, 0, __Pyx_DOCSTR(__pyx_k_33), 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MidiInMulti = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MidiInMulti = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MidiInMulti = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MidiInMulti = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_7rtmidi2_MidiInMulti = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("rtmidi2.MidiInMulti"), /*tp_name*/
  sizeof(struct __pyx_obj_7rtmidi2_MidiInMulti), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rtmidi2_MidiInMulti, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_7rtmidi2_11MidiInMulti_7__repr__, /*tp_repr*/
  &__pyx_tp_as_number_MidiInMulti, /*tp_as_number*/
  &__pyx_tp_as_sequence_MidiInMulti, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MidiInMulti, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MidiInMulti, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("MidiInMulti(clientname='RTMIDI-IN', queuesize=100)"), /*tp_doc*/
  __pyx_tp_traverse_7rtmidi2_MidiInMulti, /*tp_traverse*/
  __pyx_tp_clear_7rtmidi2_MidiInMulti, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rtmidi2_MidiInMulti, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rtmidi2_MidiInMulti, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rtmidi2_11MidiInMulti_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rtmidi2_MidiInMulti, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_7rtmidi2_MidiOut_slower __pyx_vtable_7rtmidi2_MidiOut_slower;

static PyObject *__pyx_tp_new_7rtmidi2_MidiOut_slower(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rtmidi2_MidiOut_slower *p;
  PyObject *o = __pyx_tp_new_7rtmidi2_MidiBase(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_7rtmidi2_MidiOut_slower *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rtmidi2_MidiBase*)__pyx_vtabptr_7rtmidi2_MidiOut_slower;
  if (__pyx_pw_7rtmidi2_14MidiOut_slower_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7rtmidi2_MidiOut_slower(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7rtmidi2_14MidiOut_slower_5__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_7rtmidi2_MidiBase(o);
}

static PyMethodDef __pyx_methods_7rtmidi2_MidiOut_slower[] = {
  {__Pyx_NAMESTR("send_message"), (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_7send_message, METH_O, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_14MidiOut_slower_6send_message)},
  {__Pyx_NAMESTR("send_cc"), (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_9send_cc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_14MidiOut_slower_8send_cc)},
  {__Pyx_NAMESTR("send_messages"), (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_11send_messages, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_14MidiOut_slower_10send_messages)},
  {__Pyx_NAMESTR("send_noteon"), (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_13send_noteon, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_14MidiOut_slower_12send_noteon)},
  {__Pyx_NAMESTR("send_noteon_many"), (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_15send_noteon_many, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_14MidiOut_slower_14send_noteon_many)},
  {__Pyx_NAMESTR("send_noteoff"), (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_17send_noteoff, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_14MidiOut_slower_16send_noteoff)},
  {__Pyx_NAMESTR("send_noteoff_many"), (PyCFunction)__pyx_pw_7rtmidi2_14MidiOut_slower_19send_noteoff_many, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_14MidiOut_slower_18send_noteoff_many)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MidiOut_slower = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MidiOut_slower = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MidiOut_slower = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MidiOut_slower = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_7rtmidi2_MidiOut_slower = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("rtmidi2.MidiOut_slower"), /*tp_name*/
  sizeof(struct __pyx_obj_7rtmidi2_MidiOut_slower), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rtmidi2_MidiOut_slower, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MidiOut_slower, /*tp_as_number*/
  &__pyx_tp_as_sequence_MidiOut_slower, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MidiOut_slower, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MidiOut_slower, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("MidiOut_slower()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rtmidi2_MidiOut_slower, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rtmidi2_14MidiOut_slower_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rtmidi2_MidiOut_slower, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_7rtmidi2_MidiOut __pyx_vtable_7rtmidi2_MidiOut;

static PyObject *__pyx_tp_new_7rtmidi2_MidiOut(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rtmidi2_MidiOut *p;
  PyObject *o = __pyx_tp_new_7rtmidi2_MidiBase(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_7rtmidi2_MidiOut *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rtmidi2_MidiBase*)__pyx_vtabptr_7rtmidi2_MidiOut;
  if (__pyx_pw_7rtmidi2_7MidiOut_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7rtmidi2_MidiOut(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7rtmidi2_7MidiOut_5__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_7rtmidi2_MidiBase(o);
}

static PyMethodDef __pyx_methods_7rtmidi2_MidiOut[] = {
  {__Pyx_NAMESTR("send_message"), (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_7send_message, METH_O, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_7MidiOut_6send_message)},
  {__Pyx_NAMESTR("send_cc"), (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_9send_cc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_7MidiOut_8send_cc)},
  {__Pyx_NAMESTR("send_messages"), (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_11send_messages, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_7MidiOut_10send_messages)},
  {__Pyx_NAMESTR("send_noteon"), (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_13send_noteon, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_7MidiOut_12send_noteon)},
  {__Pyx_NAMESTR("send_noteon_many"), (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_15send_noteon_many, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_7MidiOut_14send_noteon_many)},
  {__Pyx_NAMESTR("send_noteoff"), (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_17send_noteoff, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_7MidiOut_16send_noteoff)},
  {__Pyx_NAMESTR("send_noteoff_many"), (PyCFunction)__pyx_pw_7rtmidi2_7MidiOut_19send_noteoff_many, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7rtmidi2_7MidiOut_18send_noteoff_many)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MidiOut = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MidiOut = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MidiOut = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MidiOut = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_7rtmidi2_MidiOut = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("rtmidi2.MidiOut"), /*tp_name*/
  sizeof(struct __pyx_obj_7rtmidi2_MidiOut), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rtmidi2_MidiOut, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MidiOut, /*tp_as_number*/
  &__pyx_tp_as_sequence_MidiOut, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MidiOut, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MidiOut, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("MidiOut()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rtmidi2_MidiOut, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rtmidi2_7MidiOut_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rtmidi2_MidiOut, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_7rtmidi2___pyx_scope_struct____repr__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *)o);
  p->__pyx_v_allports = 0;
  p->__pyx_v_self = 0;
  return o;
}

static void __pyx_tp_dealloc_7rtmidi2___pyx_scope_struct____repr__(PyObject *o) {
  struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *p = (struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *)o;
  Py_CLEAR(p->__pyx_v_allports);
  Py_CLEAR(p->__pyx_v_self);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7rtmidi2___pyx_scope_struct____repr__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *p = (struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *)o;
  if (p->__pyx_v_allports) {
    e = (*v)(p->__pyx_v_allports, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rtmidi2___pyx_scope_struct____repr__(PyObject *o) {
  struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *p = (struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->__pyx_v_allports);
  p->__pyx_v_allports = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_7rtmidi2_MidiInMulti *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rtmidi2___pyx_scope_struct____repr__[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___pyx_scope_struct____repr__ = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___pyx_scope_struct____repr__ = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___pyx_scope_struct____repr__ = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___pyx_scope_struct____repr__ = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_7rtmidi2___pyx_scope_struct____repr__ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("rtmidi2.__pyx_scope_struct____repr__"), /*tp_name*/
  sizeof(struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rtmidi2___pyx_scope_struct____repr__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___pyx_scope_struct____repr__, /*tp_as_number*/
  &__pyx_tp_as_sequence___pyx_scope_struct____repr__, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___pyx_scope_struct____repr__, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___pyx_scope_struct____repr__, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rtmidi2___pyx_scope_struct____repr__, /*tp_traverse*/
  __pyx_tp_clear_7rtmidi2___pyx_scope_struct____repr__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rtmidi2___pyx_scope_struct____repr__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rtmidi2___pyx_scope_struct____repr__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_7rtmidi2___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *)o);
  p->__pyx_outer_scope = 0;
  p->__pyx_v_port = 0;
  p->__pyx_t_0 = 0;
  return o;
}

static void __pyx_tp_dealloc_7rtmidi2___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *)o;
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_port);
  Py_CLEAR(p->__pyx_t_0);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7rtmidi2___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_port) {
    e = (*v)(p->__pyx_v_port, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rtmidi2___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_7rtmidi2___pyx_scope_struct____repr__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_port);
  p->__pyx_v_port = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rtmidi2___pyx_scope_struct_1_genexpr[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___pyx_scope_struct_1_genexpr = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___pyx_scope_struct_1_genexpr = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___pyx_scope_struct_1_genexpr = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___pyx_scope_struct_1_genexpr = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_7rtmidi2___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("rtmidi2.__pyx_scope_struct_1_genexpr"), /*tp_name*/
  sizeof(struct __pyx_obj_7rtmidi2___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rtmidi2___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___pyx_scope_struct_1_genexpr, /*tp_as_number*/
  &__pyx_tp_as_sequence___pyx_scope_struct_1_genexpr, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___pyx_scope_struct_1_genexpr, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___pyx_scope_struct_1_genexpr, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rtmidi2___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_7rtmidi2___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rtmidi2___pyx_scope_struct_1_genexpr, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rtmidi2___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("rtmidi2"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_kp_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 0},
  {&__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
  {&__pyx_kp_s_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 0, 1, 0},
  {&__pyx_kp_s_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 1, 0},
  {&__pyx_kp_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 0},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_kp_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 0},
  {&__pyx_kp_s_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 0, 1, 0},
  {&__pyx_kp_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 0},
  {&__pyx_kp_s_24, __pyx_k_24, sizeof(__pyx_k_24), 0, 0, 1, 0},
  {&__pyx_kp_s_26, __pyx_k_26, sizeof(__pyx_k_26), 0, 0, 1, 0},
  {&__pyx_kp_s_28, __pyx_k_28, sizeof(__pyx_k_28), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_30, __pyx_k_30, sizeof(__pyx_k_30), 0, 0, 1, 0},
  {&__pyx_kp_s_36, __pyx_k_36, sizeof(__pyx_k_36), 0, 0, 1, 0},
  {&__pyx_kp_s_39, __pyx_k_39, sizeof(__pyx_k_39), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_n_s__CC, __pyx_k__CC, sizeof(__pyx_k__CC), 0, 0, 1, 1},
  {&__pyx_n_s__NOTEOFF, __pyx_k__NOTEOFF, sizeof(__pyx_k__NOTEOFF), 0, 0, 1, 1},
  {&__pyx_n_s__NOTEON, __pyx_k__NOTEON, sizeof(__pyx_k__NOTEON), 0, 0, 1, 1},
  {&__pyx_n_s__NotImplemented, __pyx_k__NotImplemented, sizeof(__pyx_k__NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s__PITCHWHEEL, __pyx_k__PITCHWHEEL, sizeof(__pyx_k__PITCHWHEEL), 0, 0, 1, 1},
  {&__pyx_n_s__PROGCHANGE, __pyx_k__PROGCHANGE, sizeof(__pyx_k__PROGCHANGE), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s__UNKNOWN, __pyx_k__UNKNOWN, sizeof(__pyx_k__UNKNOWN), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___notenames, __pyx_k___notenames, sizeof(__pyx_k___notenames), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__callback, __pyx_k__callback, sizeof(__pyx_k__callback), 0, 0, 1, 1},
  {&__pyx_n_s__cc, __pyx_k__cc, sizeof(__pyx_k__cc), 0, 0, 1, 1},
  {&__pyx_n_s__ch, __pyx_k__ch, sizeof(__pyx_k__ch), 0, 0, 1, 1},
  {&__pyx_n_s__channel, __pyx_k__channel, sizeof(__pyx_k__channel), 0, 0, 1, 1},
  {&__pyx_n_s__channels, __pyx_k__channels, sizeof(__pyx_k__channels), 0, 0, 1, 1},
  {&__pyx_n_s__clientname, __pyx_k__clientname, sizeof(__pyx_k__clientname), 0, 0, 1, 1},
  {&__pyx_n_s__close_ports, __pyx_k__close_ports, sizeof(__pyx_k__close_ports), 0, 0, 1, 1},
  {&__pyx_n_s__enumerate, __pyx_k__enumerate, sizeof(__pyx_k__enumerate), 0, 0, 1, 1},
  {&__pyx_n_s__fnmatch, __pyx_k__fnmatch, sizeof(__pyx_k__fnmatch), 0, 0, 1, 1},
  {&__pyx_n_s__gettime, __pyx_k__gettime, sizeof(__pyx_k__gettime), 0, 0, 1, 1},
  {&__pyx_n_s__index, __pyx_k__index, sizeof(__pyx_k__index), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__m, __pyx_k__m, sizeof(__pyx_k__m), 0, 0, 1, 1},
  {&__pyx_n_s__messages, __pyx_k__messages, sizeof(__pyx_k__messages), 0, 0, 1, 1},
  {&__pyx_n_s__messagetype, __pyx_k__messagetype, sizeof(__pyx_k__messagetype), 0, 0, 1, 1},
  {&__pyx_n_s__midi2note, __pyx_k__midi2note, sizeof(__pyx_k__midi2note), 0, 0, 1, 1},
  {&__pyx_n_s__midi_sense, __pyx_k__midi_sense, sizeof(__pyx_k__midi_sense), 0, 0, 1, 1},
  {&__pyx_n_s__midi_sysex, __pyx_k__midi_sysex, sizeof(__pyx_k__midi_sysex), 0, 0, 1, 1},
  {&__pyx_n_s__midi_time, __pyx_k__midi_time, sizeof(__pyx_k__midi_time), 0, 0, 1, 1},
  {&__pyx_n_s__mididump, __pyx_k__mididump, sizeof(__pyx_k__mididump), 0, 0, 1, 1},
  {&__pyx_n_s__mididump_callback, __pyx_k__mididump_callback, sizeof(__pyx_k__mididump_callback), 0, 0, 1, 1},
  {&__pyx_n_s__midinote, __pyx_k__midinote, sizeof(__pyx_k__midinote), 0, 0, 1, 1},
  {&__pyx_n_s__msg, __pyx_k__msg, sizeof(__pyx_k__msg), 0, 0, 1, 1},
  {&__pyx_n_s__msgt, __pyx_k__msgt, sizeof(__pyx_k__msgt), 0, 0, 1, 1},
  {&__pyx_n_s__msgtstr, __pyx_k__msgtstr, sizeof(__pyx_k__msgtstr), 0, 0, 1, 1},
  {&__pyx_n_s__msgtype, __pyx_k__msgtype, sizeof(__pyx_k__msgtype), 0, 0, 1, 1},
  {&__pyx_n_s__msgtype2str, __pyx_k__msgtype2str, sizeof(__pyx_k__msgtype2str), 0, 0, 1, 1},
  {&__pyx_n_s__notename, __pyx_k__notename, sizeof(__pyx_k__notename), 0, 0, 1, 1},
  {&__pyx_n_s__notes, __pyx_k__notes, sizeof(__pyx_k__notes), 0, 0, 1, 1},
  {&__pyx_n_s__octave, __pyx_k__octave, sizeof(__pyx_k__octave), 0, 0, 1, 1},
  {&__pyx_n_s__open_port, __pyx_k__open_port, sizeof(__pyx_k__open_port), 0, 0, 1, 1},
  {&__pyx_n_s__open_ports, __pyx_k__open_ports, sizeof(__pyx_k__open_ports), 0, 0, 1, 1},
  {&__pyx_n_s__pattern, __pyx_k__pattern, sizeof(__pyx_k__pattern), 0, 0, 1, 1},
  {&__pyx_n_s__pitchindex, __pyx_k__pitchindex, sizeof(__pyx_k__pitchindex), 0, 0, 1, 1},
  {&__pyx_n_s__port, __pyx_k__port, sizeof(__pyx_k__port), 0, 0, 1, 1},
  {&__pyx_n_s__port_pattern, __pyx_k__port_pattern, sizeof(__pyx_k__port_pattern), 0, 0, 1, 1},
  {&__pyx_n_s__ports, __pyx_k__ports, sizeof(__pyx_k__ports), 0, 0, 1, 1},
  {&__pyx_n_s__ports_matching, __pyx_k__ports_matching, sizeof(__pyx_k__ports_matching), 0, 0, 1, 1},
  {&__pyx_n_s__queuesize, __pyx_k__queuesize, sizeof(__pyx_k__queuesize), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__rtmidi2, __pyx_k__rtmidi2, sizeof(__pyx_k__rtmidi2), 0, 0, 1, 1},
  {&__pyx_n_s__send_cc, __pyx_k__send_cc, sizeof(__pyx_k__send_cc), 0, 0, 1, 1},
  {&__pyx_n_s__send_message, __pyx_k__send_message, sizeof(__pyx_k__send_message), 0, 0, 1, 1},
  {&__pyx_n_s__send_messages, __pyx_k__send_messages, sizeof(__pyx_k__send_messages), 0, 0, 1, 1},
  {&__pyx_n_s__send_noteoff, __pyx_k__send_noteoff, sizeof(__pyx_k__send_noteoff), 0, 0, 1, 1},
  {&__pyx_n_s__send_noteoff_many, __pyx_k__send_noteoff_many, sizeof(__pyx_k__send_noteoff_many), 0, 0, 1, 1},
  {&__pyx_n_s__send_noteon, __pyx_k__send_noteon, sizeof(__pyx_k__send_noteon), 0, 0, 1, 1},
  {&__pyx_n_s__send_noteon_many, __pyx_k__send_noteon_many, sizeof(__pyx_k__send_noteon_many), 0, 0, 1, 1},
  {&__pyx_n_s__set_callback, __pyx_k__set_callback, sizeof(__pyx_k__set_callback), 0, 0, 1, 1},
  {&__pyx_n_s__split, __pyx_k__split, sizeof(__pyx_k__split), 0, 0, 1, 1},
  {&__pyx_n_s__splitchannel, __pyx_k__splitchannel, sizeof(__pyx_k__splitchannel), 0, 0, 1, 1},
  {&__pyx_n_s__src, __pyx_k__src, sizeof(__pyx_k__src), 0, 0, 1, 1},
  {&__pyx_n_s__t, __pyx_k__t, sizeof(__pyx_k__t), 0, 0, 1, 1},
  {&__pyx_n_s__val1, __pyx_k__val1, sizeof(__pyx_k__val1), 0, 0, 1, 1},
  {&__pyx_n_s__val2, __pyx_k__val2, sizeof(__pyx_k__val2), 0, 0, 1, 1},
  {&__pyx_n_s__value, __pyx_k__value, sizeof(__pyx_k__value), 0, 0, 1, 1},
  {&__pyx_n_s__values1, __pyx_k__values1, sizeof(__pyx_k__values1), 0, 0, 1, 1},
  {&__pyx_n_s__values2, __pyx_k__values2, sizeof(__pyx_k__values2), 0, 0, 1, 1},
  {&__pyx_n_s__velocity, __pyx_k__velocity, sizeof(__pyx_k__velocity), 0, 0, 1, 1},
  {&__pyx_n_s__vels, __pyx_k__vels, sizeof(__pyx_k__vels), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetName(__pyx_b, __pyx_n_s__enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplemented = __Pyx_GetName(__pyx_b, __pyx_n_s__NotImplemented); if (!__pyx_builtin_NotImplemented) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "rtmidi2.pyx":56
 *         if isinstance(port, int):
 *             if port > len(self.ports) - 1:
 *                 raise ValueError("port number out of range")             # <<<<<<<<<<<<<<
 *             port_number = port
 *         else:
 */
  __pyx_k_tuple_2 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_2);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "rtmidi2.pyx":63
 *                 port_number = self.ports.index(port)
 *             else:
 *                 raise ValueError("Port not found")             # <<<<<<<<<<<<<<
 *         self.baseptr().openPort(port_number)
 *         return self
 */
  __pyx_k_tuple_4 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_4);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
  PyTuple_SET_ITEM(__pyx_k_tuple_4, 0, ((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_4));

  /* "rtmidi2.pyx":175
 *             return (message, delta_time) if gettime == 1 else message
 *         else:
 *             return (None, None) if gettime == 1 else None             # <<<<<<<<<<<<<<
 * 
 * cdef class MidiInMulti:
 */
  __pyx_k_tuple_9 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_9);
  __Pyx_INCREF(Py_None);
  PyTuple_SET_ITEM(__pyx_k_tuple_9, 0, Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_INCREF(Py_None);
  PyTuple_SET_ITEM(__pyx_k_tuple_9, 1, Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_9));

  /* "rtmidi2.pyx":242
 *         assert port < self.inspector.getPortCount()
 *         if port in self.openports:
 *             raise ValueError("Port already open!")             # <<<<<<<<<<<<<<
 *         cdef RtMidiIn* newport = new RtMidiIn(string(<char*>self.clientname), self.queuesize)
 *         portname = self.inspector.getPortName(port).c_str()
 */
  __pyx_k_tuple_14 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_14);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_13));
  PyTuple_SET_ITEM(__pyx_k_tuple_14, 0, ((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "rtmidi2.pyx":307
 *                     self.hascallback[port] = True
 *     def get_message(self, int gettime=1):
 *         raise NotImplemented("The blocking interface is not implemented for multiple inputs. Use the callback system")             # <<<<<<<<<<<<<<
 * 
 * def splitchannel(int b):
 */
  __pyx_k_tuple_17 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_17);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_16));
  PyTuple_SET_ITEM(__pyx_k_tuple_17, 0, ((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_16));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_17));

  /* "rtmidi2.pyx":401
 *             v0 = messagetype | channel
 *         else:
 *             raise ValueError("multiple channels in a function call not implemented yet")             # <<<<<<<<<<<<<<
 *         if isinstance(values1, list):
 *             for i in range(len(<list>values1)):
 */
  __pyx_k_tuple_23 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_23);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_22));
  PyTuple_SET_ITEM(__pyx_k_tuple_23, 0, ((PyObject *)__pyx_kp_s_22));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_22));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_23));

  /* "rtmidi2.pyx":449
 *                     del m
 *             else:
 *                 raise NotImplemented("only lists implemented right now")             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplemented("no multiple channels implemented right now")
 */
  __pyx_k_tuple_25 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_25);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_24));
  PyTuple_SET_ITEM(__pyx_k_tuple_25, 0, ((PyObject *)__pyx_kp_s_24));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_24));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_25));

  /* "rtmidi2.pyx":451
 *                 raise NotImplemented("only lists implemented right now")
 *         else:
 *             raise NotImplemented("no multiple channels implemented right now")             # <<<<<<<<<<<<<<
 * 
 * cdef class MidiOut(MidiBase):
 */
  __pyx_k_tuple_27 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_27);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_26));
  PyTuple_SET_ITEM(__pyx_k_tuple_27, 0, ((PyObject *)__pyx_kp_s_26));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_26));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_27));

  /* "rtmidi2.pyx":528
 *         else:
 *             del m
 *             raise TypeError("messages should be a list of tuples. other containers (numpy arrays) are still not supported")             # <<<<<<<<<<<<<<
 *         del m
 *         return None
 */
  __pyx_k_tuple_29 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_29);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_28));
  PyTuple_SET_ITEM(__pyx_k_tuple_29, 0, ((PyObject *)__pyx_kp_s_28));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_28));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_29));

  /* "rtmidi2.pyx":550
 *         else:
 *             del m
 *             raise NotImplemented("channels, notes and vels should be lists. other containers are not yet implemented")             # <<<<<<<<<<<<<<
 *         del m
 *     cpdef send_noteoff(self, unsigned char channel, unsigned char midinote):
 */
  __pyx_k_tuple_31 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_31);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_30));
  PyTuple_SET_ITEM(__pyx_k_tuple_31, 0, ((PyObject *)__pyx_kp_s_30));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_30));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_31));

  /* "rtmidi2.pyx":576
 *             else:
 *                 del m
 *                 raise NotImplemented("only lists implemented right now")             # <<<<<<<<<<<<<<
 *         elif isinstance(channels, list):
 *             for i in range(len(<list>notes)):
 */
  __pyx_k_tuple_32 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_32);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_24));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 0, ((PyObject *)__pyx_kp_s_24));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_24));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_32));

  /* "rtmidi2.pyx":309
 *         raise NotImplemented("The blocking interface is not implemented for multiple inputs. Use the callback system")
 * 
 * def splitchannel(int b):             # <<<<<<<<<<<<<<
 *     """
 *     split the messagetype and the channel as returned by get_message
 */
  __pyx_k_tuple_34 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_34);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__b));
  PyTuple_SET_ITEM(__pyx_k_tuple_34, 0, ((PyObject *)__pyx_n_s__b));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__b));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__b));
  PyTuple_SET_ITEM(__pyx_k_tuple_34, 1, ((PyObject *)__pyx_n_s__b));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__b));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_34));
  __pyx_k_codeobj_35 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_36, __pyx_n_s__splitchannel, 309, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rtmidi2.pyx":318
 *     return b & 0xF0, b & 0x0F
 * 
 * def msgtype2str(msgtype):             # <<<<<<<<<<<<<<
 *     return {
 *         NOTEON:     'NOTEON',
 */
  __pyx_k_tuple_37 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_37);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__msgtype));
  PyTuple_SET_ITEM(__pyx_k_tuple_37, 0, ((PyObject *)__pyx_n_s__msgtype));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__msgtype));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_37));
  __pyx_k_codeobj_38 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_36, __pyx_n_s__msgtype2str, 318, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rtmidi2.pyx":329
 * _notenames = "C C# D D# E F F# G G# A Bb B C".split()
 * 
 * def midi2note(midinote):             # <<<<<<<<<<<<<<
 *     octave = int(midinote / 12) - 1
 *     pitchindex = midinote % 12
 */
  __pyx_k_tuple_40 = PyTuple_New(3); if (unlikely(!__pyx_k_tuple_40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_40);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__midinote));
  PyTuple_SET_ITEM(__pyx_k_tuple_40, 0, ((PyObject *)__pyx_n_s__midinote));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__midinote));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__octave));
  PyTuple_SET_ITEM(__pyx_k_tuple_40, 1, ((PyObject *)__pyx_n_s__octave));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__octave));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__pitchindex));
  PyTuple_SET_ITEM(__pyx_k_tuple_40, 2, ((PyObject *)__pyx_n_s__pitchindex));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__pitchindex));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_40));
  __pyx_k_codeobj_41 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_36, __pyx_n_s__midi2note, 329, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rtmidi2.pyx":334
 *     return "%s%d" % (_notenames[pitchindex], octave)
 * 
 * def mididump_callback(src, msg, t):             # <<<<<<<<<<<<<<
 *     msgt, ch = splitchannel(msg[0])
 *     msgtstr = msgtype2str(msgt)
 */
  __pyx_k_tuple_42 = PyTuple_New(9); if (unlikely(!__pyx_k_tuple_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_42);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__src));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 0, ((PyObject *)__pyx_n_s__src));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__src));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__msg));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 1, ((PyObject *)__pyx_n_s__msg));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__msg));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__t));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 2, ((PyObject *)__pyx_n_s__t));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__t));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__msgt));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 3, ((PyObject *)__pyx_n_s__msgt));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__msgt));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ch));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 4, ((PyObject *)__pyx_n_s__ch));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ch));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__msgtstr));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 5, ((PyObject *)__pyx_n_s__msgtstr));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__msgtstr));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__val1));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 6, ((PyObject *)__pyx_n_s__val1));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__val1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__val2));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 7, ((PyObject *)__pyx_n_s__val2));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__val2));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__notename));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 8, ((PyObject *)__pyx_n_s__notename));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__notename));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_42));
  __pyx_k_codeobj_43 = (PyObject*)__Pyx_PyCode_New(3, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_36, __pyx_n_s__mididump_callback, 334, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rtmidi2.pyx":348
 *         print "%s | ch %d | val1 %d | val2 %d" % (msgtstr, ch, val1, val2)
 * 
 * def mididump(port_pattern="*"):             # <<<<<<<<<<<<<<
 *     """
 *     listen to all ports matching pattern and print the incomming messages
 */
  __pyx_k_tuple_44 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_44);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__port_pattern));
  PyTuple_SET_ITEM(__pyx_k_tuple_44, 0, ((PyObject *)__pyx_n_s__port_pattern));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__port_pattern));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__m));
  PyTuple_SET_ITEM(__pyx_k_tuple_44, 1, ((PyObject *)__pyx_n_s__m));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__m));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_44));
  __pyx_k_codeobj_45 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_36, __pyx_n_s__mididump, 348, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_144 = PyInt_FromLong(144); if (unlikely(!__pyx_int_144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_176 = PyInt_FromLong(176); if (unlikely(!__pyx_int_176)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_192 = PyInt_FromLong(192); if (unlikely(!__pyx_int_192)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_224 = PyInt_FromLong(224); if (unlikely(!__pyx_int_224)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initrtmidi2(void); /*proto*/
PyMODINIT_FUNC initrtmidi2(void)
#else
PyMODINIT_FUNC PyInit_rtmidi2(void); /*proto*/
PyMODINIT_FUNC PyInit_rtmidi2(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_rtmidi2(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("rtmidi2"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_rtmidi2) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_7rtmidi2_MidiBase = &__pyx_vtable_7rtmidi2_MidiBase;
  __pyx_vtable_7rtmidi2_MidiBase.baseptr = (RtMidi *(*)(struct __pyx_obj_7rtmidi2_MidiBase *))__pyx_f_7rtmidi2_8MidiBase_baseptr;
  if (PyType_Ready(&__pyx_type_7rtmidi2_MidiBase) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_7rtmidi2_MidiBase.tp_dict, __pyx_vtabptr_7rtmidi2_MidiBase) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MidiBase", (PyObject *)&__pyx_type_7rtmidi2_MidiBase) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7rtmidi2_MidiBase = &__pyx_type_7rtmidi2_MidiBase;
  __pyx_vtabptr_7rtmidi2_MidiIn = &__pyx_vtable_7rtmidi2_MidiIn;
  __pyx_vtable_7rtmidi2_MidiIn.__pyx_base = *__pyx_vtabptr_7rtmidi2_MidiBase;
  __pyx_vtable_7rtmidi2_MidiIn.__pyx_base.baseptr = (RtMidi *(*)(struct __pyx_obj_7rtmidi2_MidiBase *))__pyx_f_7rtmidi2_6MidiIn_baseptr;
  __pyx_type_7rtmidi2_MidiIn.tp_base = __pyx_ptype_7rtmidi2_MidiBase;
  if (PyType_Ready(&__pyx_type_7rtmidi2_MidiIn) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_7rtmidi2_MidiIn, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7rtmidi2_6MidiIn_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7rtmidi2_6MidiIn_2__init__.doc = __pyx_doc_7rtmidi2_6MidiIn_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7rtmidi2_6MidiIn_2__init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_7rtmidi2_MidiIn.tp_dict, __pyx_vtabptr_7rtmidi2_MidiIn) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MidiIn", (PyObject *)&__pyx_type_7rtmidi2_MidiIn) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7rtmidi2_MidiIn = &__pyx_type_7rtmidi2_MidiIn;
  __pyx_vtabptr_7rtmidi2_MidiInMulti = &__pyx_vtable_7rtmidi2_MidiInMulti;
  __pyx_vtable_7rtmidi2_MidiInMulti.open_port = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiInMulti *, int, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_11MidiInMulti_open_port;
  __pyx_vtable_7rtmidi2_MidiInMulti.open_ports = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiInMulti *, int __pyx_skip_dispatch, struct __pyx_opt_args_7rtmidi2_11MidiInMulti_open_ports *__pyx_optional_args))__pyx_f_7rtmidi2_11MidiInMulti_open_ports;
  __pyx_vtable_7rtmidi2_MidiInMulti.close_ports = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiInMulti *, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_11MidiInMulti_close_ports;
  if (PyType_Ready(&__pyx_type_7rtmidi2_MidiInMulti) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_7rtmidi2_MidiInMulti, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7rtmidi2_11MidiInMulti_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7rtmidi2_11MidiInMulti_2__init__.doc = __pyx_doc_7rtmidi2_11MidiInMulti_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7rtmidi2_11MidiInMulti_2__init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_7rtmidi2_MidiInMulti.tp_dict, __pyx_vtabptr_7rtmidi2_MidiInMulti) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MidiInMulti", (PyObject *)&__pyx_type_7rtmidi2_MidiInMulti) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7rtmidi2_MidiInMulti = &__pyx_type_7rtmidi2_MidiInMulti;
  __pyx_vtabptr_7rtmidi2_MidiOut_slower = &__pyx_vtable_7rtmidi2_MidiOut_slower;
  __pyx_vtable_7rtmidi2_MidiOut_slower.__pyx_base = *__pyx_vtabptr_7rtmidi2_MidiBase;
  __pyx_vtable_7rtmidi2_MidiOut_slower.__pyx_base.baseptr = (RtMidi *(*)(struct __pyx_obj_7rtmidi2_MidiBase *))__pyx_f_7rtmidi2_14MidiOut_slower_baseptr;
  __pyx_vtable_7rtmidi2_MidiOut_slower.send_message = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_14MidiOut_slower_send_message;
  __pyx_vtable_7rtmidi2_MidiOut_slower.send_cc = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, int, int, int, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_14MidiOut_slower_send_cc;
  __pyx_vtable_7rtmidi2_MidiOut_slower.send_messages = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, int, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_14MidiOut_slower_send_messages;
  __pyx_vtable_7rtmidi2_MidiOut_slower.send_noteon = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, int, int, int, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_14MidiOut_slower_send_noteon;
  __pyx_vtable_7rtmidi2_MidiOut_slower.send_noteon_many = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_14MidiOut_slower_send_noteon_many;
  __pyx_vtable_7rtmidi2_MidiOut_slower.send_noteoff = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, unsigned char, unsigned char, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_14MidiOut_slower_send_noteoff;
  __pyx_vtable_7rtmidi2_MidiOut_slower.send_noteoff_many = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut_slower *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_14MidiOut_slower_send_noteoff_many;
  __pyx_type_7rtmidi2_MidiOut_slower.tp_base = __pyx_ptype_7rtmidi2_MidiBase;
  if (PyType_Ready(&__pyx_type_7rtmidi2_MidiOut_slower) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_7rtmidi2_MidiOut_slower.tp_dict, __pyx_vtabptr_7rtmidi2_MidiOut_slower) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MidiOut_slower", (PyObject *)&__pyx_type_7rtmidi2_MidiOut_slower) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7rtmidi2_MidiOut_slower = &__pyx_type_7rtmidi2_MidiOut_slower;
  __pyx_vtabptr_7rtmidi2_MidiOut = &__pyx_vtable_7rtmidi2_MidiOut;
  __pyx_vtable_7rtmidi2_MidiOut.__pyx_base = *__pyx_vtabptr_7rtmidi2_MidiBase;
  __pyx_vtable_7rtmidi2_MidiOut.__pyx_base.baseptr = (RtMidi *(*)(struct __pyx_obj_7rtmidi2_MidiBase *))__pyx_f_7rtmidi2_7MidiOut_baseptr;
  __pyx_vtable_7rtmidi2_MidiOut.send_raw = (void (*)(struct __pyx_obj_7rtmidi2_MidiOut *, unsigned char, unsigned char, unsigned char))__pyx_f_7rtmidi2_7MidiOut_send_raw;
  __pyx_vtable_7rtmidi2_MidiOut.send_cc = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut *, unsigned char, unsigned char, unsigned char, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_7MidiOut_send_cc;
  __pyx_vtable_7rtmidi2_MidiOut.send_messages = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut *, int, PyObject *, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_7MidiOut_send_messages;
  __pyx_vtable_7rtmidi2_MidiOut.send_noteon = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut *, unsigned char, unsigned char, unsigned char, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_7MidiOut_send_noteon;
  __pyx_vtable_7rtmidi2_MidiOut.send_noteon_many = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_7MidiOut_send_noteon_many;
  __pyx_vtable_7rtmidi2_MidiOut.send_noteoff = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut *, unsigned char, unsigned char, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_7MidiOut_send_noteoff;
  __pyx_vtable_7rtmidi2_MidiOut.send_noteoff_many = (PyObject *(*)(struct __pyx_obj_7rtmidi2_MidiOut *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7rtmidi2_7MidiOut_send_noteoff_many;
  __pyx_type_7rtmidi2_MidiOut.tp_base = __pyx_ptype_7rtmidi2_MidiBase;
  if (PyType_Ready(&__pyx_type_7rtmidi2_MidiOut) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_7rtmidi2_MidiOut.tp_dict, __pyx_vtabptr_7rtmidi2_MidiOut) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MidiOut", (PyObject *)&__pyx_type_7rtmidi2_MidiOut) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7rtmidi2_MidiOut = &__pyx_type_7rtmidi2_MidiOut;
  if (PyType_Ready(&__pyx_type_7rtmidi2___pyx_scope_struct____repr__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7rtmidi2___pyx_scope_struct____repr__ = &__pyx_type_7rtmidi2___pyx_scope_struct____repr__;
  if (PyType_Ready(&__pyx_type_7rtmidi2___pyx_scope_struct_1_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7rtmidi2___pyx_scope_struct_1_genexpr = &__pyx_type_7rtmidi2___pyx_scope_struct_1_genexpr;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "rtmidi2.pyx":14
 * # Init Python threads and GIL, because RtMidi calls Python from native threads.
 * # See http://permalink.gmane.org/gmane.comp.python.cython.user/5837
 * PyEval_InitThreads()             # <<<<<<<<<<<<<<
 * 
 * DEF DNOTEON     = 144
 */
  PyEval_InitThreads();

  /* "rtmidi2.pyx":22
 * DEF DPITCHWHEEL = 224
 * 
 * NOTEON     = DNOTEON             # <<<<<<<<<<<<<<
 * CC         = DCC
 * NOTEOFF    = DNOTEOFF
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__NOTEON, __pyx_int_144) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rtmidi2.pyx":23
 * 
 * NOTEON     = DNOTEON
 * CC         = DCC             # <<<<<<<<<<<<<<
 * NOTEOFF    = DNOTEOFF
 * PROGCHANGE = DPROGCHANGE
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CC, __pyx_int_176) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rtmidi2.pyx":24
 * NOTEON     = DNOTEON
 * CC         = DCC
 * NOTEOFF    = DNOTEOFF             # <<<<<<<<<<<<<<
 * PROGCHANGE = DPROGCHANGE
 * PITCHWHEEL = DPITCHWHEEL
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__NOTEOFF, __pyx_int_128) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rtmidi2.pyx":25
 * CC         = DCC
 * NOTEOFF    = DNOTEOFF
 * PROGCHANGE = DPROGCHANGE             # <<<<<<<<<<<<<<
 * PITCHWHEEL = DPITCHWHEEL
 * 
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PROGCHANGE, __pyx_int_192) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rtmidi2.pyx":26
 * NOTEOFF    = DNOTEOFF
 * PROGCHANGE = DPROGCHANGE
 * PITCHWHEEL = DPITCHWHEEL             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "RtMidi/RtMidi.h":
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PITCHWHEEL, __pyx_int_224) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rtmidi2.pyx":147
 *             if self.py_callback is not None:
 *                 self.thisptr.setCallback(midi_in_callback, <void*>self.py_callback)
 *     def ignore_types(self, midi_sysex=True, midi_time=True, midi_sense=True):             # <<<<<<<<<<<<<<
 *         self.thisptr.ignoreTypes(midi_sysex, midi_time, midi_sense)
 *     def get_message(self, int gettime=1):
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_6 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_7 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_8 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rtmidi2.pyx":309
 *         raise NotImplemented("The blocking interface is not implemented for multiple inputs. Use the callback system")
 * 
 * def splitchannel(int b):             # <<<<<<<<<<<<<<
 *     """
 *     split the messagetype and the channel as returned by get_message
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7rtmidi2_1splitchannel, NULL, __pyx_n_s__rtmidi2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__splitchannel, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rtmidi2.pyx":318
 *     return b & 0xF0, b & 0x0F
 * 
 * def msgtype2str(msgtype):             # <<<<<<<<<<<<<<
 *     return {
 *         NOTEON:     'NOTEON',
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7rtmidi2_3msgtype2str, NULL, __pyx_n_s__rtmidi2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__msgtype2str, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rtmidi2.pyx":327
 *     }.get(msgtype, 'UNKNOWN')
 * 
 * _notenames = "C C# D D# E F F# G G# A Bb B C".split()             # <<<<<<<<<<<<<<
 * 
 * def midi2note(midinote):
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_39), __pyx_n_s__split); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___notenames, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rtmidi2.pyx":329
 * _notenames = "C C# D D# E F F# G G# A Bb B C".split()
 * 
 * def midi2note(midinote):             # <<<<<<<<<<<<<<
 *     octave = int(midinote / 12) - 1
 *     pitchindex = midinote % 12
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7rtmidi2_5midi2note, NULL, __pyx_n_s__rtmidi2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__midi2note, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rtmidi2.pyx":334
 *     return "%s%d" % (_notenames[pitchindex], octave)
 * 
 * def mididump_callback(src, msg, t):             # <<<<<<<<<<<<<<
 *     msgt, ch = splitchannel(msg[0])
 *     msgtstr = msgtype2str(msgt)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7rtmidi2_7mididump_callback, NULL, __pyx_n_s__rtmidi2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mididump_callback, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rtmidi2.pyx":348
 *         print "%s | ch %d | val1 %d | val2 %d" % (msgtstr, ch, val1, val2)
 * 
 * def mididump(port_pattern="*"):             # <<<<<<<<<<<<<<
 *     """
 *     listen to all ports matching pattern and print the incomming messages
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7rtmidi2_9mididump, NULL, __pyx_n_s__rtmidi2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mididump, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rtmidi2.pyx":1
 * #cython: boundscheck=False             # <<<<<<<<<<<<<<
 * #cython: embedsignature=True
 * #cython: checknone=False
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    __Pyx_AddTraceback("init rtmidi2", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init rtmidi2");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *args;
        if (!value)
            args = PyTuple_New(0);
        else if (PyTuple_Check(value)) {
            Py_INCREF(value);
            args = value;
        }
        else
            args = PyTuple_Pack(1, value);
        if (!args)
            goto bad;
        owned_instance = PyEval_CallObject(type, args);
        Py_DECREF(args);
        if (!owned_instance)
            goto bad;
        value = owned_instance;
        if (!PyExceptionInstance_Check(value)) {
            PyErr_Format(PyExc_TypeError,
                         "calling %R should have returned an instance of "
                         "BaseException, not %R",
                         type, Py_TYPE(value));
            goto bad;
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause && cause != Py_None) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_base && type->tp_base->tp_traverse)
        return type->tp_base->tp_traverse(obj, v, a);
    return 0;
}

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_base && type->tp_base->tp_clear)
        type->tp_base->tp_clear(obj);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                /* try package relative import first */
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static PyObject *__Pyx_Generator_Next(PyObject *self);
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Generator_Close(PyObject *self);
static PyObject *__Pyx_Generator_Throw(PyObject *gen, PyObject *args);
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (unlikely(et != PyExc_StopIteration) &&
            unlikely(!PyErr_GivenExceptionMatches(et, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (likely(!ev) || !PyObject_IsInstance(ev, PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_IsInstance(ev, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = PyObject_GetAttrString(ev, "args");
        Py_DECREF(ev);
        if (likely(args)) {
            value = PyObject_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Generator_ExceptionClear(__pyx_GeneratorObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Generator_CheckRunning(__pyx_GeneratorObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_SendEx(__pyx_GeneratorObject *self, PyObject *value) {
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        /* Generators always return to their most recent caller, not
         * necessarily their creator. */
        if (self->exc_traceback) {
            PyThreadState *tstate = PyThreadState_GET();
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        /* Don't keep the reference to f_back any longer than necessary.  It
         * may keep a chain of frames alive or it could create a reference
         * cycle. */
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_FinishDelegation(__pyx_GeneratorObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Generator_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Generator_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Send(yf, value);
        } else {
            if (value == Py_None)
                ret = PyIter_Next(yf);
            else
                ret = PyObject_CallMethod(yf, (char*)"send", (char*)"O", value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, value);
}
static int __Pyx_Generator_CloseIter(__pyx_GeneratorObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Generator_Close(yf);
        if (!retval)
            return -1;
    } else {
        PyObject *meth;
        gen->is_running = 1;
        meth = PyObject_GetAttrString(yf, "close");
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Close(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Generator_CloseIter(gen, yf);
        __Pyx_Generator_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
#if PY_VERSION_HEX < 0x02050000
        PyErr_SetNone(PyExc_StopIteration);
#else
        PyErr_SetNone(PyExc_GeneratorExit);
#endif
    retval = __Pyx_Generator_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
#if PY_VERSION_HEX >= 0x02050000
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
#endif
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();      /* ignore these errors */
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Generator_Throw(PyObject *self, PyObject *args) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
#if PY_VERSION_HEX >= 0x02050000
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Generator_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Generator_Undelegate(gen);
            if (err < 0)
                return __Pyx_Generator_SendEx(gen, NULL);
            goto throw_here;
        }
#endif
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Throw(yf, args);
        } else {
            PyObject *meth = PyObject_GetAttrString(yf, "throw");
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Generator_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Generator_FinishDelegation(gen);
        }
        return ret;
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Generator_SendEx(gen, NULL);
}
static int __Pyx_Generator_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Generator_clear(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    return 0;
}
static void __Pyx_Generator_dealloc(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    PyObject_GC_Track(self);
    if (gen->resume_label > 0) {
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
            return;                     /* resurrected.  :( */
    }
    PyObject_GC_UnTrack(self);
    __Pyx_Generator_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Generator_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    if (gen->resume_label <= 0)
        return ;
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Generator_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
    /* Undo the temporary resurrection; can't use DECREF here, it would
     * cause a recursive call.
     */
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0)
        return; /* this is the normal path out */
    /* close() resurrected it!  Make it look like the original Py_DECREF
     * never happened.
     */
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_FOR_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    /* If Py_REF_DEBUG, _Py_NewReference bumped _Py_RefTotal, so
     * we need to undo that. */
    _Py_DEC_REFTOTAL;
#endif
    /* If Py_TRACE_REFS, _Py_NewReference re-added self to the object
     * chain, so no more to do there.
     * If COUNT_ALLOCS, the original decref bumped tp_frees, and
     * _Py_NewReference bumped tp_allocs:  both of those need to be
     * undone.
     */
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
}
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running",
#if PY_VERSION_HEX >= 0x02060000
     T_BOOL,
#else
     T_BYTE,
#endif
     offsetof(__pyx_GeneratorObject, is_running),
     READONLY,
     NULL},
    {0, 0, 0, 0, 0}
};
static PyMethodDef __pyx_Generator_methods[] = {
    {__Pyx_NAMESTR("send"), (PyCFunction) __Pyx_Generator_Send, METH_O, 0},
    {__Pyx_NAMESTR("throw"), (PyCFunction) __Pyx_Generator_Throw, METH_VARARGS, 0},
    {__Pyx_NAMESTR("close"), (PyCFunction) __Pyx_Generator_Close, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("generator"),         /*tp_name*/
    sizeof(__pyx_GeneratorObject),      /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_Generator_dealloc,/*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    0,                                   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    0,                                  /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_Generator_traverse,   /*tp_traverse*/
    0,                                  /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_GeneratorObject, gi_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    (iternextfunc) __Pyx_Generator_Next, /*tp_iternext*/
    __pyx_Generator_methods,            /*tp_methods*/
    __pyx_Generator_memberlist,         /*tp_members*/
    0,                                  /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    0,                                  /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    0,                                  /*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
    __Pyx_Generator_del,                /*tp_del*/
#if PY_VERSION_HEX >= 0x02060000
    0,                                  /*tp_version_tag*/
#endif
};
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure) {
    __pyx_GeneratorObject *gen =
        PyObject_GC_New(__pyx_GeneratorObject, &__pyx_GeneratorType_type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    PyObject_GC_Track(gen);
    return gen;
}
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    if (PyType_Ready(&__pyx_GeneratorType_type)) {
        return -1;
    }
    __pyx_GeneratorType = &__pyx_GeneratorType_type;
    return 0;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}


/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
